/**
  ******************************************************************************
  * @file    stm32f103c8.asmh
  * @author  Bill Westfield (WestfW)
  * @author  MCD Application Team
  * @version V3.6.3
  * @date    10-April-2014
  * @brief   Derived from ST-provided stm32f10x.h CMIS PAL Header file,
  *          Pruned and edited for use from assembler on 32f103c8t6
  */
.nolist
/**
  *           - Configuration section that allows to select:
  *              - To change few application-specific parameters such as the HSE 
  *                crystal frequency
  *           - address mapping for all peripherals
  *           - Peripheral's registers declarations and bits definition
  *
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/*
 * Bill Westfield (WestfW) releases all rights to whatever part of this
 * file might be considered to be his original work.
 */

/*
 * Edit history
 *
 * RCS Log:
 * $Log:$
 *
 *
 * Manual Log:
 * 10-Sep-2014 WestfW: Delete the stupid CAN bit definitions that were
 * 	        simply naming bits xxx_b0, xxx_b1, ... xxx_b12, etc.
 *	       Remove other similar pointless bit naming.
 *	       Add NVIC and Systick bases and offsets from core_cm3.h
 *
 *  9-Sep-2014 WestfW: add STRUCTDEF and associated macros, and 
 * 	      the converted structures from stm32f10x.h
 *	      (remove the manually-created definitions.)
 *	      (Note CAN peripheral included arrays of other CAN-related
 *	       datastructures, which the macros don't support.)
 *	      (more EMACS macros for converting the structures)
 *
 *  7-Sep-2014 WestfW: Manually define GPIO, RCC offsets.
 *
 *  5-Sep-2014 WestfW: original conversion from C.  Includes only
 * 	      defines for the various periperal base addresses.
 *	      Note the EMACS macros at the end, which aid conversion.
 */

/*
 * macros for creating offset values from text resembling C structure defs.
 */

  .macro STRUCTDEF structname
   .equ \structname\()__ctr, 0
   .macro uint32_t varname
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + 4
   .endm
   .macro uint16_t varname
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + 2
   .endm
   .macro uint8_t varname
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + 1
   .endm
   .macro uint32_ta varname, cnt
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + (4*\cnt)
   .endm
   .macro uint16_ta varname, cnt
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + (2*\cnt)
   .endm
   .macro uint8_ta varname, cnt
     .equ \structname\()_\()\varname, \structname\()__ctr
     .equ \structname\()__ctr, \structname\()__ctr + \cnt
   .endm
   .macro _define_new
     .macro _new_\structname name=__noname__
       .ifc x\name, x__noname__
	 .space \structname\()__ctr
       .else
         \\()name: .space \structname\()__ctr
       .endif
     .endm
   .endm
  .endm
	
  .macro ENDSTRUCT
    _define_new
    .purgem _define_new
    .purgem uint32_t
    .purgem uint16_t
    .purgem uint8_t
    .purgem uint32_ta
    .purgem uint16_ta
    .purgem uint8_ta
  .endm

  .macro __IO a, b=, c=
    \a \b \c
  .endm

  .macro __I a, b=, c=
    \a \b \c
  .endm
	
/** @addtogroup CMSIS
  * @{
  */

/** @addtogroup stm32f10x
  * @{
  */
    
.ifndef __STM32F10x_H
  .equiv __STM32F10x_H, 1

/*
 * This is for:
 - Medium-density devices are STM32F101xx, STM32F102xx and STM32F103xx microcontrollers
   where the Flash memory density ranges between 64 and 128 Kbytes.
 */

 .equ STM32F10X_MD, 1

/**
 * @brief In the following line adjust the value of External High Speed oscillator (HSE)
   used in your application 
   
   Tip: To avoid modifying this file each time you need to use different HSE, you
        can define the HSE value in your toolchain compiler preprocessor.
  */           
 .ifndef  HSE_VALUE
   .equiv HSE_VALUE,    (8000000) /*!< Value of the External oscillator in Hz */
 .endif


/**
 * @brief In the following line adjust the External High Speed oscillator (HSE) Startup 
   Timeout value 
   */
 .ifndef HSE_STARTUP_TIMEOUT
   .equiv HSE_STARTUP_TIMEOUT,    (0x0500)   /*!< Time out for HSE start up */
 .endif

 .ifndef HSI_VALUE
   .equiv HSI_VALUE,    (8000000) /*!< Value of the Internal oscillator in Hz*/
 .endif /* HSI_VALUE */

/**
 * @brief STM32F10x Standard Peripheral Library version number V3.6.3
   */
 .equiv __STM32F10X_STDPERIPH_VERSION_MAIN,   (0x03) /*!< [31:24] main version */
 .equiv __STM32F10X_STDPERIPH_VERSION_SUB1,   (0x06) /*!< [23:16] sub1 version */
 .equiv __STM32F10X_STDPERIPH_VERSION_SUB2,   (0x03) /*!< [15:8]  sub2 version */
 .equiv __STM32F10X_STDPERIPH_VERSION_RC,     (0x00) /*!< [7:0]  release candidate */
 .equiv __STM32F10X_STDPERIPH_VERSION,        ((__STM32F10X_STDPERIPH_VERSION_MAIN << 24)|(__STM32F10X_STDPERIPH_VERSION_SUB1 << 16) |(__STM32F10X_STDPERIPH_VERSION_SUB2 << 8)|(__STM32F10X_STDPERIPH_VERSION_RC))

/**
  * @}
  */

/** @addtogroup Configuration_section_for_CMSIS
  * @{
  */

/**
 * @brief Configuration of the Cortex-M3 Processor and Core Peripherals 
 */
 .equiv __MPU_PRESENT,             0      /*!< Other STM32 devices does not provide an MPU  */
 .equiv __CM3_REV,                 0x0200  /*!< Core Revision r2p0                           */
 .equiv __NVIC_PRIO_BITS,          4       /*!< STM32 uses 4 Bits for the Priority Levels    */
 .equiv __Vendor_SysTickConfig,    0       /*!< Set to 1 if different SysTick Config is used */

/**
 * @brief STM32F10x Interrupt Number Definition, according to the selected device 
 *        in @ref Library_configuration_section 
 */
.if 0
typedef enum IRQn
{
/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                             */
  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M3 Memory Management Interrupt              */
  BusFault_IRQn               = -11,    /*!< 5 Cortex-M3 Bus Fault Interrupt                      */
  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M3 Usage Fault Interrupt                    */
  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M3 SV Call Interrupt     
                  */
  DebugMonitor_IRQn           = -4,     /*!< 12 Cortex-M3 Debug Monitor Interrupt                 */
  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M3 Pend SV Interrupt                       */
  SysTick_IRQn                = -1,     /*!< 15 Cortex-M3 System Tick Interrupt                   */

/******  STM32 specific Interrupt Numbers *********************************************************/
  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                            */
  PVD_IRQn                    = 1,      /*!< PVD through EXTI Line detection Interrupt            */
  TAMPER_IRQn                 = 2,      /*!< Tamper Interrupt                                     */
  RTC_IRQn                    = 3,      /*!< RTC global Interrupt                                 */
  FLASH_IRQn                  = 4,      /*!< FLASH global Interrupt                               */
  RCC_IRQn                    = 5,      /*!< RCC global Interrupt                                 */
  EXTI0_IRQn                  = 6,      /*!< EXTI Line0 Interrupt                                 */
  EXTI1_IRQn                  = 7,      /*!< EXTI Line1 Interrupt                                 */
  EXTI2_IRQn                  = 8,      /*!< EXTI Line2 Interrupt                                 */
  EXTI3_IRQn                  = 9,      /*!< EXTI Line3 Interrupt                                 */
  EXTI4_IRQn                  = 10,     /*!< EXTI Line4 Interrupt                                 */
  DMA1_Channel1_IRQn          = 11,     /*!< DMA1 Channel 1 global Interrupt                      */
  DMA1_Channel2_IRQn          = 12,     /*!< DMA1 Channel 2 global Interrupt                      */
  DMA1_Channel3_IRQn          = 13,     /*!< DMA1 Channel 3 global Interrupt                      */
  DMA1_Channel4_IRQn          = 14,     /*!< DMA1 Channel 4 global Interrupt                      */
  DMA1_Channel5_IRQn          = 15,     /*!< DMA1 Channel 5 global Interrupt                      */
  DMA1_Channel6_IRQn          = 16,     /*!< DMA1 Channel 6 global Interrupt                      */
  DMA1_Channel7_IRQn          = 17,     /*!< DMA1 Channel 7 global Interrupt                      */

  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_IRQn               = 24,     /*!< TIM1 Break Interrupt                                 */
  TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */
  TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  USBWakeUp_IRQn              = 42      /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
} IRQn_Type;
.endif

.if 0 != 0
#include "core_cm3.h"
#include "system_stm32f10x.h"
#include <stdint.h>
.endif

/*!< STM32F10x Standard Peripheral Library old definitions (maintained for legacy purpose) */
 .equiv HSEStartUp_TimeOut,   HSE_STARTUP_TIMEOUT
 .equiv HSE_Value,            HSE_VALUE
 .equiv HSI_Value,            HSI_VALUE
/**
  * @}
  */

/***********************************************************************
 * Converted structure definitions
 ***********************************************************************/

/** 
  * @brief Analog to Digital Converter  
  */

STRUCTDEF ADC
  __IO uint32_t SR;
  __IO uint32_t CR1;
  __IO uint32_t CR2;
  __IO uint32_t SMPR1;
  __IO uint32_t SMPR2;
  __IO uint32_t JOFR1;
  __IO uint32_t JOFR2;
  __IO uint32_t JOFR3;
  __IO uint32_t JOFR4;
  __IO uint32_t HTR;
  __IO uint32_t LTR;
  __IO uint32_t SQR1;
  __IO uint32_t SQR2;
  __IO uint32_t SQR3;
  __IO uint32_t JSQR;
  __IO uint32_t JDR1;
  __IO uint32_t JDR2;
  __IO uint32_t JDR3;
  __IO uint32_t JDR4;
  __IO uint32_t DR;
ENDSTRUCT

/** 
  * @brief Backup Registers  
  */

STRUCTDEF BKP
  uint32_t  RESERVED0;
  __IO uint16_t DR1;
  uint16_t  RESERVED1;
  __IO uint16_t DR2;
  uint16_t  RESERVED2;
  __IO uint16_t DR3;
  uint16_t  RESERVED3;
  __IO uint16_t DR4;
  uint16_t  RESERVED4;
  __IO uint16_t DR5;
  uint16_t  RESERVED5;
  __IO uint16_t DR6;
  uint16_t  RESERVED6;
  __IO uint16_t DR7;
  uint16_t  RESERVED7;
  __IO uint16_t DR8;
  uint16_t  RESERVED8;
  __IO uint16_t DR9;
  uint16_t  RESERVED9;
  __IO uint16_t DR10;
  uint16_t  RESERVED10; 
  __IO uint16_t RTCCR;
  uint16_t  RESERVED11;
  __IO uint16_t CR;
  uint16_t  RESERVED12;
  __IO uint16_t CSR;
  uint16_ta  RESERVED13, 5
  __IO uint16_t DR11;
  uint16_t  RESERVED14;
  __IO uint16_t DR12;
  uint16_t  RESERVED15;
  __IO uint16_t DR13;
  uint16_t  RESERVED16;
  __IO uint16_t DR14;
  uint16_t  RESERVED17;
  __IO uint16_t DR15;
  uint16_t  RESERVED18;
  __IO uint16_t DR16;
  uint16_t  RESERVED19;
  __IO uint16_t DR17;
  uint16_t  RESERVED20;
  __IO uint16_t DR18;
  uint16_t  RESERVED21;
  __IO uint16_t DR19;
  uint16_t  RESERVED22;
  __IO uint16_t DR20;
  uint16_t  RESERVED23;
  __IO uint16_t DR21;
  uint16_t  RESERVED24;
  __IO uint16_t DR22;
  uint16_t  RESERVED25;
  __IO uint16_t DR23;
  uint16_t  RESERVED26;
  __IO uint16_t DR24;
  uint16_t  RESERVED27;
  __IO uint16_t DR25;
  uint16_t  RESERVED28;
  __IO uint16_t DR26;
  uint16_t  RESERVED29;
  __IO uint16_t DR27;
  uint16_t  RESERVED30;
  __IO uint16_t DR28;
  uint16_t  RESERVED31;
  __IO uint16_t DR29;
  uint16_t  RESERVED32;
  __IO uint16_t DR30;
  uint16_t  RESERVED33; 
  __IO uint16_t DR31;
  uint16_t  RESERVED34;
  __IO uint16_t DR32;
  uint16_t  RESERVED35;
  __IO uint16_t DR33;
  uint16_t  RESERVED36;
  __IO uint16_t DR34;
  uint16_t  RESERVED37;
  __IO uint16_t DR35;
  uint16_t  RESERVED38;
  __IO uint16_t DR36;
  uint16_t  RESERVED39;
  __IO uint16_t DR37;
  uint16_t  RESERVED40;
  __IO uint16_t DR38;
  uint16_t  RESERVED41;
  __IO uint16_t DR39;
  uint16_t  RESERVED42;
  __IO uint16_t DR40;
  uint16_t  RESERVED43;
  __IO uint16_t DR41;
  uint16_t  RESERVED44;
  __IO uint16_t DR42;
  uint16_t  RESERVED45;    
ENDSTRUCT

/** 
  * @brief Controller Area Network TxMailBox 
  */

STRUCTDEF CAN_TxMailBox
  __IO uint32_t TIR;
  __IO uint32_t TDTR;
  __IO uint32_t TDLR;
  __IO uint32_t TDHR;
ENDSTRUCT

/** 
  * @brief Controller Area Network FIFOMailBox 
  */
  
STRUCTDEF CAN_FIFOMailBox
  __IO uint32_t RIR;
  __IO uint32_t RDTR;
  __IO uint32_t RDLR;
  __IO uint32_t RDHR;
ENDSTRUCT

/** 
  * @brief Controller Area Network FilterRegister 
  */
  
STRUCTDEF CAN_FilterRegister
  __IO uint32_t FR1;
  __IO uint32_t FR2;
ENDSTRUCT

/** 
  * @brief Controller Area Network 
  */
  
STRUCTDEF CAN
  __IO uint32_t MCR;
  __IO uint32_t MSR;
  __IO uint32_t TSR;
  __IO uint32_t RF0R;
  __IO uint32_t RF1R;
  __IO uint32_t IER;
  __IO uint32_t ESR;
  __IO uint32_t BTR;
.if 0
/* No structures within structures yet... */
  uint32_ta  RESERVED0, 88
  CAN_TxMailBoxa_TypeDef sTxMailBox, 3
  CAN_FIFOMailBoxa_TypeDef sFIFOMailBox, 2
  uint32_ta  RESERVED1, 12
  __IO uint32_t FMR;
  __IO uint32_t FM1R;
  uint32_t  RESERVED2;
  __IO uint32_t FS1R;
  uint32_t  RESERVED3;
  __IO uint32_t FFA1R;
  uint32_t  RESERVED4;
  __IO uint32_t FA1R;
  uint32_ta  RESERVED5, 8
#ifndef STM32F10X_CL
  CAN_FilterRegistera_TypeDef sFilterRegister, 14
#else
  CAN_FilterRegistera_TypeDef sFilterRegister, 28
#endif /* STM32F10X_CL */
.endif
ENDSTRUCT

/** 
  * @brief Consumer Electronics Control (CEC)
  */
STRUCTDEF CEC
  __IO uint32_t CFGR;
  __IO uint32_t OAR;
  __IO uint32_t PRES;
  __IO uint32_t ESR;
  __IO uint32_t CSR;
  __IO uint32_t TXD;
  __IO uint32_t RXD;  
ENDSTRUCT

/** 
  * @brief CRC calculation unit 
  */

STRUCTDEF CRC
  __IO uint32_t DR;
  __IO uint8_t  IDR;
  uint8_t   RESERVED0;
  uint16_t  RESERVED1;
  __IO uint32_t CR;
ENDSTRUCT

/** 
  * @brief Digital to Analog Converter
  */

STRUCTDEF DAC
  __IO uint32_t CR;
  __IO uint32_t SWTRIGR;
  __IO uint32_t DHR12R1;
  __IO uint32_t DHR12L1;
  __IO uint32_t DHR8R1;
  __IO uint32_t DHR12R2;
  __IO uint32_t DHR12L2;
  __IO uint32_t DHR8R2;
  __IO uint32_t DHR12RD;
  __IO uint32_t DHR12LD;
  __IO uint32_t DHR8RD;
  __IO uint32_t DOR1;
  __IO uint32_t DOR2;
  __IO uint32_t SR;
ENDSTRUCT

/** 
  * @brief Debug MCU
  */

STRUCTDEF BGMCU
  __IO uint32_t IDCODE;
  __IO uint32_t CR;	
ENDSTRUCT

/** 
  * @brief DMA Controller
  */

STRUCTDEF DMA_Channel
  __IO uint32_t CCR;
  __IO uint32_t CNDTR;
  __IO uint32_t CPAR;
  __IO uint32_t CMAR;
ENDSTRUCT

STRUCTDEF DMA
  __IO uint32_t ISR;
  __IO uint32_t IFCR;
ENDSTRUCT

/** 
  * @brief Ethernet MAC
  */

STRUCTDEF ETH
  __IO uint32_t MACCR;
  __IO uint32_t MACFFR;
  __IO uint32_t MACHTHR;
  __IO uint32_t MACHTLR;
  __IO uint32_t MACMIIAR;
  __IO uint32_t MACMIIDR;
  __IO uint32_t MACFCR;
  __IO uint32_t MACVLANTR;             /*    8 */
       uint32_ta RESERVED0, 2
  __IO uint32_t MACRWUFFR;             /*   11 */
  __IO uint32_t MACPMTCSR;
       uint32_ta RESERVED1, 2
  __IO uint32_t MACSR;                 /*   15 */
  __IO uint32_t MACIMR;
  __IO uint32_t MACA0HR;
  __IO uint32_t MACA0LR;
  __IO uint32_t MACA1HR;
  __IO uint32_t MACA1LR;
  __IO uint32_t MACA2HR;
  __IO uint32_t MACA2LR;
  __IO uint32_t MACA3HR;
  __IO uint32_t MACA3LR;               /*   24 */
       uint32_ta RESERVED2, 40
  __IO uint32_t MMCCR;                 /*   65 */
  __IO uint32_t MMCRIR;
  __IO uint32_t MMCTIR;
  __IO uint32_t MMCRIMR;
  __IO uint32_t MMCTIMR;               /*   69 */
       uint32_ta RESERVED3, 14
  __IO uint32_t MMCTGFSCCR;            /*   84 */
  __IO uint32_t MMCTGFMSCCR;
       uint32_ta RESERVED4, 5
  __IO uint32_t MMCTGFCR;
       uint32_ta RESERVED5, 10
  __IO uint32_t MMCRFCECR;
  __IO uint32_t MMCRFAECR;
       uint32_ta RESERVED6, 10
  __IO uint32_t MMCRGUFCR;
       uint32_ta RESERVED7, 334
  __IO uint32_t PTPTSCR;
  __IO uint32_t PTPSSIR;
  __IO uint32_t PTPTSHR;
  __IO uint32_t PTPTSLR;
  __IO uint32_t PTPTSHUR;
  __IO uint32_t PTPTSLUR;
  __IO uint32_t PTPTSAR;
  __IO uint32_t PTPTTHR;
  __IO uint32_t PTPTTLR;
       uint32_ta RESERVED8, 567
  __IO uint32_t DMABMR;
  __IO uint32_t DMATPDR;
  __IO uint32_t DMARPDR;
  __IO uint32_t DMARDLAR;
  __IO uint32_t DMATDLAR;
  __IO uint32_t DMASR;
  __IO uint32_t DMAOMR;
  __IO uint32_t DMAIER;
  __IO uint32_t DMAMFBOCR;
       uint32_ta RESERVED9, 9
  __IO uint32_t DMACHTDR;
  __IO uint32_t DMACHRDR;
  __IO uint32_t DMACHTBAR;
  __IO uint32_t DMACHRBAR;
ENDSTRUCT

/** 
  * @brief External Interrupt/Event Controller
  */

STRUCTDEF EXTI
  __IO uint32_t IMR;
  __IO uint32_t EMR;
  __IO uint32_t RTSR;
  __IO uint32_t FTSR;
  __IO uint32_t SWIER;
  __IO uint32_t PR;
ENDSTRUCT

/** 
  * @brief FLASH Registers
  */

STRUCTDEF FLASH
  __IO uint32_t ACR;
  __IO uint32_t KEYR;
  __IO uint32_t OPTKEYR;
  __IO uint32_t SR;
  __IO uint32_t CR;
  __IO uint32_t AR;
  __IO uint32_t RESERVED;
  __IO uint32_t OBR;
  __IO uint32_t WRPR;
ENDSTRUCT

/** 
  * @brief Option Bytes Registers
  */
  
STRUCTDEF OB
  __IO uint16_t RDP;
  __IO uint16_t USER;
  __IO uint16_t Data0;
  __IO uint16_t Data1;
  __IO uint16_t WRP0;
  __IO uint16_t WRP1;
  __IO uint16_t WRP2;
  __IO uint16_t WRP3;
ENDSTRUCT

/** 
  * @brief Flexible Static Memory Controller
  */

STRUCTDEF FSMC_Bank1
  __IO uint32_ta BTCR, 8
ENDSTRUCT

/** 
  * @brief Flexible Static Memory Controller Bank1E
  */
  
STRUCTDEF FSMC_Bank1E
  __IO uint32_ta BWTR, 7
ENDSTRUCT

/** 
  * @brief Flexible Static Memory Controller Bank2
  */
  
STRUCTDEF FSMC_Bank2
  __IO uint32_t PCR2;
  __IO uint32_t SR2;
  __IO uint32_t PMEM2;
  __IO uint32_t PATT2;
  uint32_t  RESERVED0;   
  __IO uint32_t ECCR2; 
ENDSTRUCT

/** 
  * @brief Flexible Static Memory Controller Bank3
  */
  
STRUCTDEF FSMC_Bank3
  __IO uint32_t PCR3;
  __IO uint32_t SR3;
  __IO uint32_t PMEM3;
  __IO uint32_t PATT3;
  uint32_t  RESERVED0;   
  __IO uint32_t ECCR3; 
ENDSTRUCT

/** 
  * @brief Flexible Static Memory Controller Bank4
  */
  
STRUCTDEF FSMC_Bank4
  __IO uint32_t PCR4;
  __IO uint32_t SR4;
  __IO uint32_t PMEM4;
  __IO uint32_t PATT4;
  __IO uint32_t PIO4; 
ENDSTRUCT

/** 
  * @brief General Purpose I/O
  */

STRUCTDEF GPIO
  __IO uint32_t CRL;
  __IO uint32_t CRH;
  __IO uint32_t IDR;
  __IO uint32_t ODR;
  __IO uint32_t BSRR;
  __IO uint32_t BRR;
  __IO uint32_t LCKR;
ENDSTRUCT

/** 
  * @brief Alternate Function I/O
  */

STRUCTDEF AFIO
  __IO uint32_t EVCR;
  __IO uint32_t MAPR;
  uint32_ta EXTICR, 4
  uint32_t RESERVED0;
  __IO uint32_t MAPR2;  
ENDSTRUCT

/** 
  * @brief Inter Integrated Circuit Interface
  */

STRUCTDEF I2C
  __IO uint16_t CR1;
  uint16_t  RESERVED0;
  __IO uint16_t CR2;
  uint16_t  RESERVED1;
  __IO uint16_t OAR1;
  uint16_t  RESERVED2;
  __IO uint16_t OAR2;
  uint16_t  RESERVED3;
  __IO uint16_t DR;
  uint16_t  RESERVED4;
  __IO uint16_t SR1;
  uint16_t  RESERVED5;
  __IO uint16_t SR2;
  uint16_t  RESERVED6;
  __IO uint16_t CCR;
  uint16_t  RESERVED7;
  __IO uint16_t TRISE;
  uint16_t  RESERVED8;
ENDSTRUCT

/** 
  * @brief Independent WATCHDOG
  */

STRUCTDEF IWDG
  __IO uint32_t KR;
  __IO uint32_t PR;
  __IO uint32_t RLR;
  __IO uint32_t SR;
ENDSTRUCT

/** 
  * @brief Power Control
  */

STRUCTDEF PWR
  __IO uint32_t CR;
  __IO uint32_t CSR;
ENDSTRUCT

/** 
  * @brief Reset and Clock Control
  */

STRUCTDEF RCC
  __IO uint32_t CR;
  __IO uint32_t CFGR;
  __IO uint32_t CIR;
  __IO uint32_t APB2RSTR;
  __IO uint32_t APB1RSTR;
  __IO uint32_t AHBENR;
  __IO uint32_t APB2ENR;
  __IO uint32_t APB1ENR;
  __IO uint32_t BDCR;
  __IO uint32_t CSR;

ENDSTRUCT

/** 
  * @brief Real-Time Clock
  */

STRUCTDEF RTC
  __IO uint16_t CRH;
  uint16_t  RESERVED0;
  __IO uint16_t CRL;
  uint16_t  RESERVED1;
  __IO uint16_t PRLH;
  uint16_t  RESERVED2;
  __IO uint16_t PRLL;
  uint16_t  RESERVED3;
  __IO uint16_t DIVH;
  uint16_t  RESERVED4;
  __IO uint16_t DIVL;
  uint16_t  RESERVED5;
  __IO uint16_t CNTH;
  uint16_t  RESERVED6;
  __IO uint16_t CNTL;
  uint16_t  RESERVED7;
  __IO uint16_t ALRH;
  uint16_t  RESERVED8;
  __IO uint16_t ALRL;
  uint16_t  RESERVED9;
ENDSTRUCT

/** 
  * @brief SD host Interface
  */

STRUCTDEF SDIO
  __IO uint32_t POWER;
  __IO uint32_t CLKCR;
  __IO uint32_t ARG;
  __IO uint32_t CMD;
  __I uint32_t RESPCMD;
  __I uint32_t RESP1;
  __I uint32_t RESP2;
  __I uint32_t RESP3;
  __I uint32_t RESP4;
  __IO uint32_t DTIMER;
  __IO uint32_t DLEN;
  __IO uint32_t DCTRL;
  __I uint32_t DCOUNT;
  __I uint32_t STA;
  __IO uint32_t ICR;
  __IO uint32_t MASK;
  uint32_ta  RESERVED0, 2
  __I uint32_t FIFOCNT;
  uint32_ta  RESERVED1, 13
  __IO uint32_t FIFO;
ENDSTRUCT

/** 
  * @brief Serial Peripheral Interface
  */

STRUCTDEF SPI
  __IO uint16_t CR1;
  uint16_t  RESERVED0;
  __IO uint16_t CR2;
  uint16_t  RESERVED1;
  __IO uint16_t SR;
  uint16_t  RESERVED2;
  __IO uint16_t DR;
  uint16_t  RESERVED3;
  __IO uint16_t CRCPR;
  uint16_t  RESERVED4;
  __IO uint16_t RXCRCR;
  uint16_t  RESERVED5;
  __IO uint16_t TXCRCR;
  uint16_t  RESERVED6;
  __IO uint16_t I2SCFGR;
  uint16_t  RESERVED7;
  __IO uint16_t I2SPR;
  uint16_t  RESERVED8;  
ENDSTRUCT

/** 
  * @brief TIM
  */

STRUCTDEF TIM
  __IO uint16_t CR1;
  uint16_t  RESERVED0;
  __IO uint16_t CR2;
  uint16_t  RESERVED1;
  __IO uint16_t SMCR;
  uint16_t  RESERVED2;
  __IO uint16_t DIER;
  uint16_t  RESERVED3;
  __IO uint16_t SR;
  uint16_t  RESERVED4;
  __IO uint16_t EGR;
  uint16_t  RESERVED5;
  __IO uint16_t CCMR1;
  uint16_t  RESERVED6;
  __IO uint16_t CCMR2;
  uint16_t  RESERVED7;
  __IO uint16_t CCER;
  uint16_t  RESERVED8;
  __IO uint16_t CNT;
  uint16_t  RESERVED9;
  __IO uint16_t PSC;
  uint16_t  RESERVED10;
  __IO uint16_t ARR;
  uint16_t  RESERVED11;
  __IO uint16_t RCR;
  uint16_t  RESERVED12;
  __IO uint16_t CCR1;
  uint16_t  RESERVED13;
  __IO uint16_t CCR2;
  uint16_t  RESERVED14;
  __IO uint16_t CCR3;
  uint16_t  RESERVED15;
  __IO uint16_t CCR4;
  uint16_t  RESERVED16;
  __IO uint16_t BDTR;
  uint16_t  RESERVED17;
  __IO uint16_t DCR;
  uint16_t  RESERVED18;
  __IO uint16_t DMAR;
  uint16_t  RESERVED19;
ENDSTRUCT

/** 
  * @brief Universal Synchronous Asynchronous Receiver Transmitter
  */
 
STRUCTDEF USART
  __IO uint16_t SR;
  uint16_t  RESERVED0;
  __IO uint16_t DR;
  uint16_t  RESERVED1;
  __IO uint16_t BRR;
  uint16_t  RESERVED2;
  __IO uint16_t CR1;
  uint16_t  RESERVED3;
  __IO uint16_t CR2;
  uint16_t  RESERVED4;
  __IO uint16_t CR3;
  uint16_t  RESERVED5;
  __IO uint16_t GTPR;
  uint16_t  RESERVED6;
ENDSTRUCT

/** 
  * @brief Window WATCHDOG
  */

STRUCTDEF WWDG
  __IO uint32_t CR;
  __IO uint32_t CFR;
  __IO uint32_t SR;
ENDSTRUCT

/** @addtogroup Peripheral_memory_map
  * @{
  */


 .equiv FLASH_BASE,            (0x08000000) /*!< FLASH base address in the alias region */
 .equiv SRAM_BASE,             (0x20000000) /*!< SRAM base address in the alias region */
 .equiv PERIPH_BASE,           (0x40000000) /*!< Peripheral base address in the alias region */

 .equiv SRAM_BB_BASE,          (0x22000000) /*!< SRAM base address in the bit-band region */
 .equiv PERIPH_BB_BASE,        (0x42000000) /*!< Peripheral base address in the bit-band region */

 .equiv FSMC_R_BASE,           (0xA0000000) /*!< FSMC registers base address */

/*!< Peripheral memory map */
 .equiv APB1PERIPH_BASE,       PERIPH_BASE
 .equiv APB2PERIPH_BASE,       (PERIPH_BASE + 0x10000)
 .equiv AHBPERIPH_BASE,        (PERIPH_BASE + 0x20000)

 .equiv TIM2_BASE,             (APB1PERIPH_BASE + 0x0000)
 .equiv TIM3_BASE,             (APB1PERIPH_BASE + 0x0400)
 .equiv TIM4_BASE,             (APB1PERIPH_BASE + 0x0800)
 .equiv TIM5_BASE,             (APB1PERIPH_BASE + 0x0C00)
 .equiv TIM6_BASE,             (APB1PERIPH_BASE + 0x1000)
 .equiv TIM7_BASE,             (APB1PERIPH_BASE + 0x1400)
 .equiv TIM12_BASE,            (APB1PERIPH_BASE + 0x1800)
 .equiv TIM13_BASE,            (APB1PERIPH_BASE + 0x1C00)
 .equiv TIM14_BASE,            (APB1PERIPH_BASE + 0x2000)
 .equiv RTC_BASE,              (APB1PERIPH_BASE + 0x2800)
 .equiv WWDG_BASE,             (APB1PERIPH_BASE + 0x2C00)
 .equiv IWDG_BASE,             (APB1PERIPH_BASE + 0x3000)
 .equiv SPI2_BASE,             (APB1PERIPH_BASE + 0x3800)
 .equiv SPI3_BASE,             (APB1PERIPH_BASE + 0x3C00)
 .equiv USART2_BASE,           (APB1PERIPH_BASE + 0x4400)
 .equiv USART3_BASE,           (APB1PERIPH_BASE + 0x4800)
 .equiv UART4_BASE,            (APB1PERIPH_BASE + 0x4C00)
 .equiv UART5_BASE,            (APB1PERIPH_BASE + 0x5000)
 .equiv I2C1_BASE,             (APB1PERIPH_BASE + 0x5400)
 .equiv I2C2_BASE,             (APB1PERIPH_BASE + 0x5800)
 .equiv CAN1_BASE,             (APB1PERIPH_BASE + 0x6400)
 .equiv CAN2_BASE,             (APB1PERIPH_BASE + 0x6800)
 .equiv BKP_BASE,              (APB1PERIPH_BASE + 0x6C00)
 .equiv PWR_BASE,              (APB1PERIPH_BASE + 0x7000)
 .equiv DAC_BASE,              (APB1PERIPH_BASE + 0x7400)
 .equiv CEC_BASE,              (APB1PERIPH_BASE + 0x7800)

 .equiv AFIO_BASE,             (APB2PERIPH_BASE + 0x0000)
 .equiv EXTI_BASE,             (APB2PERIPH_BASE + 0x0400)
 .equiv GPIOA_BASE,            (APB2PERIPH_BASE + 0x0800)
 .equiv GPIOB_BASE,            (APB2PERIPH_BASE + 0x0C00)
 .equiv GPIOC_BASE,            (APB2PERIPH_BASE + 0x1000)
 .equiv GPIOD_BASE,            (APB2PERIPH_BASE + 0x1400)
 .equiv GPIOE_BASE,            (APB2PERIPH_BASE + 0x1800)
 .equiv GPIOF_BASE,            (APB2PERIPH_BASE + 0x1C00)
 .equiv GPIOG_BASE,            (APB2PERIPH_BASE + 0x2000)
 .equiv ADC1_BASE,             (APB2PERIPH_BASE + 0x2400)
 .equiv ADC2_BASE,             (APB2PERIPH_BASE + 0x2800)
 .equiv TIM1_BASE,             (APB2PERIPH_BASE + 0x2C00)
 .equiv SPI1_BASE,             (APB2PERIPH_BASE + 0x3000)
 .equiv TIM8_BASE,             (APB2PERIPH_BASE + 0x3400)
 .equiv USART1_BASE,           (APB2PERIPH_BASE + 0x3800)
 .equiv ADC3_BASE,             (APB2PERIPH_BASE + 0x3C00)
 .equiv TIM15_BASE,            (APB2PERIPH_BASE + 0x4000)
 .equiv TIM16_BASE,            (APB2PERIPH_BASE + 0x4400)
 .equiv TIM17_BASE,            (APB2PERIPH_BASE + 0x4800)
 .equiv TIM9_BASE,             (APB2PERIPH_BASE + 0x4C00)
 .equiv TIM10_BASE,            (APB2PERIPH_BASE + 0x5000)
 .equiv TIM11_BASE,            (APB2PERIPH_BASE + 0x5400)

 .equiv SDIO_BASE,             (PERIPH_BASE + 0x18000)

 .equiv DMA1_BASE,             (AHBPERIPH_BASE + 0x0000)
 .equiv DMA1_Channel1_BASE,    (AHBPERIPH_BASE + 0x0008)
 .equiv DMA1_Channel2_BASE,    (AHBPERIPH_BASE + 0x001C)
 .equiv DMA1_Channel3_BASE,    (AHBPERIPH_BASE + 0x0030)
 .equiv DMA1_Channel4_BASE,    (AHBPERIPH_BASE + 0x0044)
 .equiv DMA1_Channel5_BASE,    (AHBPERIPH_BASE + 0x0058)
 .equiv DMA1_Channel6_BASE,    (AHBPERIPH_BASE + 0x006C)
 .equiv DMA1_Channel7_BASE,    (AHBPERIPH_BASE + 0x0080)
 .equiv DMA2_BASE,             (AHBPERIPH_BASE + 0x0400)
 .equiv DMA2_Channel1_BASE,    (AHBPERIPH_BASE + 0x0408)
 .equiv DMA2_Channel2_BASE,    (AHBPERIPH_BASE + 0x041C)
 .equiv DMA2_Channel3_BASE,    (AHBPERIPH_BASE + 0x0430)
 .equiv DMA2_Channel4_BASE,    (AHBPERIPH_BASE + 0x0444)
 .equiv DMA2_Channel5_BASE,    (AHBPERIPH_BASE + 0x0458)
 .equiv RCC_BASE,              (AHBPERIPH_BASE + 0x1000)

.if 0
   .equiv RCC_CR, (RCC_BASE+0)
   .equiv RCC_CFGR, (RCC_BASE+4)
   .equiv RCC_CIR, (RCC_BASE+8)
   .equiv RCC_APB2RSTR, (RCC_BASE+12)
   .equiv RCC_APB1RSTR, (RCC_BASE+16)
   .equiv RCC_AHBENR, (RCC_BASE+20)
   .equiv RCC_APB2ENR, (RCC_BASE+24)
   .equiv RCC_APB1ENR, (RCC_BASE+28)
   .equiv RCC_BDCR, (RCC_BASE+32)
   .equiv RCC_CSR, (RCC_BASE+36)
.endif

 .equiv CRC_BASE,              (AHBPERIPH_BASE + 0x3000)

 .equiv FLASH_R_BASE,          (AHBPERIPH_BASE + 0x2000) /*!< Flash registers base address */
 .equiv OB_BASE,               (0x1FFFF800)    /*!< Flash Option Bytes base address */

 .equiv ETH_BASE,              (AHBPERIPH_BASE + 0x8000)
 .equiv ETH_MAC_BASE,          (ETH_BASE)
 .equiv ETH_MMC_BASE,          (ETH_BASE + 0x0100)
 .equiv ETH_PTP_BASE,          (ETH_BASE + 0x0700)
 .equiv ETH_DMA_BASE,          (ETH_BASE + 0x1000)

 .equiv FSMC_Bank1_R_BASE,     (FSMC_R_BASE + 0x0000) /*!< FSMC Bank1 registers base address */
 .equiv FSMC_Bank1E_R_BASE,    (FSMC_R_BASE + 0x0104) /*!< FSMC Bank1E registers base address */
 .equiv FSMC_Bank2_R_BASE,     (FSMC_R_BASE + 0x0060) /*!< FSMC Bank2 registers base address */
 .equiv FSMC_Bank3_R_BASE,     (FSMC_R_BASE + 0x0080) /*!< FSMC Bank3 registers base address */
 .equiv FSMC_Bank4_R_BASE,     (FSMC_R_BASE + 0x00A0) /*!< FSMC Bank4 registers base address */

 .equiv DBGMCU_BASE,          (0xE0042000) /*!< Debug MCU registers base address */

/**
  * @}
  */

/** @addtogroup Exported_constants
  * @{
  */
  
  /** @addtogroup Peripheral_Registers_Bits_Definition
  * @{
  */
    
/******************************************************************************/
/*                         Peripheral Registers_Bits_Definition               */
/******************************************************************************/

/******************************************************************************/
/*                                                                            */
/*                          CRC calculation unit                              */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for CRC_DR register  *********************/
 .equiv CRC_DR_DR,                           (0xFFFFFFFF) /*!< Data register bits */


/*******************  Bit definition for CRC_IDR register  ********************/
 .equiv CRC_IDR_IDR,                         (0xFF)        /*!< General-purpose 8-bit data register bits */


/********************  Bit definition for CRC_CR register  ********************/
 .equiv CRC_CR_RESET,                        (0x01)        /*!< RESET bit */

/******************************************************************************/
/*                                                                            */
/*                             Power Control                                  */
/*                                                                            */
/******************************************************************************/

/********************  Bit definition for PWR_CR register  ********************/
 .equiv PWR_CR_LPDS,                         (0x0001)     /*!< Low-Power Deepsleep */
 .equiv PWR_CR_PDDS,                         (0x0002)     /*!< Power Down Deepsleep */
 .equiv PWR_CR_CWUF,                         (0x0004)     /*!< Clear Wakeup Flag */
 .equiv PWR_CR_CSBF,                         (0x0008)     /*!< Clear Standby Flag */
 .equiv PWR_CR_PVDE,                         (0x0010)     /*!< Power Voltage Detector Enable */

 .equiv PWR_CR_PLS,                          (0x00E0)     /*!< PLS[2:0] bits (PVD Level Selection) */
 .equiv PWR_CR_PLS_0,                        (0x0020)     /*!< Bit 0 */
 .equiv PWR_CR_PLS_1,                        (0x0040)     /*!< Bit 1 */
 .equiv PWR_CR_PLS_2,                        (0x0080)     /*!< Bit 2 */

/*!< PVD level configuration */
 .equiv PWR_CR_PLS_2V2,                      (0x0000)     /*!< PVD level 2.2V */
 .equiv PWR_CR_PLS_2V3,                      (0x0020)     /*!< PVD level 2.3V */
 .equiv PWR_CR_PLS_2V4,                      (0x0040)     /*!< PVD level 2.4V */
 .equiv PWR_CR_PLS_2V5,                      (0x0060)     /*!< PVD level 2.5V */
 .equiv PWR_CR_PLS_2V6,                      (0x0080)     /*!< PVD level 2.6V */
 .equiv PWR_CR_PLS_2V7,                      (0x00A0)     /*!< PVD level 2.7V */
 .equiv PWR_CR_PLS_2V8,                      (0x00C0)     /*!< PVD level 2.8V */
 .equiv PWR_CR_PLS_2V9,                      (0x00E0)     /*!< PVD level 2.9V */

 .equiv PWR_CR_DBP,                          (0x0100)     /*!< Disable Backup Domain write protection */


/*******************  Bit definition for PWR_CSR register  ********************/
 .equiv PWR_CSR_WUF,                         (0x0001)     /*!< Wakeup Flag */
 .equiv PWR_CSR_SBF,                         (0x0002)     /*!< Standby Flag */
 .equiv PWR_CSR_PVDO,                        (0x0004)     /*!< PVD Output */
 .equiv PWR_CSR_EWUP,                        (0x0100)     /*!< Enable WKUP pin */

/******************************************************************************/
/*                                                                            */
/*                            Backup registers                                */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for BKP_DR1 register  ********************/
 .equiv BKP_DR1_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR2 register  ********************/
 .equiv BKP_DR2_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR3 register  ********************/
 .equiv BKP_DR3_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR4 register  ********************/
 .equiv BKP_DR4_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR5 register  ********************/
 .equiv BKP_DR5_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR6 register  ********************/
 .equiv BKP_DR6_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR7 register  ********************/
 .equiv BKP_DR7_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR8 register  ********************/
 .equiv BKP_DR8_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR9 register  ********************/
 .equiv BKP_DR9_D,                           (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR10 register  *******************/
 .equiv BKP_DR10_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR11 register  *******************/
 .equiv BKP_DR11_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR12 register  *******************/
 .equiv BKP_DR12_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR13 register  *******************/
 .equiv BKP_DR13_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR14 register  *******************/
 .equiv BKP_DR14_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR15 register  *******************/
 .equiv BKP_DR15_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR16 register  *******************/
 .equiv BKP_DR16_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR17 register  *******************/
 .equiv BKP_DR17_D,                          (0xFFFF)     /*!< Backup data */

/******************  Bit definition for BKP_DR18 register  ********************/
 .equiv BKP_DR18_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR19 register  *******************/
 .equiv BKP_DR19_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR20 register  *******************/
 .equiv BKP_DR20_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR21 register  *******************/
 .equiv BKP_DR21_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR22 register  *******************/
 .equiv BKP_DR22_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR23 register  *******************/
 .equiv BKP_DR23_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR24 register  *******************/
 .equiv BKP_DR24_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR25 register  *******************/
 .equiv BKP_DR25_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR26 register  *******************/
 .equiv BKP_DR26_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR27 register  *******************/
 .equiv BKP_DR27_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR28 register  *******************/
 .equiv BKP_DR28_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR29 register  *******************/
 .equiv BKP_DR29_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR30 register  *******************/
 .equiv BKP_DR30_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR31 register  *******************/
 .equiv BKP_DR31_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR32 register  *******************/
 .equiv BKP_DR32_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR33 register  *******************/
 .equiv BKP_DR33_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR34 register  *******************/
 .equiv BKP_DR34_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR35 register  *******************/
 .equiv BKP_DR35_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR36 register  *******************/
 .equiv BKP_DR36_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR37 register  *******************/
 .equiv BKP_DR37_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR38 register  *******************/
 .equiv BKP_DR38_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR39 register  *******************/
 .equiv BKP_DR39_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR40 register  *******************/
 .equiv BKP_DR40_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR41 register  *******************/
 .equiv BKP_DR41_D,                          (0xFFFF)     /*!< Backup data */

/*******************  Bit definition for BKP_DR42 register  *******************/
 .equiv BKP_DR42_D,                          (0xFFFF)     /*!< Backup data */

/******************  Bit definition for BKP_RTCCR register  *******************/
 .equiv BKP_RTCCR_CAL,                       (0x007F)     /*!< Calibration value */
 .equiv BKP_RTCCR_CCO,                       (0x0080)     /*!< Calibration Clock Output */
 .equiv BKP_RTCCR_ASOE,                      (0x0100)     /*!< Alarm or Second Output Enable */
 .equiv BKP_RTCCR_ASOS,                      (0x0200)     /*!< Alarm or Second Output Selection */

/********************  Bit definition for BKP_CR register  ********************/
 .equiv BKP_CR_TPE,                          (0x01)        /*!< TAMPER pin enable */
 .equiv BKP_CR_TPAL,                         (0x02)        /*!< TAMPER pin active level */

/*******************  Bit definition for BKP_CSR register  ********************/
 .equiv BKP_CSR_CTE,                         (0x0001)     /*!< Clear Tamper event */
 .equiv BKP_CSR_CTI,                         (0x0002)     /*!< Clear Tamper Interrupt */
 .equiv BKP_CSR_TPIE,                        (0x0004)     /*!< TAMPER Pin interrupt enable */
 .equiv BKP_CSR_TEF,                         (0x0100)     /*!< Tamper Event Flag */
 .equiv BKP_CSR_TIF,                         (0x0200)     /*!< Tamper Interrupt Flag */

/******************************************************************************/
/*                                                                            */
/*                         Reset and Clock Control                            */
/*                                                                            */
/******************************************************************************/

/********************  Bit definition for RCC_CR register  ********************/
 .equiv RCC_CR_HSION,                        (0x00000001)        /*!< Internal High Speed clock enable */
 .equiv RCC_CR_HSIRDY,                       (0x00000002)        /*!< Internal High Speed clock ready flag */
 .equiv RCC_CR_HSITRIM,                      (0x000000F8)        /*!< Internal High Speed clock trimming */
 .equiv RCC_CR_HSICAL,                       (0x0000FF00)        /*!< Internal High Speed clock Calibration */
 .equiv RCC_CR_HSEON,                        (0x00010000)        /*!< External High Speed clock enable */
 .equiv RCC_CR_HSERDY,                       (0x00020000)        /*!< External High Speed clock ready flag */
 .equiv RCC_CR_HSEBYP,                       (0x00040000)        /*!< External High Speed clock Bypass */
 .equiv RCC_CR_CSSON,                        (0x00080000)        /*!< Clock Security System enable */
 .equiv RCC_CR_PLLON,                        (0x01000000)        /*!< PLL enable */
 .equiv RCC_CR_PLLRDY,                       (0x02000000)        /*!< PLL clock ready flag */


/*******************  Bit definition for RCC_CFGR register  *******************/
/*!< SW configuration */
 .equiv RCC_CFGR_SW,                         (0x00000003)        /*!< SW[1:0] bits (System clock Switch) */
 .equiv RCC_CFGR_SW_0,                       (0x00000001)        /*!< Bit 0 */
 .equiv RCC_CFGR_SW_1,                       (0x00000002)        /*!< Bit 1 */

 .equiv RCC_CFGR_SW_HSI,                     (0x00000000)        /*!< HSI selected as system clock */
 .equiv RCC_CFGR_SW_HSE,                     (0x00000001)        /*!< HSE selected as system clock */
 .equiv RCC_CFGR_SW_PLL,                     (0x00000002)        /*!< PLL selected as system clock */

/*!< SWS configuration */
 .equiv RCC_CFGR_SWS,                        (0x0000000C)        /*!< SWS[1:0] bits (System Clock Switch Status) */
 .equiv RCC_CFGR_SWS_0,                      (0x00000004)        /*!< Bit 0 */
 .equiv RCC_CFGR_SWS_1,                      (0x00000008)        /*!< Bit 1 */

 .equiv RCC_CFGR_SWS_HSI,                    (0x00000000)        /*!< HSI oscillator used as system clock */
 .equiv RCC_CFGR_SWS_HSE,                    (0x00000004)        /*!< HSE oscillator used as system clock */
 .equiv RCC_CFGR_SWS_PLL,                    (0x00000008)        /*!< PLL used as system clock */

/*!< HPRE configuration */
 .equiv RCC_CFGR_HPRE,                       (0x000000F0)        /*!< HPRE[3:0] bits (AHB prescaler) */
 .equiv RCC_CFGR_HPRE_0,                     (0x00000010)        /*!< Bit 0 */
 .equiv RCC_CFGR_HPRE_1,                     (0x00000020)        /*!< Bit 1 */
 .equiv RCC_CFGR_HPRE_2,                     (0x00000040)        /*!< Bit 2 */
 .equiv RCC_CFGR_HPRE_3,                     (0x00000080)        /*!< Bit 3 */

 .equiv RCC_CFGR_HPRE_DIV1,                  (0x00000000)        /*!< SYSCLK not divided */
 .equiv RCC_CFGR_HPRE_DIV2,                  (0x00000080)        /*!< SYSCLK divided by 2 */
 .equiv RCC_CFGR_HPRE_DIV4,                  (0x00000090)        /*!< SYSCLK divided by 4 */
 .equiv RCC_CFGR_HPRE_DIV8,                  (0x000000A0)        /*!< SYSCLK divided by 8 */
 .equiv RCC_CFGR_HPRE_DIV16,                 (0x000000B0)        /*!< SYSCLK divided by 16 */
 .equiv RCC_CFGR_HPRE_DIV64,                 (0x000000C0)        /*!< SYSCLK divided by 64 */
 .equiv RCC_CFGR_HPRE_DIV128,                (0x000000D0)        /*!< SYSCLK divided by 128 */
 .equiv RCC_CFGR_HPRE_DIV256,                (0x000000E0)        /*!< SYSCLK divided by 256 */
 .equiv RCC_CFGR_HPRE_DIV512,                (0x000000F0)        /*!< SYSCLK divided by 512 */

/*!< PPRE1 configuration */
 .equiv RCC_CFGR_PPRE1,                      (0x00000700)        /*!< PRE1[2:0] bits (APB1 prescaler) */
 .equiv RCC_CFGR_PPRE1_0,                    (0x00000100)        /*!< Bit 0 */
 .equiv RCC_CFGR_PPRE1_1,                    (0x00000200)        /*!< Bit 1 */
 .equiv RCC_CFGR_PPRE1_2,                    (0x00000400)        /*!< Bit 2 */

 .equiv RCC_CFGR_PPRE1_DIV1,                 (0x00000000)        /*!< HCLK not divided */
 .equiv RCC_CFGR_PPRE1_DIV2,                 (0x00000400)        /*!< HCLK divided by 2 */
 .equiv RCC_CFGR_PPRE1_DIV4,                 (0x00000500)        /*!< HCLK divided by 4 */
 .equiv RCC_CFGR_PPRE1_DIV8,                 (0x00000600)        /*!< HCLK divided by 8 */
 .equiv RCC_CFGR_PPRE1_DIV16,                (0x00000700)        /*!< HCLK divided by 16 */

/*!< PPRE2 configuration */
 .equiv RCC_CFGR_PPRE2,                      (0x00003800)        /*!< PRE2[2:0] bits (APB2 prescaler) */
 .equiv RCC_CFGR_PPRE2_0,                    (0x00000800)        /*!< Bit 0 */
 .equiv RCC_CFGR_PPRE2_1,                    (0x00001000)        /*!< Bit 1 */
 .equiv RCC_CFGR_PPRE2_2,                    (0x00002000)        /*!< Bit 2 */

 .equiv RCC_CFGR_PPRE2_DIV1,                 (0x00000000)        /*!< HCLK not divided */
 .equiv RCC_CFGR_PPRE2_DIV2,                 (0x00002000)        /*!< HCLK divided by 2 */
 .equiv RCC_CFGR_PPRE2_DIV4,                 (0x00002800)        /*!< HCLK divided by 4 */
 .equiv RCC_CFGR_PPRE2_DIV8,                 (0x00003000)        /*!< HCLK divided by 8 */
 .equiv RCC_CFGR_PPRE2_DIV16,                (0x00003800)        /*!< HCLK divided by 16 */

/*!< ADCPPRE configuration */
 .equiv RCC_CFGR_ADCPRE,                     (0x0000C000)        /*!< ADCPRE[1:0] bits (ADC prescaler) */
 .equiv RCC_CFGR_ADCPRE_0,                   (0x00004000)        /*!< Bit 0 */
 .equiv RCC_CFGR_ADCPRE_1,                   (0x00008000)        /*!< Bit 1 */

 .equiv RCC_CFGR_ADCPRE_DIV2,                (0x00000000)        /*!< PCLK2 divided by 2 */
 .equiv RCC_CFGR_ADCPRE_DIV4,                (0x00004000)        /*!< PCLK2 divided by 4 */
 .equiv RCC_CFGR_ADCPRE_DIV6,                (0x00008000)        /*!< PCLK2 divided by 6 */
 .equiv RCC_CFGR_ADCPRE_DIV8,                (0x0000C000)        /*!< PCLK2 divided by 8 */

 .equiv RCC_CFGR_PLLSRC,                     (0x00010000)        /*!< PLL entry clock source */

 .equiv RCC_CFGR_PLLXTPRE,                   (0x00020000)        /*!< HSE divider for PLL entry */

/*!< PLLMUL configuration */
 .equiv RCC_CFGR_PLLMULL,                    (0x003C0000)        /*!< PLLMUL[3:0] bits (PLL multiplication factor) */
 .equiv RCC_CFGR_PLLMULL_0,                  (0x00040000)        /*!< Bit 0 */
 .equiv RCC_CFGR_PLLMULL_1,                  (0x00080000)        /*!< Bit 1 */
 .equiv RCC_CFGR_PLLMULL_2,                  (0x00100000)        /*!< Bit 2 */
 .equiv RCC_CFGR_PLLMULL_3,                  (0x00200000)        /*!< Bit 3 */

  .equiv RCC_CFGR_PLLSRC_HSI_Div2,           (0x00000000)        /*!< HSI clock divided by 2 selected as PLL entry clock source */
  .equiv RCC_CFGR_PLLSRC_HSE,                (0x00010000)        /*!< HSE clock selected as PLL entry clock source */

  .equiv RCC_CFGR_PLLXTPRE_HSE,              (0x00000000)        /*!< HSE clock not divided for PLL entry */
  .equiv RCC_CFGR_PLLXTPRE_HSE_Div2,         (0x00020000)        /*!< HSE clock divided by 2 for PLL entry */

  .equiv RCC_CFGR_PLLMULL2,                  (0x00000000)        /*!< PLL input clock*2 */
  .equiv RCC_CFGR_PLLMULL3,                  (0x00040000)        /*!< PLL input clock*3 */
  .equiv RCC_CFGR_PLLMULL4,                  (0x00080000)        /*!< PLL input clock*4 */
  .equiv RCC_CFGR_PLLMULL5,                  (0x000C0000)        /*!< PLL input clock*5 */
  .equiv RCC_CFGR_PLLMULL6,                  (0x00100000)        /*!< PLL input clock*6 */
  .equiv RCC_CFGR_PLLMULL7,                  (0x00140000)        /*!< PLL input clock*7 */
  .equiv RCC_CFGR_PLLMULL8,                  (0x00180000)        /*!< PLL input clock*8 */
  .equiv RCC_CFGR_PLLMULL9,                  (0x001C0000)        /*!< PLL input clock*9 */
  .equiv RCC_CFGR_PLLMULL10,                 (0x00200000)        /*!< PLL input clock10 */
  .equiv RCC_CFGR_PLLMULL11,                 (0x00240000)        /*!< PLL input clock*11 */
  .equiv RCC_CFGR_PLLMULL12,                 (0x00280000)        /*!< PLL input clock*12 */
  .equiv RCC_CFGR_PLLMULL13,                 (0x002C0000)        /*!< PLL input clock*13 */
  .equiv RCC_CFGR_PLLMULL14,                 (0x00300000)        /*!< PLL input clock*14 */
  .equiv RCC_CFGR_PLLMULL15,                 (0x00340000)        /*!< PLL input clock*15 */
  .equiv RCC_CFGR_PLLMULL16,                 (0x00380000)        /*!< PLL input clock*16 */
  .equiv RCC_CFGR_USBPRE,                    (0x00400000)        /*!< USB Device prescaler */

/*!< MCO configuration */
  .equiv RCC_CFGR_MCO,                       (0x07000000)        /*!< MCO[2:0] bits (Microcontroller Clock Output) */
  .equiv RCC_CFGR_MCO_0,                     (0x01000000)        /*!< Bit 0 */
  .equiv RCC_CFGR_MCO_1,                     (0x02000000)        /*!< Bit 1 */
  .equiv RCC_CFGR_MCO_2,                     (0x04000000)        /*!< Bit 2 */

  .equiv RCC_CFGR_MCO_NOCLOCK,               (0x00000000)        /*!< No clock */
  .equiv RCC_CFGR_MCO_SYSCLK,                (0x04000000)        /*!< System clock selected as MCO source */
  .equiv RCC_CFGR_MCO_HSI,                   (0x05000000)        /*!< HSI clock selected as MCO source */
  .equiv RCC_CFGR_MCO_HSE,                   (0x06000000)        /*!< HSE clock selected as MCO source  */
  .equiv RCC_CFGR_MCO_PLL,                   (0x07000000)        /*!< PLL clock divided by 2 selected as MCO source */

/*!<******************  Bit definition for RCC_CIR register  ********************/
 .equiv RCC_CIR_LSIRDYF,                     (0x00000001)        /*!< LSI Ready Interrupt flag */
 .equiv RCC_CIR_LSERDYF,                     (0x00000002)        /*!< LSE Ready Interrupt flag */
 .equiv RCC_CIR_HSIRDYF,                     (0x00000004)        /*!< HSI Ready Interrupt flag */
 .equiv RCC_CIR_HSERDYF,                     (0x00000008)        /*!< HSE Ready Interrupt flag */
 .equiv RCC_CIR_PLLRDYF,                     (0x00000010)        /*!< PLL Ready Interrupt flag */
 .equiv RCC_CIR_CSSF,                        (0x00000080)        /*!< Clock Security System Interrupt flag */
 .equiv RCC_CIR_LSIRDYIE,                    (0x00000100)        /*!< LSI Ready Interrupt Enable */
 .equiv RCC_CIR_LSERDYIE,                    (0x00000200)        /*!< LSE Ready Interrupt Enable */
 .equiv RCC_CIR_HSIRDYIE,                    (0x00000400)        /*!< HSI Ready Interrupt Enable */
 .equiv RCC_CIR_HSERDYIE,                    (0x00000800)        /*!< HSE Ready Interrupt Enable */
 .equiv RCC_CIR_PLLRDYIE,                    (0x00001000)        /*!< PLL Ready Interrupt Enable */
 .equiv RCC_CIR_LSIRDYC,                     (0x00010000)        /*!< LSI Ready Interrupt Clear */
 .equiv RCC_CIR_LSERDYC,                     (0x00020000)        /*!< LSE Ready Interrupt Clear */
 .equiv RCC_CIR_HSIRDYC,                     (0x00040000)        /*!< HSI Ready Interrupt Clear */
 .equiv RCC_CIR_HSERDYC,                     (0x00080000)        /*!< HSE Ready Interrupt Clear */
 .equiv RCC_CIR_PLLRDYC,                     (0x00100000)        /*!< PLL Ready Interrupt Clear */
 .equiv RCC_CIR_CSSC,                        (0x00800000)        /*!< Clock Security System Interrupt Clear */

/*****************  Bit definition for RCC_APB2RSTR register  *****************/
 .equiv RCC_APB2RSTR_AFIORST,                (0x00000001)        /*!< Alternate Function I/O reset */
 .equiv RCC_APB2RSTR_IOPARST,                (0x00000004)        /*!< I/O port A reset */
 .equiv RCC_APB2RSTR_IOPBRST,                (0x00000008)        /*!< I/O port B reset */
 .equiv RCC_APB2RSTR_IOPCRST,                (0x00000010)        /*!< I/O port C reset */
 .equiv RCC_APB2RSTR_IOPDRST,                (0x00000020)        /*!< I/O port D reset */
 .equiv RCC_APB2RSTR_ADC1RST,                (0x00000200)        /*!< ADC 1 interface reset */


 .equiv RCC_APB2RSTR_TIM1RST,                (0x00000800)        /*!< TIM1 Timer reset */
 .equiv RCC_APB2RSTR_SPI1RST,                (0x00001000)        /*!< SPI 1 reset */
 .equiv RCC_APB2RSTR_USART1RST,              (0x00004000)        /*!< USART1 reset */


/*****************  Bit definition for RCC_APB1RSTR register  *****************/
 .equiv RCC_APB1RSTR_TIM2RST,                (0x00000001)        /*!< Timer 2 reset */
 .equiv RCC_APB1RSTR_TIM3RST,                (0x00000002)        /*!< Timer 3 reset */
 .equiv RCC_APB1RSTR_WWDGRST,                (0x00000800)        /*!< Window Watchdog reset */
 .equiv RCC_APB1RSTR_USART2RST,              (0x00020000)        /*!< USART 2 reset */
 .equiv RCC_APB1RSTR_I2C1RST,                (0x00200000)        /*!< I2C 1 reset */


 .equiv RCC_APB1RSTR_BKPRST,                 (0x08000000)        /*!< Backup interface reset */
 .equiv RCC_APB1RSTR_PWRRST,                 (0x10000000)        /*!< Power interface reset */


 .equiv RCC_APB1RSTR_USBRST,                (0x00800000)        /*!< USB Device reset */


/******************  Bit definition for RCC_AHBENR register  ******************/
 .equiv RCC_AHBENR_DMA1EN,                   (0x0001)            /*!< DMA1 clock enable */
 .equiv RCC_AHBENR_SRAMEN,                   (0x0004)            /*!< SRAM interface clock enable */
 .equiv RCC_AHBENR_FLITFEN,                  (0x0010)            /*!< FLITF clock enable */
 .equiv RCC_AHBENR_CRCEN,                    (0x0040)            /*!< CRC clock enable */


/******************  Bit definition for RCC_APB2ENR register  *****************/
 .equiv RCC_APB2ENR_AFIOEN,                  (0x00000001)         /*!< Alternate Function I/O clock enable */
 .equiv RCC_APB2ENR_IOPAEN,                  (0x00000004)         /*!< I/O port A clock enable */
 .equiv RCC_APB2ENR_IOPBEN,                  (0x00000008)         /*!< I/O port B clock enable */
 .equiv RCC_APB2ENR_IOPCEN,                  (0x00000010)         /*!< I/O port C clock enable */
 .equiv RCC_APB2ENR_IOPDEN,                  (0x00000020)         /*!< I/O port D clock enable */
 .equiv RCC_APB2ENR_ADC1EN,                  (0x00000200)         /*!< ADC 1 interface clock enable */

 .equiv RCC_APB2ENR_TIM1EN,                  (0x00000800)         /*!< TIM1 Timer clock enable */
 .equiv RCC_APB2ENR_SPI1EN,                  (0x00001000)         /*!< SPI 1 clock enable */
 .equiv RCC_APB2ENR_USART1EN,                (0x00004000)         /*!< USART1 clock enable */


/*****************  Bit definition for RCC_APB1ENR register  ******************/
 .equiv RCC_APB1ENR_TIM2EN,                  (0x00000001)        /*!< Timer 2 clock enabled*/
 .equiv RCC_APB1ENR_TIM3EN,                  (0x00000002)        /*!< Timer 3 clock enable */
 .equiv RCC_APB1ENR_WWDGEN,                  (0x00000800)        /*!< Window Watchdog clock enable */
 .equiv RCC_APB1ENR_USART2EN,                (0x00020000)        /*!< USART 2 clock enable */
 .equiv RCC_APB1ENR_I2C1EN,                  (0x00200000)        /*!< I2C 1 clock enable */
 .equiv RCC_APB1ENR_BKPEN,                   (0x08000000)        /*!< Backup interface clock enable */
 .equiv RCC_APB1ENR_PWREN,                   (0x10000000)        /*!< Power interface clock enable */
 .equiv RCC_APB1ENR_USBEN,                  (0x00800000)        /*!< USB Device clock enable */

/*******************  Bit definition for RCC_BDCR register  *******************/
 .equiv RCC_BDCR_LSEON,                      (0x00000001)        /*!< External Low Speed oscillator enable */
 .equiv RCC_BDCR_LSERDY,                     (0x00000002)        /*!< External Low Speed oscillator Ready */
 .equiv RCC_BDCR_LSEBYP,                     (0x00000004)        /*!< External Low Speed oscillator Bypass */

 .equiv RCC_BDCR_RTCSEL,                     (0x00000300)        /*!< RTCSEL[1:0] bits (RTC clock source selection) */
 .equiv RCC_BDCR_RTCSEL_0,                   (0x00000100)        /*!< Bit 0 */
 .equiv RCC_BDCR_RTCSEL_1,                   (0x00000200)        /*!< Bit 1 */

/*!< RTC congiguration */
 .equiv RCC_BDCR_RTCSEL_NOCLOCK,             (0x00000000)        /*!< No clock */
 .equiv RCC_BDCR_RTCSEL_LSE,                 (0x00000100)        /*!< LSE oscillator clock used as RTC clock */
 .equiv RCC_BDCR_RTCSEL_LSI,                 (0x00000200)        /*!< LSI oscillator clock used as RTC clock */
 .equiv RCC_BDCR_RTCSEL_HSE,                 (0x00000300)        /*!< HSE oscillator clock divided by 128 used as RTC clock */

 .equiv RCC_BDCR_RTCEN,                      (0x00008000)        /*!< RTC clock enable */
 .equiv RCC_BDCR_BDRST,                      (0x00010000)        /*!< Backup domain software reset  */

/*******************  Bit definition for RCC_CSR register  ********************/  
 .equiv RCC_CSR_LSION,                       (0x00000001)        /*!< Internal Low Speed oscillator enable */
 .equiv RCC_CSR_LSIRDY,                      (0x00000002)        /*!< Internal Low Speed oscillator Ready */
 .equiv RCC_CSR_RMVF,                        (0x01000000)        /*!< Remove reset flag */
 .equiv RCC_CSR_PINRSTF,                     (0x04000000)        /*!< PIN reset flag */
 .equiv RCC_CSR_PORRSTF,                     (0x08000000)        /*!< POR/PDR reset flag */
 .equiv RCC_CSR_SFTRSTF,                     (0x10000000)        /*!< Software Reset flag */
 .equiv RCC_CSR_IWDGRSTF,                    (0x20000000)        /*!< Independent Watchdog reset flag */
 .equiv RCC_CSR_WWDGRSTF,                    (0x40000000)        /*!< Window watchdog reset flag */
 .equiv RCC_CSR_LPWRRSTF,                    (0x80000000)        /*!< Low-Power reset flag */

 
/******************************************************************************/
/*                                                                            */
/*                General Purpose and Alternate Function I/O                  */
/*                                                                            
/*******************  Bit definition for GPIO_CRL register  *******************/

/*
 * GPIO pin configuration is controlled by 4 bits per pin in the CRL and CRH,
 * The "Mode" bits and the "Config" bits.  The meaning of the Mode bits changes
 * depending on whether the pin is an input or output via config.
 * with these defines, a pin is configured with:
 * 	 (GPIO_MODE_xxx+GPIO_CNF_xxx) << (pin# * 4)  (CRL, bits 0-7)
 * 	 (GPIO_MODE_xxx+GPIO_CNF_xxx) << ((pin#-8) * 4)  (CRH, bits 8-15)
 */
 .equiv GPIO_CNF_ANALOG, 0	/* Input configs */
 .equiv GPIO_CNF_FLOAT, 4
 .equiv GPIO_CNF_PULL, 8
 .equiv GPIO_CNF_reserved, 0xC
 .equiv GPIO_CNF_PP, 0		/* Output configs */
 .equiv GPIO_CNF_OD, 4
 .equiv GPIO_CNF_AFPP, 8 
 .equiv GPIO_CNF_AFOD, 0xC
 
 .equiv GPIO_MODE_IN, 0
 .equiv GPIO_MODE_OUT, 1	/* Output 10MHz */
 .equiv GPIO_MODE_OUT10MHz, 1	/* Output 10MHz */
 .equiv GPIO_MODE_OUT2MHz, 2
 .equiv GPIO_MODE_OUT50MHz, 3


 .equiv GPIO_CRL_MODE,                       (0x33333333)        /*!< Port x mode bits */

 .equiv GPIO_CRL_MODE0,                      (0x00000003)        /*!< MODE0[1:0] bits (Port x mode bits, pin 0) */
 .equiv GPIO_CRL_MODE0_0,                    (0x00000001)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE0_1,                    (0x00000002)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE1,                      (0x00000030)        /*!< MODE1[1:0] bits (Port x mode bits, pin 1) */
 .equiv GPIO_CRL_MODE1_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE1_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE2,                      (0x00000300)        /*!< MODE2[1:0] bits (Port x mode bits, pin 2) */
 .equiv GPIO_CRL_MODE2_0,                    (0x00000100)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE2_1,                    (0x00000200)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE3,                      (0x00003000)        /*!< MODE3[1:0] bits (Port x mode bits, pin 3) */
 .equiv GPIO_CRL_MODE3_0,                    (0x00001000)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE3_1,                    (0x00002000)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE4,                      (0x00030000)        /*!< MODE4[1:0] bits (Port x mode bits, pin 4) */
 .equiv GPIO_CRL_MODE4_0,                    (0x00010000)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE4_1,                    (0x00020000)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE5,                      (0x00300000)        /*!< MODE5[1:0] bits (Port x mode bits, pin 5) */
 .equiv GPIO_CRL_MODE5_0,                    (0x00100000)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE5_1,                    (0x00200000)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE6,                      (0x03000000)        /*!< MODE6[1:0] bits (Port x mode bits, pin 6) */
 .equiv GPIO_CRL_MODE6_0,                    (0x01000000)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE6_1,                    (0x02000000)        /*!< Bit 1 */

 .equiv GPIO_CRL_MODE7,                      (0x30000000)        /*!< MODE7[1:0] bits (Port x mode bits, pin 7) */
 .equiv GPIO_CRL_MODE7_0,                    (0x10000000)        /*!< Bit 0 */
 .equiv GPIO_CRL_MODE7_1,                    (0x20000000)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF,                        (0xCCCCCCCC)        /*!< Port x configuration bits */

 .equiv GPIO_CRL_CNF0,                       (0x0000000C)        /*!< CNF0[1:0] bits (Port x configuration bits, pin 0) */
 .equiv GPIO_CRL_CNF0_0,                     (0x00000004)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF0_1,                     (0x00000008)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF1,                       (0x000000C0)        /*!< CNF1[1:0] bits (Port x configuration bits, pin 1) */
 .equiv GPIO_CRL_CNF1_0,                     (0x00000040)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF1_1,                     (0x00000080)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF2,                       (0x00000C00)        /*!< CNF2[1:0] bits (Port x configuration bits, pin 2) */
 .equiv GPIO_CRL_CNF2_0,                     (0x00000400)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF2_1,                     (0x00000800)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF3,                       (0x0000C000)        /*!< CNF3[1:0] bits (Port x configuration bits, pin 3) */
 .equiv GPIO_CRL_CNF3_0,                     (0x00004000)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF3_1,                     (0x00008000)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF4,                       (0x000C0000)        /*!< CNF4[1:0] bits (Port x configuration bits, pin 4) */
 .equiv GPIO_CRL_CNF4_0,                     (0x00040000)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF4_1,                     (0x00080000)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF5,                       (0x00C00000)        /*!< CNF5[1:0] bits (Port x configuration bits, pin 5) */
 .equiv GPIO_CRL_CNF5_0,                     (0x00400000)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF5_1,                     (0x00800000)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF6,                       (0x0C000000)        /*!< CNF6[1:0] bits (Port x configuration bits, pin 6) */
 .equiv GPIO_CRL_CNF6_0,                     (0x04000000)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF6_1,                     (0x08000000)        /*!< Bit 1 */

 .equiv GPIO_CRL_CNF7,                       (0xC0000000)        /*!< CNF7[1:0] bits (Port x configuration bits, pin 7) */
 .equiv GPIO_CRL_CNF7_0,                     (0x40000000)        /*!< Bit 0 */
 .equiv GPIO_CRL_CNF7_1,                     (0x80000000)        /*!< Bit 1 */

/*******************  Bit definition for GPIO_CRH register  *******************/
 .equiv GPIO_CRH_MODE,                       (0x33333333)        /*!< Port x mode bits */

 .equiv GPIO_CRH_MODE8,                      (0x00000003)        /*!< MODE8[1:0] bits (Port x mode bits, pin 8) */
 .equiv GPIO_CRH_MODE8_0,                    (0x00000001)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE8_1,                    (0x00000002)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE9,                      (0x00000030)        /*!< MODE9[1:0] bits (Port x mode bits, pin 9) */
 .equiv GPIO_CRH_MODE9_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE9_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE10,                     (0x00000300)        /*!< MODE10[1:0] bits (Port x mode bits, pin 10) */
 .equiv GPIO_CRH_MODE10_0,                   (0x00000100)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE10_1,                   (0x00000200)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE11,                     (0x00003000)        /*!< MODE11[1:0] bits (Port x mode bits, pin 11) */
 .equiv GPIO_CRH_MODE11_0,                   (0x00001000)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE11_1,                   (0x00002000)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE12,                     (0x00030000)        /*!< MODE12[1:0] bits (Port x mode bits, pin 12) */
 .equiv GPIO_CRH_MODE12_0,                   (0x00010000)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE12_1,                   (0x00020000)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE13,                     (0x00300000)        /*!< MODE13[1:0] bits (Port x mode bits, pin 13) */
 .equiv GPIO_CRH_MODE13_0,                   (0x00100000)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE13_1,                   (0x00200000)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE14,                     (0x03000000)        /*!< MODE14[1:0] bits (Port x mode bits, pin 14) */
 .equiv GPIO_CRH_MODE14_0,                   (0x01000000)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE14_1,                   (0x02000000)        /*!< Bit 1 */

 .equiv GPIO_CRH_MODE15,                     (0x30000000)        /*!< MODE15[1:0] bits (Port x mode bits, pin 15) */
 .equiv GPIO_CRH_MODE15_0,                   (0x10000000)        /*!< Bit 0 */
 .equiv GPIO_CRH_MODE15_1,                   (0x20000000)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF,                        (0xCCCCCCCC)        /*!< Port x configuration bits */

 .equiv GPIO_CRH_CNF8,                       (0x0000000C)        /*!< CNF8[1:0] bits (Port x configuration bits, pin 8) */
 .equiv GPIO_CRH_CNF8_0,                     (0x00000004)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF8_1,                     (0x00000008)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF9,                       (0x000000C0)        /*!< CNF9[1:0] bits (Port x configuration bits, pin 9) */
 .equiv GPIO_CRH_CNF9_0,                     (0x00000040)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF9_1,                     (0x00000080)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF10,                      (0x00000C00)        /*!< CNF10[1:0] bits (Port x configuration bits, pin 10) */
 .equiv GPIO_CRH_CNF10_0,                    (0x00000400)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF10_1,                    (0x00000800)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF11,                      (0x0000C000)        /*!< CNF11[1:0] bits (Port x configuration bits, pin 11) */
 .equiv GPIO_CRH_CNF11_0,                    (0x00004000)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF11_1,                    (0x00008000)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF12,                      (0x000C0000)        /*!< CNF12[1:0] bits (Port x configuration bits, pin 12) */
 .equiv GPIO_CRH_CNF12_0,                    (0x00040000)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF12_1,                    (0x00080000)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF13,                      (0x00C00000)        /*!< CNF13[1:0] bits (Port x configuration bits, pin 13) */
 .equiv GPIO_CRH_CNF13_0,                    (0x00400000)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF13_1,                    (0x00800000)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF14,                      (0x0C000000)        /*!< CNF14[1:0] bits (Port x configuration bits, pin 14) */
 .equiv GPIO_CRH_CNF14_0,                    (0x04000000)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF14_1,                    (0x08000000)        /*!< Bit 1 */

 .equiv GPIO_CRH_CNF15,                      (0xC0000000)        /*!< CNF15[1:0] bits (Port x configuration bits, pin 15) */
 .equiv GPIO_CRH_CNF15_0,                    (0x40000000)        /*!< Bit 0 */
 .equiv GPIO_CRH_CNF15_1,                    (0x80000000)        /*!< Bit 1 */

/******************  Bit definition for GPIO_BSRR register  *******************/
 .equiv GPIO_BSRR_BS0,                        (0x00000001)        /*!< Port x Set bit 0 */
 .equiv GPIO_BSRR_BS1,                        (0x00000002)        /*!< Port x Set bit 1 */
 .equiv GPIO_BSRR_BS2,                        (0x00000004)        /*!< Port x Set bit 2 */
 .equiv GPIO_BSRR_BS3,                        (0x00000008)        /*!< Port x Set bit 3 */
 .equiv GPIO_BSRR_BS4,                        (0x00000010)        /*!< Port x Set bit 4 */
 .equiv GPIO_BSRR_BS5,                        (0x00000020)        /*!< Port x Set bit 5 */
 .equiv GPIO_BSRR_BS6,                        (0x00000040)        /*!< Port x Set bit 6 */
 .equiv GPIO_BSRR_BS7,                        (0x00000080)        /*!< Port x Set bit 7 */
 .equiv GPIO_BSRR_BS8,                        (0x00000100)        /*!< Port x Set bit 8 */
 .equiv GPIO_BSRR_BS9,                        (0x00000200)        /*!< Port x Set bit 9 */
 .equiv GPIO_BSRR_BS10,                       (0x00000400)        /*!< Port x Set bit 10 */
 .equiv GPIO_BSRR_BS11,                       (0x00000800)        /*!< Port x Set bit 11 */
 .equiv GPIO_BSRR_BS12,                       (0x00001000)        /*!< Port x Set bit 12 */
 .equiv GPIO_BSRR_BS13,                       (0x00002000)        /*!< Port x Set bit 13 */
 .equiv GPIO_BSRR_BS14,                       (0x00004000)        /*!< Port x Set bit 14 */
 .equiv GPIO_BSRR_BS15,                       (0x00008000)        /*!< Port x Set bit 15 */

 .equiv GPIO_BSRR_BR0,                        (0x00010000)        /*!< Port x Reset bit 0 */
 .equiv GPIO_BSRR_BR1,                        (0x00020000)        /*!< Port x Reset bit 1 */
 .equiv GPIO_BSRR_BR2,                        (0x00040000)        /*!< Port x Reset bit 2 */
 .equiv GPIO_BSRR_BR3,                        (0x00080000)        /*!< Port x Reset bit 3 */
 .equiv GPIO_BSRR_BR4,                        (0x00100000)        /*!< Port x Reset bit 4 */
 .equiv GPIO_BSRR_BR5,                        (0x00200000)        /*!< Port x Reset bit 5 */
 .equiv GPIO_BSRR_BR6,                        (0x00400000)        /*!< Port x Reset bit 6 */
 .equiv GPIO_BSRR_BR7,                        (0x00800000)        /*!< Port x Reset bit 7 */
 .equiv GPIO_BSRR_BR8,                        (0x01000000)        /*!< Port x Reset bit 8 */
 .equiv GPIO_BSRR_BR9,                        (0x02000000)        /*!< Port x Reset bit 9 */
 .equiv GPIO_BSRR_BR10,                       (0x04000000)        /*!< Port x Reset bit 10 */
 .equiv GPIO_BSRR_BR11,                       (0x08000000)        /*!< Port x Reset bit 11 */
 .equiv GPIO_BSRR_BR12,                       (0x10000000)        /*!< Port x Reset bit 12 */
 .equiv GPIO_BSRR_BR13,                       (0x20000000)        /*!< Port x Reset bit 13 */
 .equiv GPIO_BSRR_BR14,                       (0x40000000)        /*!< Port x Reset bit 14 */
 .equiv GPIO_BSRR_BR15,                       (0x80000000)        /*!< Port x Reset bit 15 */


/******************  Bit definition for GPIO_LCKR register  *******************/
 .equiv GPIO_LCKR_LCKK,                       (0x00010000)        /*!< Lock key */

/*----------------------------------------------------------------------------*/

/******************  Bit definition for AFIO_EVCR register  *******************/
 .equiv AFIO_EVCR_PIN,                        (0x0F)               /*!< PIN[3:0] bits (Pin selection) */
 .equiv AFIO_EVCR_PIN_0,                      (0x01)               /*!< Bit 0 */
 .equiv AFIO_EVCR_PIN_1,                      (0x02)               /*!< Bit 1 */
 .equiv AFIO_EVCR_PIN_2,                      (0x04)               /*!< Bit 2 */
 .equiv AFIO_EVCR_PIN_3,                      (0x08)               /*!< Bit 3 */

/*!< PIN configuration */
 .equiv AFIO_EVCR_PIN_PX0,                    (0x00)               /*!< Pin 0 selected */
 .equiv AFIO_EVCR_PIN_PX1,                    (0x01)               /*!< Pin 1 selected */
 .equiv AFIO_EVCR_PIN_PX2,                    (0x02)               /*!< Pin 2 selected */
 .equiv AFIO_EVCR_PIN_PX3,                    (0x03)               /*!< Pin 3 selected */
 .equiv AFIO_EVCR_PIN_PX4,                    (0x04)               /*!< Pin 4 selected */
 .equiv AFIO_EVCR_PIN_PX5,                    (0x05)               /*!< Pin 5 selected */
 .equiv AFIO_EVCR_PIN_PX6,                    (0x06)               /*!< Pin 6 selected */
 .equiv AFIO_EVCR_PIN_PX7,                    (0x07)               /*!< Pin 7 selected */
 .equiv AFIO_EVCR_PIN_PX8,                    (0x08)               /*!< Pin 8 selected */
 .equiv AFIO_EVCR_PIN_PX9,                    (0x09)               /*!< Pin 9 selected */
 .equiv AFIO_EVCR_PIN_PX10,                   (0x0A)               /*!< Pin 10 selected */
 .equiv AFIO_EVCR_PIN_PX11,                   (0x0B)               /*!< Pin 11 selected */
 .equiv AFIO_EVCR_PIN_PX12,                   (0x0C)               /*!< Pin 12 selected */
 .equiv AFIO_EVCR_PIN_PX13,                   (0x0D)               /*!< Pin 13 selected */
 .equiv AFIO_EVCR_PIN_PX14,                   (0x0E)               /*!< Pin 14 selected */
 .equiv AFIO_EVCR_PIN_PX15,                   (0x0F)               /*!< Pin 15 selected */

 .equiv AFIO_EVCR_PORT,                       (0x70)               /*!< PORT[2:0] bits (Port selection) */
 .equiv AFIO_EVCR_PORT_0,                     (0x10)               /*!< Bit 0 */
 .equiv AFIO_EVCR_PORT_1,                     (0x20)               /*!< Bit 1 */
 .equiv AFIO_EVCR_PORT_2,                     (0x40)               /*!< Bit 2 */

/*!< PORT configuration */
 .equiv AFIO_EVCR_PORT_PA,                    (0x00)               /*!< Port A selected */
 .equiv AFIO_EVCR_PORT_PB,                    (0x10)               /*!< Port B selected */
 .equiv AFIO_EVCR_PORT_PC,                    (0x20)               /*!< Port C selected */
 .equiv AFIO_EVCR_PORT_PD,                    (0x30)               /*!< Port D selected */
 .equiv AFIO_EVCR_PORT_PE,                    (0x40)               /*!< Port E selected */

 .equiv AFIO_EVCR_EVOE,                       (0x80)               /*!< Event Output Enable */

/******************  Bit definition for AFIO_MAPR register  *******************/
 .equiv AFIO_MAPR_SPI1_REMAP,                 (0x00000001)        /*!< SPI1 remapping */
 .equiv AFIO_MAPR_I2C1_REMAP,                 (0x00000002)        /*!< I2C1 remapping */
 .equiv AFIO_MAPR_USART1_REMAP,               (0x00000004)        /*!< USART1 remapping */
 .equiv AFIO_MAPR_USART2_REMAP,               (0x00000008)        /*!< USART2 remapping */

 .equiv AFIO_MAPR_USART3_REMAP,               (0x00000030)        /*!< USART3_REMAP[1:0] bits (USART3 remapping) */
 .equiv AFIO_MAPR_USART3_REMAP_0,             (0x00000010)        /*!< Bit 0 */
 .equiv AFIO_MAPR_USART3_REMAP_1,             (0x00000020)        /*!< Bit 1 */

/* USART3_REMAP configuration */
 .equiv AFIO_MAPR_USART3_REMAP_NOREMAP,       (0x00000000)        /*!< No remap (TX/PB10, RX/PB11, CK/PB12, CTS/PB13, RTS/PB14) */
 .equiv AFIO_MAPR_USART3_REMAP_PARTIALREMAP,  (0x00000010)        /*!< Partial remap (TX/PC10, RX/PC11, CK/PC12, CTS/PB13, RTS/PB14) */
 .equiv AFIO_MAPR_USART3_REMAP_FULLREMAP,     (0x00000030)        /*!< Full remap (TX/PD8, RX/PD9, CK/PD10, CTS/PD11, RTS/PD12) */

 .equiv AFIO_MAPR_TIM1_REMAP,                 (0x000000C0)        /*!< TIM1_REMAP[1:0] bits (TIM1 remapping) */
 .equiv AFIO_MAPR_TIM1_REMAP_0,               (0x00000040)        /*!< Bit 0 */
 .equiv AFIO_MAPR_TIM1_REMAP_1,               (0x00000080)        /*!< Bit 1 */

/*!< TIM1_REMAP configuration */
 .equiv AFIO_MAPR_TIM1_REMAP_NOREMAP,         (0x00000000)        /*!< No remap (ETR/PA12, CH1/PA8, CH2/PA9, CH3/PA10, CH4/PA11, BKIN/PB12, CH1N/PB13, CH2N/PB14, CH3N/PB15) */
 .equiv AFIO_MAPR_TIM1_REMAP_PARTIALREMAP,    (0x00000040)        /*!< Partial remap (ETR/PA12, CH1/PA8, CH2/PA9, CH3/PA10, CH4/PA11, BKIN/PA6, CH1N/PA7, CH2N/PB0, CH3N/PB1) */
 .equiv AFIO_MAPR_TIM1_REMAP_FULLREMAP,       (0x000000C0)        /*!< Full remap (ETR/PE7, CH1/PE9, CH2/PE11, CH3/PE13, CH4/PE14, BKIN/PE15, CH1N/PE8, CH2N/PE10, CH3N/PE12) */

 .equiv AFIO_MAPR_TIM2_REMAP,                 (0x00000300)        /*!< TIM2_REMAP[1:0] bits (TIM2 remapping) */
 .equiv AFIO_MAPR_TIM2_REMAP_0,               (0x00000100)        /*!< Bit 0 */
 .equiv AFIO_MAPR_TIM2_REMAP_1,               (0x00000200)        /*!< Bit 1 */

/*!< TIM2_REMAP configuration */
 .equiv AFIO_MAPR_TIM2_REMAP_NOREMAP,         (0x00000000)        /*!< No remap (CH1/ETR/PA0, CH2/PA1, CH3/PA2, CH4/PA3) */
 .equiv AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1,   (0x00000100)        /*!< Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2, CH4/PA3) */
 .equiv AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2,   (0x00000200)        /*!< Partial remap (CH1/ETR/PA0, CH2/PA1, CH3/PB10, CH4/PB11) */
 .equiv AFIO_MAPR_TIM2_REMAP_FULLREMAP,       (0x00000300)        /*!< Full remap (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11) */

 .equiv AFIO_MAPR_TIM3_REMAP,                 (0x00000C00)        /*!< TIM3_REMAP[1:0] bits (TIM3 remapping) */
 .equiv AFIO_MAPR_TIM3_REMAP_0,               (0x00000400)        /*!< Bit 0 */
 .equiv AFIO_MAPR_TIM3_REMAP_1,               (0x00000800)        /*!< Bit 1 */

/*!< TIM3_REMAP configuration */
 .equiv AFIO_MAPR_TIM3_REMAP_NOREMAP,         (0x00000000)        /*!< No remap (CH1/PA6, CH2/PA7, CH3/PB0, CH4/PB1) */
 .equiv AFIO_MAPR_TIM3_REMAP_PARTIALREMAP,    (0x00000800)        /*!< Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1) */
 .equiv AFIO_MAPR_TIM3_REMAP_FULLREMAP,       (0x00000C00)        /*!< Full remap (CH1/PC6, CH2/PC7, CH3/PC8, CH4/PC9) */

 .equiv AFIO_MAPR_TIM4_REMAP,                 (0x00001000)        /*!< TIM4_REMAP bit (TIM4 remapping) */

 .equiv AFIO_MAPR_CAN_REMAP,                  (0x00006000)        /*!< CAN_REMAP[1:0] bits (CAN Alternate function remapping) */
 .equiv AFIO_MAPR_CAN_REMAP_0,                (0x00002000)        /*!< Bit 0 */
 .equiv AFIO_MAPR_CAN_REMAP_1,                (0x00004000)        /*!< Bit 1 */

/*!< CAN_REMAP configuration */
 .equiv AFIO_MAPR_CAN_REMAP_REMAP1,           (0x00000000)        /*!< CANRX mapped to PA11, CANTX mapped to PA12 */
 .equiv AFIO_MAPR_CAN_REMAP_REMAP2,           (0x00004000)        /*!< CANRX mapped to PB8, CANTX mapped to PB9 */
 .equiv AFIO_MAPR_CAN_REMAP_REMAP3,           (0x00006000)        /*!< CANRX mapped to PD0, CANTX mapped to PD1 */

 .equiv AFIO_MAPR_PD01_REMAP,                 (0x00008000)        /*!< Port D0/Port D1 mapping on OSC_IN/OSC_OUT */
 .equiv AFIO_MAPR_TIM5CH4_IREMAP,             (0x00010000)        /*!< TIM5 Channel4 Internal Remap */
 .equiv AFIO_MAPR_ADC1_ETRGINJ_REMAP,         (0x00020000)        /*!< ADC 1 External Trigger Injected Conversion remapping */
 .equiv AFIO_MAPR_ADC1_ETRGREG_REMAP,         (0x00040000)        /*!< ADC 1 External Trigger Regular Conversion remapping */
 .equiv AFIO_MAPR_ADC2_ETRGINJ_REMAP,         (0x00080000)        /*!< ADC 2 External Trigger Injected Conversion remapping */
 .equiv AFIO_MAPR_ADC2_ETRGREG_REMAP,         (0x00100000)        /*!< ADC 2 External Trigger Regular Conversion remapping */

/*!< SWJ_CFG configuration */
 .equiv AFIO_MAPR_SWJ_CFG,                    (0x07000000)        /*!< SWJ_CFG[2:0] bits (Serial Wire JTAG configuration) */
 .equiv AFIO_MAPR_SWJ_CFG_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv AFIO_MAPR_SWJ_CFG_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv AFIO_MAPR_SWJ_CFG_2,                  (0x04000000)        /*!< Bit 2 */

 .equiv AFIO_MAPR_SWJ_CFG_RESET,              (0x00000000)        /*!< Full SWJ (JTAG-DP + SW-DP) : Reset State */
 .equiv AFIO_MAPR_SWJ_CFG_NOJNTRST,           (0x01000000)        /*!< Full SWJ (JTAG-DP + SW-DP) but without JNTRST */
 .equiv AFIO_MAPR_SWJ_CFG_JTAGDISABLE,        (0x02000000)        /*!< JTAG-DP Disabled and SW-DP Enabled */
 .equiv AFIO_MAPR_SWJ_CFG_DISABLE,            (0x04000000)        /*!< JTAG-DP Disabled and SW-DP Disabled */

/*****************  Bit definition for AFIO_EXTICR1 register  *****************/
 .equiv AFIO_EXTICR1_EXTI0,                   (0x000F)            /*!< EXTI 0 configuration */
 .equiv AFIO_EXTICR1_EXTI1,                   (0x00F0)            /*!< EXTI 1 configuration */
 .equiv AFIO_EXTICR1_EXTI2,                   (0x0F00)            /*!< EXTI 2 configuration */
 .equiv AFIO_EXTICR1_EXTI3,                   (0xF000)            /*!< EXTI 3 configuration */

/*!< EXTI0 configuration */
 .equiv AFIO_EXTICR1_EXTI0_PA,                (0x0000)            /*!< PA[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PB,                (0x0001)            /*!< PB[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PC,                (0x0002)            /*!< PC[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PD,                (0x0003)            /*!< PD[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PE,                (0x0004)            /*!< PE[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PF,                (0x0005)            /*!< PF[0] pin */
 .equiv AFIO_EXTICR1_EXTI0_PG,                (0x0006)            /*!< PG[0] pin */

/*!< EXTI1 configuration */
 .equiv AFIO_EXTICR1_EXTI1_PA,                (0x0000)            /*!< PA[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PB,                (0x0010)            /*!< PB[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PC,                (0x0020)            /*!< PC[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PD,                (0x0030)            /*!< PD[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PE,                (0x0040)            /*!< PE[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PF,                (0x0050)            /*!< PF[1] pin */
 .equiv AFIO_EXTICR1_EXTI1_PG,                (0x0060)            /*!< PG[1] pin */

/*!< EXTI2 configuration */  
 .equiv AFIO_EXTICR1_EXTI2_PA,                (0x0000)            /*!< PA[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PB,                (0x0100)            /*!< PB[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PC,                (0x0200)            /*!< PC[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PD,                (0x0300)            /*!< PD[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PE,                (0x0400)            /*!< PE[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PF,                (0x0500)            /*!< PF[2] pin */
 .equiv AFIO_EXTICR1_EXTI2_PG,                (0x0600)            /*!< PG[2] pin */

/*!< EXTI3 configuration */
 .equiv AFIO_EXTICR1_EXTI3_PA,                (0x0000)            /*!< PA[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PB,                (0x1000)            /*!< PB[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PC,                (0x2000)            /*!< PC[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PD,                (0x3000)            /*!< PD[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PE,                (0x4000)            /*!< PE[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PF,                (0x5000)            /*!< PF[3] pin */
 .equiv AFIO_EXTICR1_EXTI3_PG,                (0x6000)            /*!< PG[3] pin */

/*****************  Bit definition for AFIO_EXTICR2 register  *****************/
 .equiv AFIO_EXTICR2_EXTI4,                   (0x000F)            /*!< EXTI 4 configuration */
 .equiv AFIO_EXTICR2_EXTI5,                   (0x00F0)            /*!< EXTI 5 configuration */
 .equiv AFIO_EXTICR2_EXTI6,                   (0x0F00)            /*!< EXTI 6 configuration */
 .equiv AFIO_EXTICR2_EXTI7,                   (0xF000)            /*!< EXTI 7 configuration */

/*!< EXTI4 configuration */
 .equiv AFIO_EXTICR2_EXTI4_PA,                (0x0000)            /*!< PA[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PB,                (0x0001)            /*!< PB[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PC,                (0x0002)            /*!< PC[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PD,                (0x0003)            /*!< PD[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PE,                (0x0004)            /*!< PE[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PF,                (0x0005)            /*!< PF[4] pin */
 .equiv AFIO_EXTICR2_EXTI4_PG,                (0x0006)            /*!< PG[4] pin */

/* EXTI5 configuration */
 .equiv AFIO_EXTICR2_EXTI5_PA,                (0x0000)            /*!< PA[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PB,                (0x0010)            /*!< PB[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PC,                (0x0020)            /*!< PC[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PD,                (0x0030)            /*!< PD[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PE,                (0x0040)            /*!< PE[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PF,                (0x0050)            /*!< PF[5] pin */
 .equiv AFIO_EXTICR2_EXTI5_PG,                (0x0060)            /*!< PG[5] pin */

/*!< EXTI6 configuration */  
 .equiv AFIO_EXTICR2_EXTI6_PA,                (0x0000)            /*!< PA[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PB,                (0x0100)            /*!< PB[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PC,                (0x0200)            /*!< PC[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PD,                (0x0300)            /*!< PD[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PE,                (0x0400)            /*!< PE[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PF,                (0x0500)            /*!< PF[6] pin */
 .equiv AFIO_EXTICR2_EXTI6_PG,                (0x0600)            /*!< PG[6] pin */

/*!< EXTI7 configuration */
 .equiv AFIO_EXTICR2_EXTI7_PA,                (0x0000)            /*!< PA[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PB,                (0x1000)            /*!< PB[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PC,                (0x2000)            /*!< PC[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PD,                (0x3000)            /*!< PD[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PE,                (0x4000)            /*!< PE[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PF,                (0x5000)            /*!< PF[7] pin */
 .equiv AFIO_EXTICR2_EXTI7_PG,                (0x6000)            /*!< PG[7] pin */

/*****************  Bit definition for AFIO_EXTICR3 register  *****************/
 .equiv AFIO_EXTICR3_EXTI8,                   (0x000F)            /*!< EXTI 8 configuration */
 .equiv AFIO_EXTICR3_EXTI9,                   (0x00F0)            /*!< EXTI 9 configuration */
 .equiv AFIO_EXTICR3_EXTI10,                  (0x0F00)            /*!< EXTI 10 configuration */
 .equiv AFIO_EXTICR3_EXTI11,                  (0xF000)            /*!< EXTI 11 configuration */

/*!< EXTI8 configuration */
 .equiv AFIO_EXTICR3_EXTI8_PA,                (0x0000)            /*!< PA[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PB,                (0x0001)            /*!< PB[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PC,                (0x0002)            /*!< PC[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PD,                (0x0003)            /*!< PD[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PE,                (0x0004)            /*!< PE[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PF,                (0x0005)            /*!< PF[8] pin */
 .equiv AFIO_EXTICR3_EXTI8_PG,                (0x0006)            /*!< PG[8] pin */

/*!< EXTI9 configuration */
 .equiv AFIO_EXTICR3_EXTI9_PA,                (0x0000)            /*!< PA[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PB,                (0x0010)            /*!< PB[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PC,                (0x0020)            /*!< PC[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PD,                (0x0030)            /*!< PD[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PE,                (0x0040)            /*!< PE[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PF,                (0x0050)            /*!< PF[9] pin */
 .equiv AFIO_EXTICR3_EXTI9_PG,                (0x0060)            /*!< PG[9] pin */

/*!< EXTI10 configuration */  
 .equiv AFIO_EXTICR3_EXTI10_PA,               (0x0000)            /*!< PA[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PB,               (0x0100)            /*!< PB[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PC,               (0x0200)            /*!< PC[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PD,               (0x0300)            /*!< PD[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PE,               (0x0400)            /*!< PE[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PF,               (0x0500)            /*!< PF[10] pin */
 .equiv AFIO_EXTICR3_EXTI10_PG,               (0x0600)            /*!< PG[10] pin */

/*!< EXTI11 configuration */
 .equiv AFIO_EXTICR3_EXTI11_PA,               (0x0000)            /*!< PA[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PB,               (0x1000)            /*!< PB[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PC,               (0x2000)            /*!< PC[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PD,               (0x3000)            /*!< PD[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PE,               (0x4000)            /*!< PE[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PF,               (0x5000)            /*!< PF[11] pin */
 .equiv AFIO_EXTICR3_EXTI11_PG,               (0x6000)            /*!< PG[11] pin */

/*****************  Bit definition for AFIO_EXTICR4 register  *****************/
 .equiv AFIO_EXTICR4_EXTI12,                  (0x000F)            /*!< EXTI 12 configuration */
 .equiv AFIO_EXTICR4_EXTI13,                  (0x00F0)            /*!< EXTI 13 configuration */
 .equiv AFIO_EXTICR4_EXTI14,                  (0x0F00)            /*!< EXTI 14 configuration */
 .equiv AFIO_EXTICR4_EXTI15,                  (0xF000)            /*!< EXTI 15 configuration */

/* EXTI12 configuration */
 .equiv AFIO_EXTICR4_EXTI12_PA,               (0x0000)            /*!< PA[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PB,               (0x0001)            /*!< PB[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PC,               (0x0002)            /*!< PC[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PD,               (0x0003)            /*!< PD[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PE,               (0x0004)            /*!< PE[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PF,               (0x0005)            /*!< PF[12] pin */
 .equiv AFIO_EXTICR4_EXTI12_PG,               (0x0006)            /*!< PG[12] pin */

/* EXTI13 configuration */
 .equiv AFIO_EXTICR4_EXTI13_PA,               (0x0000)            /*!< PA[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PB,               (0x0010)            /*!< PB[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PC,               (0x0020)            /*!< PC[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PD,               (0x0030)            /*!< PD[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PE,               (0x0040)            /*!< PE[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PF,               (0x0050)            /*!< PF[13] pin */
 .equiv AFIO_EXTICR4_EXTI13_PG,               (0x0060)            /*!< PG[13] pin */

/*!< EXTI14 configuration */  
 .equiv AFIO_EXTICR4_EXTI14_PA,               (0x0000)            /*!< PA[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PB,               (0x0100)            /*!< PB[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PC,               (0x0200)            /*!< PC[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PD,               (0x0300)            /*!< PD[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PE,               (0x0400)            /*!< PE[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PF,               (0x0500)            /*!< PF[14] pin */
 .equiv AFIO_EXTICR4_EXTI14_PG,               (0x0600)            /*!< PG[14] pin */

/*!< EXTI15 configuration */
 .equiv AFIO_EXTICR4_EXTI15_PA,               (0x0000)            /*!< PA[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PB,               (0x1000)            /*!< PB[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PC,               (0x2000)            /*!< PC[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PD,               (0x3000)            /*!< PD[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PE,               (0x4000)            /*!< PE[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PF,               (0x5000)            /*!< PF[15] pin */
 .equiv AFIO_EXTICR4_EXTI15_PG,               (0x6000)            /*!< PG[15] pin */


/******************************************************************************/
/*                                                                            */
/*                               SystemTick                                   */
/*                                                                            */
/******************************************************************************/

/*****************  Bit definition for SysTick_CTRL register  *****************/
 .equiv SysTick_CTRL_ENABLE,                 (0x00000001)        /*!< Counter enable */
 .equiv SysTick_CTRL_TICKINT,                (0x00000002)        /*!< Counting down to 0 pends the SysTick handler */
 .equiv SysTick_CTRL_CLKSOURCE,              (0x00000004)        /*!< Clock source */
 .equiv SysTick_CTRL_COUNTFLAG,              (0x00010000)        /*!< Count Flag */

/*****************  Bit definition for SysTick_LOAD register  *****************/
 .equiv SysTick_LOAD_RELOAD,                 (0x00FFFFFF)        /*!< Value to load into the SysTick Current Value Register when the counter reaches 0 */

/*****************  Bit definition for SysTick_VAL register  ******************/
 .equiv SysTick_VAL_CURRENT,                 (0x00FFFFFF)        /*!< Current value at the time the register is accessed */

/*****************  Bit definition for SysTick_CALIB register  ****************/
 .equiv SysTick_CALIB_TENMS,                 (0x00FFFFFF)        /*!< Reload value to use for 10ms timing */
 .equiv SysTick_CALIB_SKEW,                  (0x40000000)        /*!< Calibration value is not exactly 10 ms */
 .equiv SysTick_CALIB_NOREF,                 (0x80000000)        /*!< The reference clock is not provided */

/******************************************************************************/
/*                                                                            */
/*                  Nested Vectored Interrupt Controller                      */
/*                                                                            */
/******************************************************************************/

/******************  Bit definition for NVIC_ISER register  *******************/
 .equiv NVIC_ISER_SETENA,                    (0xFFFFFFFF)        /*!< Interrupt set enable bits */

/******************  Bit definition for NVIC_ICER register  *******************/
 .equiv NVIC_ICER_CLRENA,                   (0xFFFFFFFF)        /*!< Interrupt clear-enable bits */

/******************  Bit definition for NVIC_ISPR register  *******************/
 .equiv NVIC_ISPR_SETPEND,                   (0xFFFFFFFF)        /*!< Interrupt set-pending bits */

/******************  Bit definition for NVIC_ICPR register  *******************/
 .equiv NVIC_ICPR_CLRPEND,                   (0xFFFFFFFF)        /*!< Interrupt clear-pending bits */

/******************  Bit definition for NVIC_IABR register  *******************/
 .equiv NVIC_IABR_ACTIVE,                    (0xFFFFFFFF)        /*!< Interrupt active flags */

/******************  Bit definition for NVIC_PRI0 register  *******************/
 .equiv NVIC_IPR0_PRI_0,                     (0x000000FF)        /*!< Priority of interrupt 0 */
 .equiv NVIC_IPR0_PRI_1,                     (0x0000FF00)        /*!< Priority of interrupt 1 */
 .equiv NVIC_IPR0_PRI_2,                     (0x00FF0000)        /*!< Priority of interrupt 2 */
 .equiv NVIC_IPR0_PRI_3,                     (0xFF000000)        /*!< Priority of interrupt 3 */

/******************  Bit definition for NVIC_PRI1 register  *******************/
 .equiv NVIC_IPR1_PRI_4,                     (0x000000FF)        /*!< Priority of interrupt 4 */
 .equiv NVIC_IPR1_PRI_5,                     (0x0000FF00)        /*!< Priority of interrupt 5 */
 .equiv NVIC_IPR1_PRI_6,                     (0x00FF0000)        /*!< Priority of interrupt 6 */
 .equiv NVIC_IPR1_PRI_7,                     (0xFF000000)        /*!< Priority of interrupt 7 */

/******************  Bit definition for NVIC_PRI2 register  *******************/
 .equiv NVIC_IPR2_PRI_8,                     (0x000000FF)        /*!< Priority of interrupt 8 */
 .equiv NVIC_IPR2_PRI_9,                     (0x0000FF00)        /*!< Priority of interrupt 9 */
 .equiv NVIC_IPR2_PRI_10,                    (0x00FF0000)        /*!< Priority of interrupt 10 */
 .equiv NVIC_IPR2_PRI_11,                    (0xFF000000)        /*!< Priority of interrupt 11 */

/******************  Bit definition for NVIC_PRI3 register  *******************/
 .equiv NVIC_IPR3_PRI_12,                    (0x000000FF)        /*!< Priority of interrupt 12 */
 .equiv NVIC_IPR3_PRI_13,                    (0x0000FF00)        /*!< Priority of interrupt 13 */
 .equiv NVIC_IPR3_PRI_14,                    (0x00FF0000)        /*!< Priority of interrupt 14 */
 .equiv NVIC_IPR3_PRI_15,                    (0xFF000000)        /*!< Priority of interrupt 15 */

/******************  Bit definition for NVIC_PRI4 register  *******************/
 .equiv NVIC_IPR4_PRI_16,                    (0x000000FF)        /*!< Priority of interrupt 16 */
 .equiv NVIC_IPR4_PRI_17,                    (0x0000FF00)        /*!< Priority of interrupt 17 */
 .equiv NVIC_IPR4_PRI_18,                    (0x00FF0000)        /*!< Priority of interrupt 18 */
 .equiv NVIC_IPR4_PRI_19,                    (0xFF000000)        /*!< Priority of interrupt 19 */

/******************  Bit definition for NVIC_PRI5 register  *******************/
 .equiv NVIC_IPR5_PRI_20,                    (0x000000FF)        /*!< Priority of interrupt 20 */
 .equiv NVIC_IPR5_PRI_21,                    (0x0000FF00)        /*!< Priority of interrupt 21 */
 .equiv NVIC_IPR5_PRI_22,                    (0x00FF0000)        /*!< Priority of interrupt 22 */
 .equiv NVIC_IPR5_PRI_23,                    (0xFF000000)        /*!< Priority of interrupt 23 */

/******************  Bit definition for NVIC_PRI6 register  *******************/
 .equiv NVIC_IPR6_PRI_24,                    (0x000000FF)        /*!< Priority of interrupt 24 */
 .equiv NVIC_IPR6_PRI_25,                    (0x0000FF00)        /*!< Priority of interrupt 25 */
 .equiv NVIC_IPR6_PRI_26,                    (0x00FF0000)        /*!< Priority of interrupt 26 */
 .equiv NVIC_IPR6_PRI_27,                    (0xFF000000)        /*!< Priority of interrupt 27 */

/******************  Bit definition for NVIC_PRI7 register  *******************/
 .equiv NVIC_IPR7_PRI_28,                    (0x000000FF)        /*!< Priority of interrupt 28 */
 .equiv NVIC_IPR7_PRI_29,                    (0x0000FF00)        /*!< Priority of interrupt 29 */
 .equiv NVIC_IPR7_PRI_30,                    (0x00FF0000)        /*!< Priority of interrupt 30 */
 .equiv NVIC_IPR7_PRI_31,                    (0xFF000000)        /*!< Priority of interrupt 31 */

/******************  Bit definition for SCB_CPUID register  *******************/
 .equiv SCB_CPUID_REVISION,                  (0x0000000F)        /*!< Implementation defined revision number */
 .equiv SCB_CPUID_PARTNO,                    (0x0000FFF0)        /*!< Number of processor within family */
 .equiv SCB_CPUID_Constant,                  (0x000F0000)        /*!< Reads as 0x0F */
 .equiv SCB_CPUID_VARIANT,                   (0x00F00000)        /*!< Implementation defined variant number */
 .equiv SCB_CPUID_IMPLEMENTER,               (0xFF000000)        /*!< Implementer code. ARM is 0x41 */

/*******************  Bit definition for SCB_ICSR register  *******************/
 .equiv SCB_ICSR_VECTACTIVE,                 (0x000001FF)        /*!< Active ISR number field */
 .equiv SCB_ICSR_RETTOBASE,                  (0x00000800)        /*!< All active exceptions minus the IPSR_current_exception yields the empty set */
 .equiv SCB_ICSR_VECTPENDING,                (0x003FF000)        /*!< Pending ISR number field */
 .equiv SCB_ICSR_ISRPENDING,                 (0x00400000)        /*!< Interrupt pending flag */
 .equiv SCB_ICSR_ISRPREEMPT,                 (0x00800000)        /*!< It indicates that a pending interrupt becomes active in the next running cycle */
 .equiv SCB_ICSR_PENDSTCLR,                  (0x02000000)        /*!< Clear pending SysTick bit */
 .equiv SCB_ICSR_PENDSTSET,                  (0x04000000)        /*!< Set pending SysTick bit */
 .equiv SCB_ICSR_PENDSVCLR,                  (0x08000000)        /*!< Clear pending pendSV bit */
 .equiv SCB_ICSR_PENDSVSET,                  (0x10000000)        /*!< Set pending pendSV bit */
 .equiv SCB_ICSR_NMIPENDSET,                 (0x80000000)        /*!< Set pending NMI bit */

/*******************  Bit definition for SCB_VTOR register  *******************/
 .equiv SCB_VTOR_TBLOFF,                     (0x1FFFFF80)        /*!< Vector table base offset field */
 .equiv SCB_VTOR_TBLBASE,                    (0x20000000)        /*!< Table base in code(0) or RAM(1) */

/*!<*****************  Bit definition for SCB_AIRCR register  *******************/
 .equiv SCB_AIRCR_VECTRESET,                 (0x00000001)        /*!< System Reset bit */
 .equiv SCB_AIRCR_VECTCLRACTIVE,             (0x00000002)        /*!< Clear active vector bit */
 .equiv SCB_AIRCR_SYSRESETREQ,               (0x00000004)        /*!< Requests chip control logic to generate a reset */

 .equiv SCB_AIRCR_PRIGROUP,                  (0x00000700)        /*!< PRIGROUP[2:0] bits (Priority group) */
 .equiv SCB_AIRCR_PRIGROUP_0,                (0x00000100)        /*!< Bit 0 */
 .equiv SCB_AIRCR_PRIGROUP_1,                (0x00000200)        /*!< Bit 1 */
 .equiv SCB_AIRCR_PRIGROUP_2,                (0x00000400)        /*!< Bit 2  */

/* prority group configuration */
 .equiv SCB_AIRCR_PRIGROUP0,                 (0x00000000)        /*!< Priority group=0 (7 bits of pre-emption priority, 1 bit of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP1,                 (0x00000100)        /*!< Priority group=1 (6 bits of pre-emption priority, 2 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP2,                 (0x00000200)        /*!< Priority group=2 (5 bits of pre-emption priority, 3 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP3,                 (0x00000300)        /*!< Priority group=3 (4 bits of pre-emption priority, 4 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP4,                 (0x00000400)        /*!< Priority group=4 (3 bits of pre-emption priority, 5 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP5,                 (0x00000500)        /*!< Priority group=5 (2 bits of pre-emption priority, 6 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP6,                 (0x00000600)        /*!< Priority group=6 (1 bit of pre-emption priority, 7 bits of subpriority) */
 .equiv SCB_AIRCR_PRIGROUP7,                 (0x00000700)        /*!< Priority group=7 (no pre-emption priority, 8 bits of subpriority) */

 .equiv SCB_AIRCR_ENDIANESS,                 (0x00008000)        /*!< Data endianness bit */
 .equiv SCB_AIRCR_VECTKEY,                   (0xFFFF0000)        /*!< Register key (VECTKEY) - Reads as 0xFA05 (VECTKEYSTAT) */

/*******************  Bit definition for SCB_SCR register  ********************/
 .equiv SCB_SCR_SLEEPONEXIT,                 (0x02)               /*!< Sleep on exit bit */
 .equiv SCB_SCR_SLEEPDEEP,                   (0x04)               /*!< Sleep deep bit */
 .equiv SCB_SCR_SEVONPEND,                   (0x10)               /*!< Wake up from WFE */

/********************  Bit definition for SCB_CCR register  *******************/
 .equiv SCB_CCR_NONBASETHRDENA,              (0x0001)            /*!< Thread mode can be entered from any level in Handler mode by controlled return value */
 .equiv SCB_CCR_USERSETMPEND,                (0x0002)            /*!< Enables user code to write the Software Trigger Interrupt register to trigger (pend) a Main exception */
 .equiv SCB_CCR_UNALIGN_TRP,                 (0x0008)            /*!< Trap for unaligned access */
 .equiv SCB_CCR_DIV_0_TRP,                   (0x0010)            /*!< Trap on Divide by 0 */
 .equiv SCB_CCR_BFHFNMIGN,                   (0x0100)            /*!< Handlers running at priority -1 and -2 */
 .equiv SCB_CCR_STKALIGN,                    (0x0200)            /*!< On exception entry, the SP used prior to the exception is adjusted to be 8-byte aligned */

/*******************  Bit definition for SCB_SHPR register ********************/
 .equiv SCB_SHPR_PRI_N,                      (0x000000FF)        /*!< Priority of system handler 4,8, and 12. Mem Manage, reserved and Debug Monitor */
 .equiv SCB_SHPR_PRI_N1,                     (0x0000FF00)        /*!< Priority of system handler 5,9, and 13. Bus Fault, reserved and reserved */
 .equiv SCB_SHPR_PRI_N2,                     (0x00FF0000)        /*!< Priority of system handler 6,10, and 14. Usage Fault, reserved and PendSV */
 .equiv SCB_SHPR_PRI_N3,                     (0xFF000000)        /*!< Priority of system handler 7,11, and 15. Reserved, SVCall and SysTick */

/******************  Bit definition for SCB_SHCSR register  *******************/
 .equiv SCB_SHCSR_MEMFAULTACT,               (0x00000001)        /*!< MemManage is active */
 .equiv SCB_SHCSR_BUSFAULTACT,               (0x00000002)        /*!< BusFault is active */
 .equiv SCB_SHCSR_USGFAULTACT,               (0x00000008)        /*!< UsageFault is active */
 .equiv SCB_SHCSR_SVCALLACT,                 (0x00000080)        /*!< SVCall is active */
 .equiv SCB_SHCSR_MONITORACT,                (0x00000100)        /*!< Monitor is active */
 .equiv SCB_SHCSR_PENDSVACT,                 (0x00000400)        /*!< PendSV is active */
 .equiv SCB_SHCSR_SYSTICKACT,                (0x00000800)        /*!< SysTick is active */
 .equiv SCB_SHCSR_USGFAULTPENDED,            (0x00001000)        /*!< Usage Fault is pended */
 .equiv SCB_SHCSR_MEMFAULTPENDED,            (0x00002000)        /*!< MemManage is pended */
 .equiv SCB_SHCSR_BUSFAULTPENDED,            (0x00004000)        /*!< Bus Fault is pended */
 .equiv SCB_SHCSR_SVCALLPENDED,              (0x00008000)        /*!< SVCall is pended */
 .equiv SCB_SHCSR_MEMFAULTENA,               (0x00010000)        /*!< MemManage enable */
 .equiv SCB_SHCSR_BUSFAULTENA,               (0x00020000)        /*!< Bus Fault enable */
 .equiv SCB_SHCSR_USGFAULTENA,               (0x00040000)        /*!< UsageFault enable */

/*******************  Bit definition for SCB_CFSR register  *******************/
/*!< MFSR */
 .equiv SCB_CFSR_IACCVIOL,                   (0x00000001)        /*!< Instruction access violation */
 .equiv SCB_CFSR_DACCVIOL,                   (0x00000002)        /*!< Data access violation */
 .equiv SCB_CFSR_MUNSTKERR,                  (0x00000008)        /*!< Unstacking error */
 .equiv SCB_CFSR_MSTKERR,                    (0x00000010)        /*!< Stacking error */
 .equiv SCB_CFSR_MMARVALID,                  (0x00000080)        /*!< Memory Manage Address Register address valid flag */
/*!< BFSR */
 .equiv SCB_CFSR_IBUSERR,                    (0x00000100)        /*!< Instruction bus error flag */
 .equiv SCB_CFSR_PRECISERR,                  (0x00000200)        /*!< Precise data bus error */
 .equiv SCB_CFSR_IMPRECISERR,                (0x00000400)        /*!< Imprecise data bus error */
 .equiv SCB_CFSR_UNSTKERR,                   (0x00000800)        /*!< Unstacking error */
 .equiv SCB_CFSR_STKERR,                     (0x00001000)        /*!< Stacking error */
 .equiv SCB_CFSR_BFARVALID,                  (0x00008000)        /*!< Bus Fault Address Register address valid flag */
/*!< UFSR */
 .equiv SCB_CFSR_UNDEFINSTR,                 (0x00010000)        /*!< The processor attempt to execute an undefined instruction */
 .equiv SCB_CFSR_INVSTATE,                   (0x00020000)        /*!< Invalid combination of EPSR and instruction */
 .equiv SCB_CFSR_INVPC,                      (0x00040000)        /*!< Attempt to load EXC_RETURN into pc illegally */
 .equiv SCB_CFSR_NOCP,                       (0x00080000)        /*!< Attempt to use a coprocessor instruction */
 .equiv SCB_CFSR_UNALIGNED,                  (0x01000000)        /*!< Fault occurs when there is an attempt to make an unaligned memory access */
 .equiv SCB_CFSR_DIVBYZERO,                  (0x02000000)        /*!< Fault occurs when SDIV or DIV instruction is used with a divisor of 0 */

/*******************  Bit definition for SCB_HFSR register  *******************/
 .equiv SCB_HFSR_VECTTBL,                    (0x00000002)        /*!< Fault occurs because of vector table read on exception processing */
 .equiv SCB_HFSR_FORCED,                     (0x40000000)        /*!< Hard Fault activated when a configurable Fault was received and cannot activate */
 .equiv SCB_HFSR_DEBUGEVT,                   (0x80000000)        /*!< Fault related to debug */

/*******************  Bit definition for SCB_DFSR register  *******************/
 .equiv SCB_DFSR_HALTED,                     (0x01)               /*!< Halt request flag */
 .equiv SCB_DFSR_BKPT,                       (0x02)               /*!< BKPT flag */
 .equiv SCB_DFSR_DWTTRAP,                    (0x04)               /*!< Data Watchpoint and Trace (DWT) flag */
 .equiv SCB_DFSR_VCATCH,                     (0x08)               /*!< Vector catch flag */
 .equiv SCB_DFSR_EXTERNAL,                   (0x10)               /*!< External debug request flag */

/*******************  Bit definition for SCB_MMFAR register  ******************/
 .equiv SCB_MMFAR_ADDRESS,                   (0xFFFFFFFF)        /*!< Mem Manage fault address field */

/*******************  Bit definition for SCB_BFAR register  *******************/
 .equiv SCB_BFAR_ADDRESS,                    (0xFFFFFFFF)        /*!< Bus fault address field */

/*******************  Bit definition for SCB_afsr register  *******************/
 .equiv SCB_AFSR_IMPDEF,                     (0xFFFFFFFF)        /*!< Implementation defined */

/******************************************************************************/
/*                                                                            */
/*                    External Interrupt/Event Controller                     */
/*                                                                            */
/******************************************************************************/


/******************************************************************************/
/*                                                                            */
/*                             DMA Controller                                 */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for DMA_ISR register  ********************/
 .equiv DMA_ISR_GIF1,                        (0x00000001)        /*!< Channel 1 Global interrupt flag */
 .equiv DMA_ISR_TCIF1,                       (0x00000002)        /*!< Channel 1 Transfer Complete flag */
 .equiv DMA_ISR_HTIF1,                       (0x00000004)        /*!< Channel 1 Half Transfer flag */
 .equiv DMA_ISR_TEIF1,                       (0x00000008)        /*!< Channel 1 Transfer Error flag */
 .equiv DMA_ISR_GIF2,                        (0x00000010)        /*!< Channel 2 Global interrupt flag */
 .equiv DMA_ISR_TCIF2,                       (0x00000020)        /*!< Channel 2 Transfer Complete flag */
 .equiv DMA_ISR_HTIF2,                       (0x00000040)        /*!< Channel 2 Half Transfer flag */
 .equiv DMA_ISR_TEIF2,                       (0x00000080)        /*!< Channel 2 Transfer Error flag */
 .equiv DMA_ISR_GIF3,                        (0x00000100)        /*!< Channel 3 Global interrupt flag */
 .equiv DMA_ISR_TCIF3,                       (0x00000200)        /*!< Channel 3 Transfer Complete flag */
 .equiv DMA_ISR_HTIF3,                       (0x00000400)        /*!< Channel 3 Half Transfer flag */
 .equiv DMA_ISR_TEIF3,                       (0x00000800)        /*!< Channel 3 Transfer Error flag */
 .equiv DMA_ISR_GIF4,                        (0x00001000)        /*!< Channel 4 Global interrupt flag */
 .equiv DMA_ISR_TCIF4,                       (0x00002000)        /*!< Channel 4 Transfer Complete flag */
 .equiv DMA_ISR_HTIF4,                       (0x00004000)        /*!< Channel 4 Half Transfer flag */
 .equiv DMA_ISR_TEIF4,                       (0x00008000)        /*!< Channel 4 Transfer Error flag */
 .equiv DMA_ISR_GIF5,                        (0x00010000)        /*!< Channel 5 Global interrupt flag */
 .equiv DMA_ISR_TCIF5,                       (0x00020000)        /*!< Channel 5 Transfer Complete flag */
 .equiv DMA_ISR_HTIF5,                       (0x00040000)        /*!< Channel 5 Half Transfer flag */
 .equiv DMA_ISR_TEIF5,                       (0x00080000)        /*!< Channel 5 Transfer Error flag */
 .equiv DMA_ISR_GIF6,                        (0x00100000)        /*!< Channel 6 Global interrupt flag */
 .equiv DMA_ISR_TCIF6,                       (0x00200000)        /*!< Channel 6 Transfer Complete flag */
 .equiv DMA_ISR_HTIF6,                       (0x00400000)        /*!< Channel 6 Half Transfer flag */
 .equiv DMA_ISR_TEIF6,                       (0x00800000)        /*!< Channel 6 Transfer Error flag */
 .equiv DMA_ISR_GIF7,                        (0x01000000)        /*!< Channel 7 Global interrupt flag */
 .equiv DMA_ISR_TCIF7,                       (0x02000000)        /*!< Channel 7 Transfer Complete flag */
 .equiv DMA_ISR_HTIF7,                       (0x04000000)        /*!< Channel 7 Half Transfer flag */
 .equiv DMA_ISR_TEIF7,                       (0x08000000)        /*!< Channel 7 Transfer Error flag */

/*******************  Bit definition for DMA_IFCR register  *******************/
 .equiv DMA_IFCR_CGIF1,                      (0x00000001)        /*!< Channel 1 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF1,                     (0x00000002)        /*!< Channel 1 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF1,                     (0x00000004)        /*!< Channel 1 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF1,                     (0x00000008)        /*!< Channel 1 Transfer Error clear */
 .equiv DMA_IFCR_CGIF2,                      (0x00000010)        /*!< Channel 2 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF2,                     (0x00000020)        /*!< Channel 2 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF2,                     (0x00000040)        /*!< Channel 2 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF2,                     (0x00000080)        /*!< Channel 2 Transfer Error clear */
 .equiv DMA_IFCR_CGIF3,                      (0x00000100)        /*!< Channel 3 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF3,                     (0x00000200)        /*!< Channel 3 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF3,                     (0x00000400)        /*!< Channel 3 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF3,                     (0x00000800)        /*!< Channel 3 Transfer Error clear */
 .equiv DMA_IFCR_CGIF4,                      (0x00001000)        /*!< Channel 4 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF4,                     (0x00002000)        /*!< Channel 4 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF4,                     (0x00004000)        /*!< Channel 4 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF4,                     (0x00008000)        /*!< Channel 4 Transfer Error clear */
 .equiv DMA_IFCR_CGIF5,                      (0x00010000)        /*!< Channel 5 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF5,                     (0x00020000)        /*!< Channel 5 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF5,                     (0x00040000)        /*!< Channel 5 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF5,                     (0x00080000)        /*!< Channel 5 Transfer Error clear */
 .equiv DMA_IFCR_CGIF6,                      (0x00100000)        /*!< Channel 6 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF6,                     (0x00200000)        /*!< Channel 6 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF6,                     (0x00400000)        /*!< Channel 6 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF6,                     (0x00800000)        /*!< Channel 6 Transfer Error clear */
 .equiv DMA_IFCR_CGIF7,                      (0x01000000)        /*!< Channel 7 Global interrupt clear */
 .equiv DMA_IFCR_CTCIF7,                     (0x02000000)        /*!< Channel 7 Transfer Complete clear */
 .equiv DMA_IFCR_CHTIF7,                     (0x04000000)        /*!< Channel 7 Half Transfer clear */
 .equiv DMA_IFCR_CTEIF7,                     (0x08000000)        /*!< Channel 7 Transfer Error clear */

/*******************  Bit definition for DMA_CCR1 register  *******************/
 .equiv DMA_CCR1_EN,                         (0x0001)            /*!< Channel enable*/
 .equiv DMA_CCR1_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR1_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR1_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR1_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR1_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR1_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR1_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR1_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR1_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR1_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR1_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR1_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR1_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR1_PL,                         (0x3000)            /*!< PL[1:0] bits(Channel Priority level) */
 .equiv DMA_CCR1_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR1_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR1_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode */

/*******************  Bit definition for DMA_CCR2 register  *******************/
 .equiv DMA_CCR2_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR2_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR2_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR2_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR2_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR2_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR2_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR2_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR2_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR2_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR2_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR2_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR2_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR2_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR2_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR2_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR2_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR2_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode */

/*******************  Bit definition for DMA_CCR3 register  *******************/
 .equiv DMA_CCR3_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR3_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR3_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR3_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR3_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR3_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR3_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR3_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR3_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR3_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR3_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR3_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR3_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR3_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR3_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR3_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR3_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR3_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode */

/*!<******************  Bit definition for DMA_CCR4 register  *******************/
 .equiv DMA_CCR4_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR4_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR4_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR4_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR4_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR4_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR4_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR4_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR4_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR4_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR4_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR4_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR4_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR4_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR4_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR4_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR4_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR4_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode */

/******************  Bit definition for DMA_CCR5 register  *******************/
 .equiv DMA_CCR5_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR5_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR5_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR5_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR5_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR5_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR5_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR5_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR5_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR5_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR5_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR5_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR5_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR5_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR5_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR5_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR5_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR5_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode enable */

/*******************  Bit definition for DMA_CCR6 register  *******************/
 .equiv DMA_CCR6_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR6_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR6_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR6_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR6_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR6_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR6_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR6_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR6_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR6_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR6_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR6_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR6_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR6_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR6_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR6_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR6_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR6_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode */

/*******************  Bit definition for DMA_CCR7 register  *******************/
 .equiv DMA_CCR7_EN,                         (0x0001)            /*!< Channel enable */
 .equiv DMA_CCR7_TCIE,                       (0x0002)            /*!< Transfer complete interrupt enable */
 .equiv DMA_CCR7_HTIE,                       (0x0004)            /*!< Half Transfer interrupt enable */
 .equiv DMA_CCR7_TEIE,                       (0x0008)            /*!< Transfer error interrupt enable */
 .equiv DMA_CCR7_DIR,                        (0x0010)            /*!< Data transfer direction */
 .equiv DMA_CCR7_CIRC,                       (0x0020)            /*!< Circular mode */
 .equiv DMA_CCR7_PINC,                       (0x0040)            /*!< Peripheral increment mode */
 .equiv DMA_CCR7_MINC,                       (0x0080)            /*!< Memory increment mode */

 .equiv DMA_CCR7_PSIZE,                      (0x0300)            /*!< PSIZE[1:0] bits (Peripheral size) */
 .equiv DMA_CCR7_PSIZE_0,                    (0x0100)            /*!< Bit 0 */
 .equiv DMA_CCR7_PSIZE_1,                    (0x0200)            /*!< Bit 1 */

 .equiv DMA_CCR7_MSIZE,                      (0x0C00)            /*!< MSIZE[1:0] bits (Memory size) */
 .equiv DMA_CCR7_MSIZE_0,                    (0x0400)            /*!< Bit 0 */
 .equiv DMA_CCR7_MSIZE_1,                    (0x0800)            /*!< Bit 1 */

 .equiv DMA_CCR7_PL,                         (0x3000)            /*!< PL[1:0] bits (Channel Priority level) */
 .equiv DMA_CCR7_PL_0,                       (0x1000)            /*!< Bit 0 */
 .equiv DMA_CCR7_PL_1,                       (0x2000)            /*!< Bit 1 */

 .equiv DMA_CCR7_MEM2MEM,                    (0x4000)            /*!< Memory to memory mode enable */

/******************  Bit definition for DMA_CNDTR1 register  ******************/
 .equiv DMA_CNDTR1_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR2 register  ******************/
 .equiv DMA_CNDTR2_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR3 register  ******************/
 .equiv DMA_CNDTR3_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR4 register  ******************/
 .equiv DMA_CNDTR4_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR5 register  ******************/
 .equiv DMA_CNDTR5_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR6 register  ******************/
 .equiv DMA_CNDTR6_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CNDTR7 register  ******************/
 .equiv DMA_CNDTR7_NDT,                      (0xFFFF)            /*!< Number of data to Transfer */

/******************  Bit definition for DMA_CPAR1 register  *******************/
 .equiv DMA_CPAR1_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */

/******************  Bit definition for DMA_CPAR2 register  *******************/
 .equiv DMA_CPAR2_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */

/******************  Bit definition for DMA_CPAR3 register  *******************/
 .equiv DMA_CPAR3_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */


/******************  Bit definition for DMA_CPAR4 register  *******************/
 .equiv DMA_CPAR4_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */

/******************  Bit definition for DMA_CPAR5 register  *******************/
 .equiv DMA_CPAR5_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */

/******************  Bit definition for DMA_CPAR6 register  *******************/
 .equiv DMA_CPAR6_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */


/******************  Bit definition for DMA_CPAR7 register  *******************/
 .equiv DMA_CPAR7_PA,                        (0xFFFFFFFF)        /*!< Peripheral Address */

/******************  Bit definition for DMA_CMAR1 register  *******************/
 .equiv DMA_CMAR1_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************  Bit definition for DMA_CMAR2 register  *******************/
 .equiv DMA_CMAR2_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************  Bit definition for DMA_CMAR3 register  *******************/
 .equiv DMA_CMAR3_MA,                        (0xFFFFFFFF)        /*!< Memory Address */


/******************  Bit definition for DMA_CMAR4 register  *******************/
 .equiv DMA_CMAR4_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************  Bit definition for DMA_CMAR5 register  *******************/
 .equiv DMA_CMAR5_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************  Bit definition for DMA_CMAR6 register  *******************/
 .equiv DMA_CMAR6_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************  Bit definition for DMA_CMAR7 register  *******************/
 .equiv DMA_CMAR7_MA,                        (0xFFFFFFFF)        /*!< Memory Address */

/******************************************************************************/
/*                                                                            */
/*                        Analog to Digital Converter                         */
/*                                                                            */
/******************************************************************************/


/********************  Bit definition for ADC_SR register  ********************/
 .equiv ADC_SR_AWD,                          (0x01)               /*!< Analog watchdog flag */
 .equiv ADC_SR_EOC,                          (0x02)               /*!< End of conversion */
 .equiv ADC_SR_JEOC,                         (0x04)               /*!< Injected channel end of conversion */
 .equiv ADC_SR_JSTRT,                        (0x08)               /*!< Injected channel Start flag */
 .equiv ADC_SR_STRT,                         (0x10)               /*!< Regular channel Start flag */

/*******************  Bit definition for ADC_CR1 register  ********************/
 .equiv ADC_CR1_AWDCH,                       (0x0000001F)        /*!< AWDCH[4:0] bits (Analog watchdog channel select bits) */
 .equiv ADC_CR1_AWDCH_0,                     (0x00000001)        /*!< Bit 0 */
 .equiv ADC_CR1_AWDCH_1,                     (0x00000002)        /*!< Bit 1 */
 .equiv ADC_CR1_AWDCH_2,                     (0x00000004)        /*!< Bit 2 */
 .equiv ADC_CR1_AWDCH_3,                     (0x00000008)        /*!< Bit 3 */
 .equiv ADC_CR1_AWDCH_4,                     (0x00000010)        /*!< Bit 4 */

 .equiv ADC_CR1_EOCIE,                       (0x00000020)        /*!< Interrupt enable for EOC */
 .equiv ADC_CR1_AWDIE,                       (0x00000040)        /*!< Analog Watchdog interrupt enable */
 .equiv ADC_CR1_JEOCIE,                      (0x00000080)        /*!< Interrupt enable for injected channels */
 .equiv ADC_CR1_SCAN,                        (0x00000100)        /*!< Scan mode */
 .equiv ADC_CR1_AWDSGL,                      (0x00000200)        /*!< Enable the watchdog on a single channel in scan mode */
 .equiv ADC_CR1_JAUTO,                       (0x00000400)        /*!< Automatic injected group conversion */
 .equiv ADC_CR1_DISCEN,                      (0x00000800)        /*!< Discontinuous mode on regular channels */
 .equiv ADC_CR1_JDISCEN,                     (0x00001000)        /*!< Discontinuous mode on injected channels */

 .equiv ADC_CR1_DISCNUM,                     (0x0000E000)        /*!< DISCNUM[2:0] bits (Discontinuous mode channel count) */
 .equiv ADC_CR1_DISCNUM_0,                   (0x00002000)        /*!< Bit 0 */
 .equiv ADC_CR1_DISCNUM_1,                   (0x00004000)        /*!< Bit 1 */
 .equiv ADC_CR1_DISCNUM_2,                   (0x00008000)        /*!< Bit 2 */

 .equiv ADC_CR1_DUALMOD,                     (0x000F0000)        /*!< DUALMOD[3:0] bits (Dual mode selection) */
 .equiv ADC_CR1_DUALMOD_0,                   (0x00010000)        /*!< Bit 0 */
 .equiv ADC_CR1_DUALMOD_1,                   (0x00020000)        /*!< Bit 1 */
 .equiv ADC_CR1_DUALMOD_2,                   (0x00040000)        /*!< Bit 2 */
 .equiv ADC_CR1_DUALMOD_3,                   (0x00080000)        /*!< Bit 3 */

 .equiv ADC_CR1_JAWDEN,                      (0x00400000)        /*!< Analog watchdog enable on injected channels */
 .equiv ADC_CR1_AWDEN,                       (0x00800000)        /*!< Analog watchdog enable on regular channels */

  
/*******************  Bit definition for ADC_CR2 register  ********************/
 .equiv ADC_CR2_ADON,                        (0x00000001)        /*!< A/D Converter ON / OFF */
 .equiv ADC_CR2_CONT,                        (0x00000002)        /*!< Continuous Conversion */
 .equiv ADC_CR2_CAL,                         (0x00000004)        /*!< A/D Calibration */
 .equiv ADC_CR2_RSTCAL,                      (0x00000008)        /*!< Reset Calibration */
 .equiv ADC_CR2_DMA,                         (0x00000100)        /*!< Direct Memory access mode */
 .equiv ADC_CR2_ALIGN,                       (0x00000800)        /*!< Data Alignment */

 .equiv ADC_CR2_JEXTSEL,                     (0x00007000)        /*!< JEXTSEL[2:0] bits (External event select for injected group) */
 .equiv ADC_CR2_JEXTSEL_0,                   (0x00001000)        /*!< Bit 0 */
 .equiv ADC_CR2_JEXTSEL_1,                   (0x00002000)        /*!< Bit 1 */
 .equiv ADC_CR2_JEXTSEL_2,                   (0x00004000)        /*!< Bit 2 */

 .equiv ADC_CR2_JEXTTRIG,                    (0x00008000)        /*!< External Trigger Conversion mode for injected channels */

 .equiv ADC_CR2_EXTSEL,                      (0x000E0000)        /*!< EXTSEL[2:0] bits (External Event Select for regular group) */
 .equiv ADC_CR2_EXTSEL_0,                    (0x00020000)        /*!< Bit 0 */
 .equiv ADC_CR2_EXTSEL_1,                    (0x00040000)        /*!< Bit 1 */
 .equiv ADC_CR2_EXTSEL_2,                    (0x00080000)        /*!< Bit 2 */

 .equiv ADC_CR2_EXTTRIG,                     (0x00100000)        /*!< External Trigger Conversion mode for regular channels */
 .equiv ADC_CR2_JSWSTART,                    (0x00200000)        /*!< Start Conversion of injected channels */
 .equiv ADC_CR2_SWSTART,                     (0x00400000)        /*!< Start Conversion of regular channels */
 .equiv ADC_CR2_TSVREFE,                     (0x00800000)        /*!< Temperature Sensor and VREFINT Enable */

/******************  Bit definition for ADC_SMPR1 register  *******************/
 .equiv ADC_SMPR1_SMP10,                     (0x00000007)        /*!< SMP10[2:0] bits (Channel 10 Sample time selection) */
 .equiv ADC_SMPR1_SMP10_0,                   (0x00000001)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP10_1,                   (0x00000002)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP10_2,                   (0x00000004)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP11,                     (0x00000038)        /*!< SMP11[2:0] bits (Channel 11 Sample time selection) */
 .equiv ADC_SMPR1_SMP11_0,                   (0x00000008)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP11_1,                   (0x00000010)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP11_2,                   (0x00000020)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP12,                     (0x000001C0)        /*!< SMP12[2:0] bits (Channel 12 Sample time selection) */
 .equiv ADC_SMPR1_SMP12_0,                   (0x00000040)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP12_1,                   (0x00000080)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP12_2,                   (0x00000100)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP13,                     (0x00000E00)        /*!< SMP13[2:0] bits (Channel 13 Sample time selection) */
 .equiv ADC_SMPR1_SMP13_0,                   (0x00000200)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP13_1,                   (0x00000400)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP13_2,                   (0x00000800)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP14,                     (0x00007000)        /*!< SMP14[2:0] bits (Channel 14 Sample time selection) */
 .equiv ADC_SMPR1_SMP14_0,                   (0x00001000)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP14_1,                   (0x00002000)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP14_2,                   (0x00004000)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP15,                     (0x00038000)        /*!< SMP15[2:0] bits (Channel 15 Sample time selection) */
 .equiv ADC_SMPR1_SMP15_0,                   (0x00008000)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP15_1,                   (0x00010000)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP15_2,                   (0x00020000)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP16,                     (0x001C0000)        /*!< SMP16[2:0] bits (Channel 16 Sample time selection) */
 .equiv ADC_SMPR1_SMP16_0,                   (0x00040000)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP16_1,                   (0x00080000)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP16_2,                   (0x00100000)        /*!< Bit 2 */

 .equiv ADC_SMPR1_SMP17,                     (0x00E00000)        /*!< SMP17[2:0] bits (Channel 17 Sample time selection) */
 .equiv ADC_SMPR1_SMP17_0,                   (0x00200000)        /*!< Bit 0 */
 .equiv ADC_SMPR1_SMP17_1,                   (0x00400000)        /*!< Bit 1 */
 .equiv ADC_SMPR1_SMP17_2,                   (0x00800000)        /*!< Bit 2 */

/******************  Bit definition for ADC_SMPR2 register  *******************/
 .equiv ADC_SMPR2_SMP0,                      (0x00000007)        /*!< SMP0[2:0] bits (Channel 0 Sample time selection) */
 .equiv ADC_SMPR2_SMP0_0,                    (0x00000001)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP0_1,                    (0x00000002)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP0_2,                    (0x00000004)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP1,                      (0x00000038)        /*!< SMP1[2:0] bits (Channel 1 Sample time selection) */
 .equiv ADC_SMPR2_SMP1_0,                    (0x00000008)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP1_1,                    (0x00000010)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP1_2,                    (0x00000020)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP2,                      (0x000001C0)        /*!< SMP2[2:0] bits (Channel 2 Sample time selection) */
 .equiv ADC_SMPR2_SMP2_0,                    (0x00000040)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP2_1,                    (0x00000080)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP2_2,                    (0x00000100)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP3,                      (0x00000E00)        /*!< SMP3[2:0] bits (Channel 3 Sample time selection) */
 .equiv ADC_SMPR2_SMP3_0,                    (0x00000200)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP3_1,                    (0x00000400)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP3_2,                    (0x00000800)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP4,                      (0x00007000)        /*!< SMP4[2:0] bits (Channel 4 Sample time selection) */
 .equiv ADC_SMPR2_SMP4_0,                    (0x00001000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP4_1,                    (0x00002000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP4_2,                    (0x00004000)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP5,                      (0x00038000)        /*!< SMP5[2:0] bits (Channel 5 Sample time selection) */
 .equiv ADC_SMPR2_SMP5_0,                    (0x00008000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP5_1,                    (0x00010000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP5_2,                    (0x00020000)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP6,                      (0x001C0000)        /*!< SMP6[2:0] bits (Channel 6 Sample time selection) */
 .equiv ADC_SMPR2_SMP6_0,                    (0x00040000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP6_1,                    (0x00080000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP6_2,                    (0x00100000)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP7,                      (0x00E00000)        /*!< SMP7[2:0] bits (Channel 7 Sample time selection) */
 .equiv ADC_SMPR2_SMP7_0,                    (0x00200000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP7_1,                    (0x00400000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP7_2,                    (0x00800000)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP8,                      (0x07000000)        /*!< SMP8[2:0] bits (Channel 8 Sample time selection) */
 .equiv ADC_SMPR2_SMP8_0,                    (0x01000000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP8_1,                    (0x02000000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP8_2,                    (0x04000000)        /*!< Bit 2 */

 .equiv ADC_SMPR2_SMP9,                      (0x38000000)        /*!< SMP9[2:0] bits (Channel 9 Sample time selection) */
 .equiv ADC_SMPR2_SMP9_0,                    (0x08000000)        /*!< Bit 0 */
 .equiv ADC_SMPR2_SMP9_1,                    (0x10000000)        /*!< Bit 1 */
 .equiv ADC_SMPR2_SMP9_2,                    (0x20000000)        /*!< Bit 2 */

/******************  Bit definition for ADC_JOFR1 register  *******************/
 .equiv ADC_JOFR1_JOFFSET1,                  (0x0FFF)            /*!< Data offset for injected channel 1 */

/******************  Bit definition for ADC_JOFR2 register  *******************/
 .equiv ADC_JOFR2_JOFFSET2,                  (0x0FFF)            /*!< Data offset for injected channel 2 */

/******************  Bit definition for ADC_JOFR3 register  *******************/
 .equiv ADC_JOFR3_JOFFSET3,                  (0x0FFF)            /*!< Data offset for injected channel 3 */

/******************  Bit definition for ADC_JOFR4 register  *******************/
 .equiv ADC_JOFR4_JOFFSET4,                  (0x0FFF)            /*!< Data offset for injected channel 4 */

/*******************  Bit definition for ADC_HTR register  ********************/
 .equiv ADC_HTR_HT,                          (0x0FFF)            /*!< Analog watchdog high threshold */

/*******************  Bit definition for ADC_LTR register  ********************/
 .equiv ADC_LTR_LT,                          (0x0FFF)            /*!< Analog watchdog low threshold */

/*******************  Bit definition for ADC_SQR1 register  *******************/
 .equiv ADC_SQR1_SQ13,                       (0x0000001F)        /*!< SQ13[4:0] bits (13th conversion in regular sequence) */
 .equiv ADC_SQR1_SQ13_0,                     (0x00000001)        /*!< Bit 0 */
 .equiv ADC_SQR1_SQ13_1,                     (0x00000002)        /*!< Bit 1 */
 .equiv ADC_SQR1_SQ13_2,                     (0x00000004)        /*!< Bit 2 */
 .equiv ADC_SQR1_SQ13_3,                     (0x00000008)        /*!< Bit 3 */
 .equiv ADC_SQR1_SQ13_4,                     (0x00000010)        /*!< Bit 4 */

 .equiv ADC_SQR1_SQ14,                       (0x000003E0)        /*!< SQ14[4:0] bits (14th conversion in regular sequence) */
 .equiv ADC_SQR1_SQ14_0,                     (0x00000020)        /*!< Bit 0 */
 .equiv ADC_SQR1_SQ14_1,                     (0x00000040)        /*!< Bit 1 */
 .equiv ADC_SQR1_SQ14_2,                     (0x00000080)        /*!< Bit 2 */
 .equiv ADC_SQR1_SQ14_3,                     (0x00000100)        /*!< Bit 3 */
 .equiv ADC_SQR1_SQ14_4,                     (0x00000200)        /*!< Bit 4 */

 .equiv ADC_SQR1_SQ15,                       (0x00007C00)        /*!< SQ15[4:0] bits (15th conversion in regular sequence) */
 .equiv ADC_SQR1_SQ15_0,                     (0x00000400)        /*!< Bit 0 */
 .equiv ADC_SQR1_SQ15_1,                     (0x00000800)        /*!< Bit 1 */
 .equiv ADC_SQR1_SQ15_2,                     (0x00001000)        /*!< Bit 2 */
 .equiv ADC_SQR1_SQ15_3,                     (0x00002000)        /*!< Bit 3 */
 .equiv ADC_SQR1_SQ15_4,                     (0x00004000)        /*!< Bit 4 */

 .equiv ADC_SQR1_SQ16,                       (0x000F8000)        /*!< SQ16[4:0] bits (16th conversion in regular sequence) */
 .equiv ADC_SQR1_SQ16_0,                     (0x00008000)        /*!< Bit 0 */
 .equiv ADC_SQR1_SQ16_1,                     (0x00010000)        /*!< Bit 1 */
 .equiv ADC_SQR1_SQ16_2,                     (0x00020000)        /*!< Bit 2 */
 .equiv ADC_SQR1_SQ16_3,                     (0x00040000)        /*!< Bit 3 */
 .equiv ADC_SQR1_SQ16_4,                     (0x00080000)        /*!< Bit 4 */

 .equiv ADC_SQR1_L,                          (0x00F00000)        /*!< L[3:0] bits (Regular channel sequence length) */
 .equiv ADC_SQR1_L_0,                        (0x00100000)        /*!< Bit 0 */
 .equiv ADC_SQR1_L_1,                        (0x00200000)        /*!< Bit 1 */
 .equiv ADC_SQR1_L_2,                        (0x00400000)        /*!< Bit 2 */
 .equiv ADC_SQR1_L_3,                        (0x00800000)        /*!< Bit 3 */

/*******************  Bit definition for ADC_SQR2 register  *******************/
 .equiv ADC_SQR2_SQ7,                        (0x0000001F)        /*!< SQ7[4:0] bits (7th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ7_0,                      (0x00000001)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ7_1,                      (0x00000002)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ7_2,                      (0x00000004)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ7_3,                      (0x00000008)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ7_4,                      (0x00000010)        /*!< Bit 4 */

 .equiv ADC_SQR2_SQ8,                        (0x000003E0)        /*!< SQ8[4:0] bits (8th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ8_0,                      (0x00000020)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ8_1,                      (0x00000040)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ8_2,                      (0x00000080)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ8_3,                      (0x00000100)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ8_4,                      (0x00000200)        /*!< Bit 4 */

 .equiv ADC_SQR2_SQ9,                        (0x00007C00)        /*!< SQ9[4:0] bits (9th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ9_0,                      (0x00000400)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ9_1,                      (0x00000800)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ9_2,                      (0x00001000)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ9_3,                      (0x00002000)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ9_4,                      (0x00004000)        /*!< Bit 4 */

 .equiv ADC_SQR2_SQ10,                       (0x000F8000)        /*!< SQ10[4:0] bits (10th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ10_0,                     (0x00008000)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ10_1,                     (0x00010000)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ10_2,                     (0x00020000)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ10_3,                     (0x00040000)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ10_4,                     (0x00080000)        /*!< Bit 4 */

 .equiv ADC_SQR2_SQ11,                       (0x01F00000)        /*!< SQ11[4:0] bits (11th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ11_0,                     (0x00100000)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ11_1,                     (0x00200000)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ11_2,                     (0x00400000)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ11_3,                     (0x00800000)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ11_4,                     (0x01000000)        /*!< Bit 4 */

 .equiv ADC_SQR2_SQ12,                       (0x3E000000)        /*!< SQ12[4:0] bits (12th conversion in regular sequence) */
 .equiv ADC_SQR2_SQ12_0,                     (0x02000000)        /*!< Bit 0 */
 .equiv ADC_SQR2_SQ12_1,                     (0x04000000)        /*!< Bit 1 */
 .equiv ADC_SQR2_SQ12_2,                     (0x08000000)        /*!< Bit 2 */
 .equiv ADC_SQR2_SQ12_3,                     (0x10000000)        /*!< Bit 3 */
 .equiv ADC_SQR2_SQ12_4,                     (0x20000000)        /*!< Bit 4 */

/*******************  Bit definition for ADC_SQR3 register  *******************/
 .equiv ADC_SQR3_SQ1,                        (0x0000001F)        /*!< SQ1[4:0] bits (1st conversion in regular sequence) */
 .equiv ADC_SQR3_SQ1_0,                      (0x00000001)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ1_1,                      (0x00000002)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ1_2,                      (0x00000004)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ1_3,                      (0x00000008)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ1_4,                      (0x00000010)        /*!< Bit 4 */

 .equiv ADC_SQR3_SQ2,                        (0x000003E0)        /*!< SQ2[4:0] bits (2nd conversion in regular sequence) */
 .equiv ADC_SQR3_SQ2_0,                      (0x00000020)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ2_1,                      (0x00000040)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ2_2,                      (0x00000080)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ2_3,                      (0x00000100)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ2_4,                      (0x00000200)        /*!< Bit 4 */

 .equiv ADC_SQR3_SQ3,                        (0x00007C00)        /*!< SQ3[4:0] bits (3rd conversion in regular sequence) */
 .equiv ADC_SQR3_SQ3_0,                      (0x00000400)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ3_1,                      (0x00000800)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ3_2,                      (0x00001000)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ3_3,                      (0x00002000)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ3_4,                      (0x00004000)        /*!< Bit 4 */

 .equiv ADC_SQR3_SQ4,                        (0x000F8000)        /*!< SQ4[4:0] bits (4th conversion in regular sequence) */
 .equiv ADC_SQR3_SQ4_0,                      (0x00008000)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ4_1,                      (0x00010000)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ4_2,                      (0x00020000)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ4_3,                      (0x00040000)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ4_4,                      (0x00080000)        /*!< Bit 4 */

 .equiv ADC_SQR3_SQ5,                        (0x01F00000)        /*!< SQ5[4:0] bits (5th conversion in regular sequence) */
 .equiv ADC_SQR3_SQ5_0,                      (0x00100000)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ5_1,                      (0x00200000)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ5_2,                      (0x00400000)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ5_3,                      (0x00800000)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ5_4,                      (0x01000000)        /*!< Bit 4 */

 .equiv ADC_SQR3_SQ6,                        (0x3E000000)        /*!< SQ6[4:0] bits (6th conversion in regular sequence) */
 .equiv ADC_SQR3_SQ6_0,                      (0x02000000)        /*!< Bit 0 */
 .equiv ADC_SQR3_SQ6_1,                      (0x04000000)        /*!< Bit 1 */
 .equiv ADC_SQR3_SQ6_2,                      (0x08000000)        /*!< Bit 2 */
 .equiv ADC_SQR3_SQ6_3,                      (0x10000000)        /*!< Bit 3 */
 .equiv ADC_SQR3_SQ6_4,                      (0x20000000)        /*!< Bit 4 */

/*******************  Bit definition for ADC_JSQR register  *******************/
 .equiv ADC_JSQR_JSQ1,                       (0x0000001F)        /*!< JSQ1[4:0] bits (1st conversion in injected sequence) */  
 .equiv ADC_JSQR_JSQ1_0,                     (0x00000001)        /*!< Bit 0 */
 .equiv ADC_JSQR_JSQ1_1,                     (0x00000002)        /*!< Bit 1 */
 .equiv ADC_JSQR_JSQ1_2,                     (0x00000004)        /*!< Bit 2 */
 .equiv ADC_JSQR_JSQ1_3,                     (0x00000008)        /*!< Bit 3 */
 .equiv ADC_JSQR_JSQ1_4,                     (0x00000010)        /*!< Bit 4 */

 .equiv ADC_JSQR_JSQ2,                       (0x000003E0)        /*!< JSQ2[4:0] bits (2nd conversion in injected sequence) */
 .equiv ADC_JSQR_JSQ2_0,                     (0x00000020)        /*!< Bit 0 */
 .equiv ADC_JSQR_JSQ2_1,                     (0x00000040)        /*!< Bit 1 */
 .equiv ADC_JSQR_JSQ2_2,                     (0x00000080)        /*!< Bit 2 */
 .equiv ADC_JSQR_JSQ2_3,                     (0x00000100)        /*!< Bit 3 */
 .equiv ADC_JSQR_JSQ2_4,                     (0x00000200)        /*!< Bit 4 */

 .equiv ADC_JSQR_JSQ3,                       (0x00007C00)        /*!< JSQ3[4:0] bits (3rd conversion in injected sequence) */
 .equiv ADC_JSQR_JSQ3_0,                     (0x00000400)        /*!< Bit 0 */
 .equiv ADC_JSQR_JSQ3_1,                     (0x00000800)        /*!< Bit 1 */
 .equiv ADC_JSQR_JSQ3_2,                     (0x00001000)        /*!< Bit 2 */
 .equiv ADC_JSQR_JSQ3_3,                     (0x00002000)        /*!< Bit 3 */
 .equiv ADC_JSQR_JSQ3_4,                     (0x00004000)        /*!< Bit 4 */

 .equiv ADC_JSQR_JSQ4,                       (0x000F8000)        /*!< JSQ4[4:0] bits (4th conversion in injected sequence) */
 .equiv ADC_JSQR_JSQ4_0,                     (0x00008000)        /*!< Bit 0 */
 .equiv ADC_JSQR_JSQ4_1,                     (0x00010000)        /*!< Bit 1 */
 .equiv ADC_JSQR_JSQ4_2,                     (0x00020000)        /*!< Bit 2 */
 .equiv ADC_JSQR_JSQ4_3,                     (0x00040000)        /*!< Bit 3 */
 .equiv ADC_JSQR_JSQ4_4,                     (0x00080000)        /*!< Bit 4 */

 .equiv ADC_JSQR_JL,                         (0x00300000)        /*!< JL[1:0] bits (Injected Sequence length) */
 .equiv ADC_JSQR_JL_0,                       (0x00100000)        /*!< Bit 0 */
 .equiv ADC_JSQR_JL_1,                       (0x00200000)        /*!< Bit 1 */

/*******************  Bit definition for ADC_JDR1 register  *******************/
 .equiv ADC_JDR1_JDATA,                      (0xFFFF)            /*!< Injected data */

/*******************  Bit definition for ADC_JDR2 register  *******************/
 .equiv ADC_JDR2_JDATA,                      (0xFFFF)            /*!< Injected data */

/*******************  Bit definition for ADC_JDR3 register  *******************/
 .equiv ADC_JDR3_JDATA,                      (0xFFFF)            /*!< Injected data */

/*******************  Bit definition for ADC_JDR4 register  *******************/
 .equiv ADC_JDR4_JDATA,                      (0xFFFF)            /*!< Injected data */

/********************  Bit definition for ADC_DR register  ********************/
 .equiv ADC_DR_DATA,                         (0x0000FFFF)        /*!< Regular data */
 .equiv ADC_DR_ADC2DATA,                     (0xFFFF0000)        /*!< ADC2 data */

/******************************************************************************/
/*                                                                            */
/*                      Digital to Analog Converter                           */
/*                                                                            */
/******************************************************************************/


/********************  Bit definition for DAC_CR register  ********************/
 .equiv DAC_CR_EN1,                          (0x00000001)        /*!< DAC channel1 enable */
 .equiv DAC_CR_BOFF1,                        (0x00000002)        /*!< DAC channel1 output buffer disable */
 .equiv DAC_CR_TEN1,                         (0x00000004)        /*!< DAC channel1 Trigger enable */

 .equiv DAC_CR_TSEL1,                        (0x00000038)        /*!< TSEL1[2:0] (DAC channel1 Trigger selection) */
 .equiv DAC_CR_TSEL1_0,                      (0x00000008)        /*!< Bit 0 */
 .equiv DAC_CR_TSEL1_1,                      (0x00000010)        /*!< Bit 1 */
 .equiv DAC_CR_TSEL1_2,                      (0x00000020)        /*!< Bit 2 */

 .equiv DAC_CR_WAVE1,                        (0x000000C0)        /*!< WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable) */
 .equiv DAC_CR_WAVE1_0,                      (0x00000040)        /*!< Bit 0 */
 .equiv DAC_CR_WAVE1_1,                      (0x00000080)        /*!< Bit 1 */

 .equiv DAC_CR_MAMP1,                        (0x00000F00)        /*!< MAMP1[3:0] (DAC channel1 Mask/Amplitude selector) */
 .equiv DAC_CR_MAMP1_0,                      (0x00000100)        /*!< Bit 0 */
 .equiv DAC_CR_MAMP1_1,                      (0x00000200)        /*!< Bit 1 */
 .equiv DAC_CR_MAMP1_2,                      (0x00000400)        /*!< Bit 2 */
 .equiv DAC_CR_MAMP1_3,                      (0x00000800)        /*!< Bit 3 */

 .equiv DAC_CR_DMAEN1,                       (0x00001000)        /*!< DAC channel1 DMA enable */
 .equiv DAC_CR_EN2,                          (0x00010000)        /*!< DAC channel2 enable */
 .equiv DAC_CR_BOFF2,                        (0x00020000)        /*!< DAC channel2 output buffer disable */
 .equiv DAC_CR_TEN2,                         (0x00040000)        /*!< DAC channel2 Trigger enable */

 .equiv DAC_CR_TSEL2,                        (0x00380000)        /*!< TSEL2[2:0] (DAC channel2 Trigger selection) */
 .equiv DAC_CR_TSEL2_0,                      (0x00080000)        /*!< Bit 0 */
 .equiv DAC_CR_TSEL2_1,                      (0x00100000)        /*!< Bit 1 */
 .equiv DAC_CR_TSEL2_2,                      (0x00200000)        /*!< Bit 2 */

 .equiv DAC_CR_WAVE2,                        (0x00C00000)        /*!< WAVE2[1:0] (DAC channel2 noise/triangle wave generation enable) */
 .equiv DAC_CR_WAVE2_0,                      (0x00400000)        /*!< Bit 0 */
 .equiv DAC_CR_WAVE2_1,                      (0x00800000)        /*!< Bit 1 */

 .equiv DAC_CR_MAMP2,                        (0x0F000000)        /*!< MAMP2[3:0] (DAC channel2 Mask/Amplitude selector) */
 .equiv DAC_CR_MAMP2_0,                      (0x01000000)        /*!< Bit 0 */
 .equiv DAC_CR_MAMP2_1,                      (0x02000000)        /*!< Bit 1 */
 .equiv DAC_CR_MAMP2_2,                      (0x04000000)        /*!< Bit 2 */
 .equiv DAC_CR_MAMP2_3,                      (0x08000000)        /*!< Bit 3 */

 .equiv DAC_CR_DMAEN2,                       (0x10000000)        /*!< DAC channel2 DMA enabled */


/*****************  Bit definition for DAC_SWTRIGR register  ******************/
 .equiv DAC_SWTRIGR_SWTRIG1,                 (0x01)               /*!< DAC channel1 software trigger */
 .equiv DAC_SWTRIGR_SWTRIG2,                 (0x02)               /*!< DAC channel2 software trigger */

/*****************  Bit definition for DAC_DHR12R1 register  ******************/
 .equiv DAC_DHR12R1_DACC1DHR,                (0x0FFF)            /*!< DAC channel1 12-bit Right aligned data */

/*****************  Bit definition for DAC_DHR12L1 register  ******************/
 .equiv DAC_DHR12L1_DACC1DHR,                (0xFFF0)            /*!< DAC channel1 12-bit Left aligned data */

/******************  Bit definition for DAC_DHR8R1 register  ******************/
 .equiv DAC_DHR8R1_DACC1DHR,                 (0xFF)               /*!< DAC channel1 8-bit Right aligned data */

/*****************  Bit definition for DAC_DHR12R2 register  ******************/
 .equiv DAC_DHR12R2_DACC2DHR,                (0x0FFF)            /*!< DAC channel2 12-bit Right aligned data */

/*****************  Bit definition for DAC_DHR12L2 register  ******************/
 .equiv DAC_DHR12L2_DACC2DHR,                (0xFFF0)            /*!< DAC channel2 12-bit Left aligned data */

/******************  Bit definition for DAC_DHR8R2 register  ******************/
 .equiv DAC_DHR8R2_DACC2DHR,                 (0xFF)               /*!< DAC channel2 8-bit Right aligned data */

/*****************  Bit definition for DAC_DHR12RD register  ******************/
 .equiv DAC_DHR12RD_DACC1DHR,                (0x00000FFF)        /*!< DAC channel1 12-bit Right aligned data */
 .equiv DAC_DHR12RD_DACC2DHR,                (0x0FFF0000)        /*!< DAC channel2 12-bit Right aligned data */

/*****************  Bit definition for DAC_DHR12LD register  ******************/
 .equiv DAC_DHR12LD_DACC1DHR,                (0x0000FFF0)        /*!< DAC channel1 12-bit Left aligned data */
 .equiv DAC_DHR12LD_DACC2DHR,                (0xFFF00000)        /*!< DAC channel2 12-bit Left aligned data */

/******************  Bit definition for DAC_DHR8RD register  ******************/
 .equiv DAC_DHR8RD_DACC1DHR,                 (0x00FF)            /*!< DAC channel1 8-bit Right aligned data */
 .equiv DAC_DHR8RD_DACC2DHR,                 (0xFF00)            /*!< DAC channel2 8-bit Right aligned data */

/*******************  Bit definition for DAC_DOR1 register  *******************/
 .equiv DAC_DOR1_DACC1DOR,                   (0x0FFF)            /*!< DAC channel1 data output */

/*******************  Bit definition for DAC_DOR2 register  *******************/
 .equiv DAC_DOR2_DACC2DOR,                   (0x0FFF)            /*!< DAC channel2 data output */

/********************  Bit definition for DAC_SR register  ********************/
 .equiv DAC_SR_DMAUDR1,                      (0x00002000)        /*!< DAC channel1 DMA underrun flag */
 .equiv DAC_SR_DMAUDR2,                      (0x20000000)        /*!< DAC channel2 DMA underrun flag */

/******************************************************************************/
/*                                                                            */
/*                                    CEC                                     */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for CEC_CFGR register  ******************/
 .equiv CEC_CFGR_PE,              (0x0001)     /*!<  Peripheral Enable */
 .equiv CEC_CFGR_IE,              (0x0002)     /*!<  Interrupt Enable */
 .equiv CEC_CFGR_BTEM,            (0x0004)     /*!<  Bit Timing Error Mode */
 .equiv CEC_CFGR_BPEM,            (0x0008)     /*!<  Bit Period Error Mode */

/********************  Bit definition for CEC_OAR register  ******************/
 .equiv CEC_OAR_OA,               (0x000F)     /*!<  OA[3:0]: Own Address */
 .equiv CEC_OAR_OA_0,             (0x0001)     /*!<  Bit 0 */
 .equiv CEC_OAR_OA_1,             (0x0002)     /*!<  Bit 1 */
 .equiv CEC_OAR_OA_2,             (0x0004)     /*!<  Bit 2 */
 .equiv CEC_OAR_OA_3,             (0x0008)     /*!<  Bit 3 */

/********************  Bit definition for CEC_PRES register  ******************/
 .equiv CEC_PRES_PRES,            (0x3FFF)   /*!<  Prescaler Counter Value */

/********************  Bit definition for CEC_ESR register  ******************/
 .equiv CEC_ESR_BTE,              (0x0001)     /*!<  Bit Timing Error */
 .equiv CEC_ESR_BPE,              (0x0002)     /*!<  Bit Period Error */
 .equiv CEC_ESR_RBTFE,            (0x0004)     /*!<  Rx Block Transfer Finished Error */
 .equiv CEC_ESR_SBE,              (0x0008)     /*!<  Start Bit Error */
 .equiv CEC_ESR_ACKE,             (0x0010)     /*!<  Block Acknowledge Error */
 .equiv CEC_ESR_LINE,             (0x0020)     /*!<  Line Error */
 .equiv CEC_ESR_TBTFE,            (0x0040)     /*!<  Tx Block Transfer Finished Error */

/********************  Bit definition for CEC_CSR register  ******************/
 .equiv CEC_CSR_TSOM,             (0x0001)     /*!<  Tx Start Of Message */
 .equiv CEC_CSR_TEOM,             (0x0002)     /*!<  Tx End Of Message */
 .equiv CEC_CSR_TERR,             (0x0004)     /*!<  Tx Error */
 .equiv CEC_CSR_TBTRF,            (0x0008)     /*!<  Tx Byte Transfer Request or Block Transfer Finished */
 .equiv CEC_CSR_RSOM,             (0x0010)     /*!<  Rx Start Of Message */
 .equiv CEC_CSR_REOM,             (0x0020)     /*!<  Rx End Of Message */
 .equiv CEC_CSR_RERR,             (0x0040)     /*!<  Rx Error */
 .equiv CEC_CSR_RBTF,             (0x0080)     /*!<  Rx Block Transfer Finished */

/********************  Bit definition for CEC_TXD register  ******************/
 .equiv CEC_TXD_TXD,              (0x00FF)     /*!<  Tx Data register */

/********************  Bit definition for CEC_RXD register  ******************/
 .equiv CEC_RXD_RXD,              (0x00FF)     /*!<  Rx Data register */

/******************************************************************************/
/*                                                                            */
/*                                    TIM                                     */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for TIM_CR1 register  ********************/
 .equiv TIM_CR1_CEN,                         (0x0001)            /*!< Counter enable */
 .equiv TIM_CR1_UDIS,                        (0x0002)            /*!< Update disable */
 .equiv TIM_CR1_URS,                         (0x0004)            /*!< Update request source */
 .equiv TIM_CR1_OPM,                         (0x0008)            /*!< One pulse mode */
 .equiv TIM_CR1_DIR,                         (0x0010)            /*!< Direction */

 .equiv TIM_CR1_CMS,                         (0x0060)            /*!< CMS[1:0] bits (Center-aligned mode selection) */
 .equiv TIM_CR1_CMS_0,                       (0x0020)            /*!< Bit 0 */
 .equiv TIM_CR1_CMS_1,                       (0x0040)            /*!< Bit 1 */

 .equiv TIM_CR1_ARPE,                        (0x0080)            /*!< Auto-reload preload enable */

 .equiv TIM_CR1_CKD,                         (0x0300)            /*!< CKD[1:0] bits (clock division) */
 .equiv TIM_CR1_CKD_0,                       (0x0100)            /*!< Bit 0 */
 .equiv TIM_CR1_CKD_1,                       (0x0200)            /*!< Bit 1 */

/*******************  Bit definition for TIM_CR2 register  ********************/
 .equiv TIM_CR2_CCPC,                        (0x0001)            /*!< Capture/Compare Preloaded Control */
 .equiv TIM_CR2_CCUS,                        (0x0004)            /*!< Capture/Compare Control Update Selection */
 .equiv TIM_CR2_CCDS,                        (0x0008)            /*!< Capture/Compare DMA Selection */

 .equiv TIM_CR2_MMS,                         (0x0070)            /*!< MMS[2:0] bits (Master Mode Selection) */
 .equiv TIM_CR2_MMS_0,                       (0x0010)            /*!< Bit 0 */
 .equiv TIM_CR2_MMS_1,                       (0x0020)            /*!< Bit 1 */
 .equiv TIM_CR2_MMS_2,                       (0x0040)            /*!< Bit 2 */

 .equiv TIM_CR2_TI1S,                        (0x0080)            /*!< TI1 Selection */
 .equiv TIM_CR2_OIS1,                        (0x0100)            /*!< Output Idle state 1 (OC1 output) */
 .equiv TIM_CR2_OIS1N,                       (0x0200)            /*!< Output Idle state 1 (OC1N output) */
 .equiv TIM_CR2_OIS2,                        (0x0400)            /*!< Output Idle state 2 (OC2 output) */
 .equiv TIM_CR2_OIS2N,                       (0x0800)            /*!< Output Idle state 2 (OC2N output) */
 .equiv TIM_CR2_OIS3,                        (0x1000)            /*!< Output Idle state 3 (OC3 output) */
 .equiv TIM_CR2_OIS3N,                       (0x2000)            /*!< Output Idle state 3 (OC3N output) */
 .equiv TIM_CR2_OIS4,                        (0x4000)            /*!< Output Idle state 4 (OC4 output) */

/*******************  Bit definition for TIM_SMCR register  *******************/
 .equiv TIM_SMCR_SMS,                        (0x0007)            /*!< SMS[2:0] bits (Slave mode selection) */
 .equiv TIM_SMCR_SMS_0,                      (0x0001)            /*!< Bit 0 */
 .equiv TIM_SMCR_SMS_1,                      (0x0002)            /*!< Bit 1 */
 .equiv TIM_SMCR_SMS_2,                      (0x0004)            /*!< Bit 2 */

 .equiv TIM_SMCR_TS,                         (0x0070)            /*!< TS[2:0] bits (Trigger selection) */
 .equiv TIM_SMCR_TS_0,                       (0x0010)            /*!< Bit 0 */
 .equiv TIM_SMCR_TS_1,                       (0x0020)            /*!< Bit 1 */
 .equiv TIM_SMCR_TS_2,                       (0x0040)            /*!< Bit 2 */

 .equiv TIM_SMCR_MSM,                        (0x0080)            /*!< Master/slave mode */

 .equiv TIM_SMCR_ETF,                        (0x0F00)            /*!< ETF[3:0] bits (External trigger filter) */
 .equiv TIM_SMCR_ETF_0,                      (0x0100)            /*!< Bit 0 */
 .equiv TIM_SMCR_ETF_1,                      (0x0200)            /*!< Bit 1 */
 .equiv TIM_SMCR_ETF_2,                      (0x0400)            /*!< Bit 2 */
 .equiv TIM_SMCR_ETF_3,                      (0x0800)            /*!< Bit 3 */

 .equiv TIM_SMCR_ETPS,                       (0x3000)            /*!< ETPS[1:0] bits (External trigger prescaler) */
 .equiv TIM_SMCR_ETPS_0,                     (0x1000)            /*!< Bit 0 */
 .equiv TIM_SMCR_ETPS_1,                     (0x2000)            /*!< Bit 1 */

 .equiv TIM_SMCR_ECE,                        (0x4000)            /*!< External clock enable */
 .equiv TIM_SMCR_ETP,                        (0x8000)            /*!< External trigger polarity */

/*******************  Bit definition for TIM_DIER register  *******************/
 .equiv TIM_DIER_UIE,                        (0x0001)            /*!< Update interrupt enable */
 .equiv TIM_DIER_CC1IE,                      (0x0002)            /*!< Capture/Compare 1 interrupt enable */
 .equiv TIM_DIER_CC2IE,                      (0x0004)            /*!< Capture/Compare 2 interrupt enable */
 .equiv TIM_DIER_CC3IE,                      (0x0008)            /*!< Capture/Compare 3 interrupt enable */
 .equiv TIM_DIER_CC4IE,                      (0x0010)            /*!< Capture/Compare 4 interrupt enable */
 .equiv TIM_DIER_COMIE,                      (0x0020)            /*!< COM interrupt enable */
 .equiv TIM_DIER_TIE,                        (0x0040)            /*!< Trigger interrupt enable */
 .equiv TIM_DIER_BIE,                        (0x0080)            /*!< Break interrupt enable */
 .equiv TIM_DIER_UDE,                        (0x0100)            /*!< Update DMA request enable */
 .equiv TIM_DIER_CC1DE,                      (0x0200)            /*!< Capture/Compare 1 DMA request enable */
 .equiv TIM_DIER_CC2DE,                      (0x0400)            /*!< Capture/Compare 2 DMA request enable */
 .equiv TIM_DIER_CC3DE,                      (0x0800)            /*!< Capture/Compare 3 DMA request enable */
 .equiv TIM_DIER_CC4DE,                      (0x1000)            /*!< Capture/Compare 4 DMA request enable */
 .equiv TIM_DIER_COMDE,                      (0x2000)            /*!< COM DMA request enable */
 .equiv TIM_DIER_TDE,                        (0x4000)            /*!< Trigger DMA request enable */

/********************  Bit definition for TIM_SR register  ********************/
 .equiv TIM_SR_UIF,                          (0x0001)            /*!< Update interrupt Flag */
 .equiv TIM_SR_CC1IF,                        (0x0002)            /*!< Capture/Compare 1 interrupt Flag */
 .equiv TIM_SR_CC2IF,                        (0x0004)            /*!< Capture/Compare 2 interrupt Flag */
 .equiv TIM_SR_CC3IF,                        (0x0008)            /*!< Capture/Compare 3 interrupt Flag */
 .equiv TIM_SR_CC4IF,                        (0x0010)            /*!< Capture/Compare 4 interrupt Flag */
 .equiv TIM_SR_COMIF,                        (0x0020)            /*!< COM interrupt Flag */
 .equiv TIM_SR_TIF,                          (0x0040)            /*!< Trigger interrupt Flag */
 .equiv TIM_SR_BIF,                          (0x0080)            /*!< Break interrupt Flag */
 .equiv TIM_SR_CC1OF,                        (0x0200)            /*!< Capture/Compare 1 Overcapture Flag */
 .equiv TIM_SR_CC2OF,                        (0x0400)            /*!< Capture/Compare 2 Overcapture Flag */
 .equiv TIM_SR_CC3OF,                        (0x0800)            /*!< Capture/Compare 3 Overcapture Flag */
 .equiv TIM_SR_CC4OF,                        (0x1000)            /*!< Capture/Compare 4 Overcapture Flag */

/*******************  Bit definition for TIM_EGR register  ********************/
 .equiv TIM_EGR_UG,                          (0x01)               /*!< Update Generation */
 .equiv TIM_EGR_CC1G,                        (0x02)               /*!< Capture/Compare 1 Generation */
 .equiv TIM_EGR_CC2G,                        (0x04)               /*!< Capture/Compare 2 Generation */
 .equiv TIM_EGR_CC3G,                        (0x08)               /*!< Capture/Compare 3 Generation */
 .equiv TIM_EGR_CC4G,                        (0x10)               /*!< Capture/Compare 4 Generation */
 .equiv TIM_EGR_COMG,                        (0x20)               /*!< Capture/Compare Control Update Generation */
 .equiv TIM_EGR_TG,                          (0x40)               /*!< Trigger Generation */
 .equiv TIM_EGR_BG,                          (0x80)               /*!< Break Generation */

/******************  Bit definition for TIM_CCMR1 register  *******************/
 .equiv TIM_CCMR1_CC1S,                      (0x0003)            /*!< CC1S[1:0] bits (Capture/Compare 1 Selection) */
 .equiv TIM_CCMR1_CC1S_0,                    (0x0001)            /*!< Bit 0 */
 .equiv TIM_CCMR1_CC1S_1,                    (0x0002)            /*!< Bit 1 */

 .equiv TIM_CCMR1_OC1FE,                     (0x0004)            /*!< Output Compare 1 Fast enable */
 .equiv TIM_CCMR1_OC1PE,                     (0x0008)            /*!< Output Compare 1 Preload enable */

 .equiv TIM_CCMR1_OC1M,                      (0x0070)            /*!< OC1M[2:0] bits (Output Compare 1 Mode) */
 .equiv TIM_CCMR1_OC1M_0,                    (0x0010)            /*!< Bit 0 */
 .equiv TIM_CCMR1_OC1M_1,                    (0x0020)            /*!< Bit 1 */
 .equiv TIM_CCMR1_OC1M_2,                    (0x0040)            /*!< Bit 2 */

 .equiv TIM_CCMR1_OC1CE,                     (0x0080)            /*!< Output Compare 1Clear Enable */

 .equiv TIM_CCMR1_CC2S,                      (0x0300)            /*!< CC2S[1:0] bits (Capture/Compare 2 Selection) */
 .equiv TIM_CCMR1_CC2S_0,                    (0x0100)            /*!< Bit 0 */
 .equiv TIM_CCMR1_CC2S_1,                    (0x0200)            /*!< Bit 1 */

 .equiv TIM_CCMR1_OC2FE,                     (0x0400)            /*!< Output Compare 2 Fast enable */
 .equiv TIM_CCMR1_OC2PE,                     (0x0800)            /*!< Output Compare 2 Preload enable */

 .equiv TIM_CCMR1_OC2M,                      (0x7000)            /*!< OC2M[2:0] bits (Output Compare 2 Mode) */
 .equiv TIM_CCMR1_OC2M_0,                    (0x1000)            /*!< Bit 0 */
 .equiv TIM_CCMR1_OC2M_1,                    (0x2000)            /*!< Bit 1 */
 .equiv TIM_CCMR1_OC2M_2,                    (0x4000)            /*!< Bit 2 */

 .equiv TIM_CCMR1_OC2CE,                     (0x8000)            /*!< Output Compare 2 Clear Enable */

/*----------------------------------------------------------------------------*/

 .equiv TIM_CCMR1_IC1PSC,                    (0x000C)            /*!< IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
 .equiv TIM_CCMR1_IC1PSC_0,                  (0x0004)            /*!< Bit 0 */
 .equiv TIM_CCMR1_IC1PSC_1,                  (0x0008)            /*!< Bit 1 */

 .equiv TIM_CCMR1_IC1F,                      (0x00F0)            /*!< IC1F[3:0] bits (Input Capture 1 Filter) */
 .equiv TIM_CCMR1_IC1F_0,                    (0x0010)            /*!< Bit 0 */
 .equiv TIM_CCMR1_IC1F_1,                    (0x0020)            /*!< Bit 1 */
 .equiv TIM_CCMR1_IC1F_2,                    (0x0040)            /*!< Bit 2 */
 .equiv TIM_CCMR1_IC1F_3,                    (0x0080)            /*!< Bit 3 */

 .equiv TIM_CCMR1_IC2PSC,                    (0x0C00)            /*!< IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
 .equiv TIM_CCMR1_IC2PSC_0,                  (0x0400)            /*!< Bit 0 */
 .equiv TIM_CCMR1_IC2PSC_1,                  (0x0800)            /*!< Bit 1 */

 .equiv TIM_CCMR1_IC2F,                      (0xF000)            /*!< IC2F[3:0] bits (Input Capture 2 Filter) */
 .equiv TIM_CCMR1_IC2F_0,                    (0x1000)            /*!< Bit 0 */
 .equiv TIM_CCMR1_IC2F_1,                    (0x2000)            /*!< Bit 1 */
 .equiv TIM_CCMR1_IC2F_2,                    (0x4000)            /*!< Bit 2 */
 .equiv TIM_CCMR1_IC2F_3,                    (0x8000)            /*!< Bit 3 */

/******************  Bit definition for TIM_CCMR2 register  *******************/
 .equiv TIM_CCMR2_CC3S,                      (0x0003)            /*!< CC3S[1:0] bits (Capture/Compare 3 Selection) */
 .equiv TIM_CCMR2_CC3S_0,                    (0x0001)            /*!< Bit 0 */
 .equiv TIM_CCMR2_CC3S_1,                    (0x0002)            /*!< Bit 1 */

 .equiv TIM_CCMR2_OC3FE,                     (0x0004)            /*!< Output Compare 3 Fast enable */
 .equiv TIM_CCMR2_OC3PE,                     (0x0008)            /*!< Output Compare 3 Preload enable */

 .equiv TIM_CCMR2_OC3M,                      (0x0070)            /*!< OC3M[2:0] bits (Output Compare 3 Mode) */
 .equiv TIM_CCMR2_OC3M_0,                    (0x0010)            /*!< Bit 0 */
 .equiv TIM_CCMR2_OC3M_1,                    (0x0020)            /*!< Bit 1 */
 .equiv TIM_CCMR2_OC3M_2,                    (0x0040)            /*!< Bit 2 */

 .equiv TIM_CCMR2_OC3CE,                     (0x0080)            /*!< Output Compare 3 Clear Enable */

 .equiv TIM_CCMR2_CC4S,                      (0x0300)            /*!< CC4S[1:0] bits (Capture/Compare 4 Selection) */
 .equiv TIM_CCMR2_CC4S_0,                    (0x0100)            /*!< Bit 0 */
 .equiv TIM_CCMR2_CC4S_1,                    (0x0200)            /*!< Bit 1 */

 .equiv TIM_CCMR2_OC4FE,                     (0x0400)            /*!< Output Compare 4 Fast enable */
 .equiv TIM_CCMR2_OC4PE,                     (0x0800)            /*!< Output Compare 4 Preload enable */

 .equiv TIM_CCMR2_OC4M,                      (0x7000)            /*!< OC4M[2:0] bits (Output Compare 4 Mode) */
 .equiv TIM_CCMR2_OC4M_0,                    (0x1000)            /*!< Bit 0 */
 .equiv TIM_CCMR2_OC4M_1,                    (0x2000)            /*!< Bit 1 */
 .equiv TIM_CCMR2_OC4M_2,                    (0x4000)            /*!< Bit 2 */

 .equiv TIM_CCMR2_OC4CE,                     (0x8000)            /*!< Output Compare 4 Clear Enable */

/*----------------------------------------------------------------------------*/

 .equiv TIM_CCMR2_IC3PSC,                    (0x000C)            /*!< IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
 .equiv TIM_CCMR2_IC3PSC_0,                  (0x0004)            /*!< Bit 0 */
 .equiv TIM_CCMR2_IC3PSC_1,                  (0x0008)            /*!< Bit 1 */

 .equiv TIM_CCMR2_IC3F,                      (0x00F0)            /*!< IC3F[3:0] bits (Input Capture 3 Filter) */
 .equiv TIM_CCMR2_IC3F_0,                    (0x0010)            /*!< Bit 0 */
 .equiv TIM_CCMR2_IC3F_1,                    (0x0020)            /*!< Bit 1 */
 .equiv TIM_CCMR2_IC3F_2,                    (0x0040)            /*!< Bit 2 */
 .equiv TIM_CCMR2_IC3F_3,                    (0x0080)            /*!< Bit 3 */

 .equiv TIM_CCMR2_IC4PSC,                    (0x0C00)            /*!< IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
 .equiv TIM_CCMR2_IC4PSC_0,                  (0x0400)            /*!< Bit 0 */
 .equiv TIM_CCMR2_IC4PSC_1,                  (0x0800)            /*!< Bit 1 */

 .equiv TIM_CCMR2_IC4F,                      (0xF000)            /*!< IC4F[3:0] bits (Input Capture 4 Filter) */
 .equiv TIM_CCMR2_IC4F_0,                    (0x1000)            /*!< Bit 0 */
 .equiv TIM_CCMR2_IC4F_1,                    (0x2000)            /*!< Bit 1 */
 .equiv TIM_CCMR2_IC4F_2,                    (0x4000)            /*!< Bit 2 */
 .equiv TIM_CCMR2_IC4F_3,                    (0x8000)            /*!< Bit 3 */

/*******************  Bit definition for TIM_CCER register  *******************/
 .equiv TIM_CCER_CC1E,                       (0x0001)            /*!< Capture/Compare 1 output enable */
 .equiv TIM_CCER_CC1P,                       (0x0002)            /*!< Capture/Compare 1 output Polarity */
 .equiv TIM_CCER_CC1NE,                      (0x0004)            /*!< Capture/Compare 1 Complementary output enable */
 .equiv TIM_CCER_CC1NP,                      (0x0008)            /*!< Capture/Compare 1 Complementary output Polarity */
 .equiv TIM_CCER_CC2E,                       (0x0010)            /*!< Capture/Compare 2 output enable */
 .equiv TIM_CCER_CC2P,                       (0x0020)            /*!< Capture/Compare 2 output Polarity */
 .equiv TIM_CCER_CC2NE,                      (0x0040)            /*!< Capture/Compare 2 Complementary output enable */
 .equiv TIM_CCER_CC2NP,                      (0x0080)            /*!< Capture/Compare 2 Complementary output Polarity */
 .equiv TIM_CCER_CC3E,                       (0x0100)            /*!< Capture/Compare 3 output enable */
 .equiv TIM_CCER_CC3P,                       (0x0200)            /*!< Capture/Compare 3 output Polarity */
 .equiv TIM_CCER_CC3NE,                      (0x0400)            /*!< Capture/Compare 3 Complementary output enable */
 .equiv TIM_CCER_CC3NP,                      (0x0800)            /*!< Capture/Compare 3 Complementary output Polarity */
 .equiv TIM_CCER_CC4E,                       (0x1000)            /*!< Capture/Compare 4 output enable */
 .equiv TIM_CCER_CC4P,                       (0x2000)            /*!< Capture/Compare 4 output Polarity */
 .equiv TIM_CCER_CC4NP,                      (0x8000)            /*!< Capture/Compare 4 Complementary output Polarity */

/*******************  Bit definition for TIM_CNT register  ********************/
 .equiv TIM_CNT_CNT,                         (0xFFFF)            /*!< Counter Value */

/*******************  Bit definition for TIM_PSC register  ********************/
 .equiv TIM_PSC_PSC,                         (0xFFFF)            /*!< Prescaler Value */

/*******************  Bit definition for TIM_ARR register  ********************/
 .equiv TIM_ARR_ARR,                         (0xFFFF)            /*!< actual auto-reload Value */

/*******************  Bit definition for TIM_RCR register  ********************/
 .equiv TIM_RCR_REP,                         (0xFF)               /*!< Repetition Counter Value */

/*******************  Bit definition for TIM_CCR1 register  *******************/
 .equiv TIM_CCR1_CCR1,                       (0xFFFF)            /*!< Capture/Compare 1 Value */

/*******************  Bit definition for TIM_CCR2 register  *******************/
 .equiv TIM_CCR2_CCR2,                       (0xFFFF)            /*!< Capture/Compare 2 Value */

/*******************  Bit definition for TIM_CCR3 register  *******************/
 .equiv TIM_CCR3_CCR3,                       (0xFFFF)            /*!< Capture/Compare 3 Value */

/*******************  Bit definition for TIM_CCR4 register  *******************/
 .equiv TIM_CCR4_CCR4,                       (0xFFFF)            /*!< Capture/Compare 4 Value */

/*******************  Bit definition for TIM_BDTR register  *******************/
 .equiv TIM_BDTR_DTG,                        (0x00FF)            /*!< DTG[0:7] bits (Dead-Time Generator set-up) */
 .equiv TIM_BDTR_DTG_0,                      (0x0001)            /*!< Bit 0 */
 .equiv TIM_BDTR_DTG_1,                      (0x0002)            /*!< Bit 1 */
 .equiv TIM_BDTR_DTG_2,                      (0x0004)            /*!< Bit 2 */
 .equiv TIM_BDTR_DTG_3,                      (0x0008)            /*!< Bit 3 */
 .equiv TIM_BDTR_DTG_4,                      (0x0010)            /*!< Bit 4 */
 .equiv TIM_BDTR_DTG_5,                      (0x0020)            /*!< Bit 5 */
 .equiv TIM_BDTR_DTG_6,                      (0x0040)            /*!< Bit 6 */
 .equiv TIM_BDTR_DTG_7,                      (0x0080)            /*!< Bit 7 */

 .equiv TIM_BDTR_LOCK,                       (0x0300)            /*!< LOCK[1:0] bits (Lock Configuration) */
 .equiv TIM_BDTR_LOCK_0,                     (0x0100)            /*!< Bit 0 */
 .equiv TIM_BDTR_LOCK_1,                     (0x0200)            /*!< Bit 1 */

 .equiv TIM_BDTR_OSSI,                       (0x0400)            /*!< Off-State Selection for Idle mode */
 .equiv TIM_BDTR_OSSR,                       (0x0800)            /*!< Off-State Selection for Run mode */
 .equiv TIM_BDTR_BKE,                        (0x1000)            /*!< Break enable */
 .equiv TIM_BDTR_BKP,                        (0x2000)            /*!< Break Polarity */
 .equiv TIM_BDTR_AOE,                        (0x4000)            /*!< Automatic Output enable */
 .equiv TIM_BDTR_MOE,                        (0x8000)            /*!< Main Output enable */

/*******************  Bit definition for TIM_DCR register  ********************/
 .equiv TIM_DCR_DBA,                         (0x001F)            /*!< DBA[4:0] bits (DMA Base Address) */
 .equiv TIM_DCR_DBA_0,                       (0x0001)            /*!< Bit 0 */
 .equiv TIM_DCR_DBA_1,                       (0x0002)            /*!< Bit 1 */
 .equiv TIM_DCR_DBA_2,                       (0x0004)            /*!< Bit 2 */
 .equiv TIM_DCR_DBA_3,                       (0x0008)            /*!< Bit 3 */
 .equiv TIM_DCR_DBA_4,                       (0x0010)            /*!< Bit 4 */

 .equiv TIM_DCR_DBL,                         (0x1F00)            /*!< DBL[4:0] bits (DMA Burst Length) */
 .equiv TIM_DCR_DBL_0,                       (0x0100)            /*!< Bit 0 */
 .equiv TIM_DCR_DBL_1,                       (0x0200)            /*!< Bit 1 */
 .equiv TIM_DCR_DBL_2,                       (0x0400)            /*!< Bit 2 */
 .equiv TIM_DCR_DBL_3,                       (0x0800)            /*!< Bit 3 */
 .equiv TIM_DCR_DBL_4,                       (0x1000)            /*!< Bit 4 */

/*******************  Bit definition for TIM_DMAR register  *******************/
 .equiv TIM_DMAR_DMAB,                       (0xFFFF)            /*!< DMA register for burst accesses */

/******************************************************************************/
/*                                                                            */
/*                             Real-Time Clock                                */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for RTC_CRH register  ********************/
 .equiv RTC_CRH_SECIE,                       (0x01)               /*!< Second Interrupt Enable */
 .equiv RTC_CRH_ALRIE,                       (0x02)               /*!< Alarm Interrupt Enable */
 .equiv RTC_CRH_OWIE,                        (0x04)               /*!< OverfloW Interrupt Enable */

/*******************  Bit definition for RTC_CRL register  ********************/
 .equiv RTC_CRL_SECF,                        (0x01)               /*!< Second Flag */
 .equiv RTC_CRL_ALRF,                        (0x02)               /*!< Alarm Flag */
 .equiv RTC_CRL_OWF,                         (0x04)               /*!< OverfloW Flag */
 .equiv RTC_CRL_RSF,                         (0x08)               /*!< Registers Synchronized Flag */
 .equiv RTC_CRL_CNF,                         (0x10)               /*!< Configuration Flag */
 .equiv RTC_CRL_RTOFF,                       (0x20)               /*!< RTC operation OFF */

/*******************  Bit definition for RTC_PRLH register  *******************/
 .equiv RTC_PRLH_PRL,                        (0x000F)            /*!< RTC Prescaler Reload Value High */

/*******************  Bit definition for RTC_PRLL register  *******************/
 .equiv RTC_PRLL_PRL,                        (0xFFFF)            /*!< RTC Prescaler Reload Value Low */

/*******************  Bit definition for RTC_DIVH register  *******************/
 .equiv RTC_DIVH_RTC_DIV,                    (0x000F)            /*!< RTC Clock Divider High */

/*******************  Bit definition for RTC_DIVL register  *******************/
 .equiv RTC_DIVL_RTC_DIV,                    (0xFFFF)            /*!< RTC Clock Divider Low */

/*******************  Bit definition for RTC_CNTH register  *******************/
 .equiv RTC_CNTH_RTC_CNT,                    (0xFFFF)            /*!< RTC Counter High */

/*******************  Bit definition for RTC_CNTL register  *******************/
 .equiv RTC_CNTL_RTC_CNT,                    (0xFFFF)            /*!< RTC Counter Low */

/*******************  Bit definition for RTC_ALRH register  *******************/
 .equiv RTC_ALRH_RTC_ALR,                    (0xFFFF)            /*!< RTC Alarm High */

/*******************  Bit definition for RTC_ALRL register  *******************/
 .equiv RTC_ALRL_RTC_ALR,                    (0xFFFF)            /*!< RTC Alarm Low */

/******************************************************************************/
/*                                                                            */
/*                           Independent WATCHDOG                             */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for IWDG_KR register  ********************/
 .equiv IWDG_KR_KEY,                         (0xFFFF)            /*!< Key value (write only, read 0000h) */

/*******************  Bit definition for IWDG_PR register  ********************/
 .equiv IWDG_PR_PR,                          (0x07)               /*!< PR[2:0] (Prescaler divider) */
 .equiv IWDG_PR_PR_0,                        (0x01)               /*!< Bit 0 */
 .equiv IWDG_PR_PR_1,                        (0x02)               /*!< Bit 1 */
 .equiv IWDG_PR_PR_2,                        (0x04)               /*!< Bit 2 */

/*******************  Bit definition for IWDG_RLR register  *******************/
 .equiv IWDG_RLR_RL,                         (0x0FFF)            /*!< Watchdog counter reload value */

/*******************  Bit definition for IWDG_SR register  ********************/
 .equiv IWDG_SR_PVU,                         (0x01)               /*!< Watchdog prescaler value update */
 .equiv IWDG_SR_RVU,                         (0x02)               /*!< Watchdog counter reload value update */

/******************************************************************************/
/*                                                                            */
/*                            Window WATCHDOG                                 */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for WWDG_CR register  ********************/
 .equiv WWDG_CR_T,                           (0x7F)               /*!< T[6:0] bits (7-Bit counter (MSB to LSB)) */
 .equiv WWDG_CR_T0,                          (0x01)               /*!< Bit 0 */
 .equiv WWDG_CR_T1,                          (0x02)               /*!< Bit 1 */
 .equiv WWDG_CR_T2,                          (0x04)               /*!< Bit 2 */
 .equiv WWDG_CR_T3,                          (0x08)               /*!< Bit 3 */
 .equiv WWDG_CR_T4,                          (0x10)               /*!< Bit 4 */
 .equiv WWDG_CR_T5,                          (0x20)               /*!< Bit 5 */
 .equiv WWDG_CR_T6,                          (0x40)               /*!< Bit 6 */

 .equiv WWDG_CR_WDGA,                        (0x80)               /*!< Activation bit */

/*******************  Bit definition for WWDG_CFR register  *******************/
 .equiv WWDG_CFR_W,                          (0x007F)            /*!< W[6:0] bits (7-bit window value) */
 .equiv WWDG_CFR_W0,                         (0x0001)            /*!< Bit 0 */
 .equiv WWDG_CFR_W1,                         (0x0002)            /*!< Bit 1 */
 .equiv WWDG_CFR_W2,                         (0x0004)            /*!< Bit 2 */
 .equiv WWDG_CFR_W3,                         (0x0008)            /*!< Bit 3 */
 .equiv WWDG_CFR_W4,                         (0x0010)            /*!< Bit 4 */
 .equiv WWDG_CFR_W5,                         (0x0020)            /*!< Bit 5 */
 .equiv WWDG_CFR_W6,                         (0x0040)            /*!< Bit 6 */

 .equiv WWDG_CFR_WDGTB,                      (0x0180)            /*!< WDGTB[1:0] bits (Timer Base) */
 .equiv WWDG_CFR_WDGTB0,                     (0x0080)            /*!< Bit 0 */
 .equiv WWDG_CFR_WDGTB1,                     (0x0100)            /*!< Bit 1 */

 .equiv WWDG_CFR_EWI,                        (0x0200)            /*!< Early Wakeup Interrupt */

/*******************  Bit definition for WWDG_SR register  ********************/
 .equiv WWDG_SR_EWIF,                        (0x01)               /*!< Early Wakeup Interrupt Flag */

/******************************************************************************/
/*                                                                            */
/*                       Flexible Static Memory Controller                    */
/*                                                                            */
/******************************************************************************/

/******************  Bit definition for FSMC_BCR1 register  *******************/
 .equiv FSMC_BCR1_MBKEN,                     (0x00000001)        /*!< Memory bank enable bit */
 .equiv FSMC_BCR1_MUXEN,                     (0x00000002)        /*!< Address/data multiplexing enable bit */

 .equiv FSMC_BCR1_MTYP,                      (0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
 .equiv FSMC_BCR1_MTYP_0,                    (0x00000004)        /*!< Bit 0 */
 .equiv FSMC_BCR1_MTYP_1,                    (0x00000008)        /*!< Bit 1 */

 .equiv FSMC_BCR1_MWID,                      (0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
 .equiv FSMC_BCR1_MWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BCR1_MWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_BCR1_FACCEN,                    (0x00000040)        /*!< Flash access enable */
 .equiv FSMC_BCR1_BURSTEN,                   (0x00000100)        /*!< Burst enable bit */
 .equiv FSMC_BCR1_WAITPOL,                   (0x00000200)        /*!< Wait signal polarity bit */
 .equiv FSMC_BCR1_WRAPMOD,                   (0x00000400)        /*!< Wrapped burst mode support */
 .equiv FSMC_BCR1_WAITCFG,                   (0x00000800)        /*!< Wait timing configuration */
 .equiv FSMC_BCR1_WREN,                      (0x00001000)        /*!< Write enable bit */
 .equiv FSMC_BCR1_WAITEN,                    (0x00002000)        /*!< Wait enable bit */
 .equiv FSMC_BCR1_EXTMOD,                    (0x00004000)        /*!< Extended mode enable */
 .equiv FSMC_BCR1_ASYNCWAIT,                 (0x00008000)       /*!< Asynchronous wait */
 .equiv FSMC_BCR1_CBURSTRW,                  (0x00080000)        /*!< Write burst enable */

/******************  Bit definition for FSMC_BCR2 register  *******************/
 .equiv FSMC_BCR2_MBKEN,                     (0x00000001)        /*!< Memory bank enable bit */
 .equiv FSMC_BCR2_MUXEN,                     (0x00000002)        /*!< Address/data multiplexing enable bit */

 .equiv FSMC_BCR2_MTYP,                      (0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
 .equiv FSMC_BCR2_MTYP_0,                    (0x00000004)        /*!< Bit 0 */
 .equiv FSMC_BCR2_MTYP_1,                    (0x00000008)        /*!< Bit 1 */

 .equiv FSMC_BCR2_MWID,                      (0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
 .equiv FSMC_BCR2_MWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BCR2_MWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_BCR2_FACCEN,                    (0x00000040)        /*!< Flash access enable */
 .equiv FSMC_BCR2_BURSTEN,                   (0x00000100)        /*!< Burst enable bit */
 .equiv FSMC_BCR2_WAITPOL,                   (0x00000200)        /*!< Wait signal polarity bit */
 .equiv FSMC_BCR2_WRAPMOD,                   (0x00000400)        /*!< Wrapped burst mode support */
 .equiv FSMC_BCR2_WAITCFG,                   (0x00000800)        /*!< Wait timing configuration */
 .equiv FSMC_BCR2_WREN,                      (0x00001000)        /*!< Write enable bit */
 .equiv FSMC_BCR2_WAITEN,                    (0x00002000)        /*!< Wait enable bit */
 .equiv FSMC_BCR2_EXTMOD,                    (0x00004000)        /*!< Extended mode enable */
 .equiv FSMC_BCR2_ASYNCWAIT,                 (0x00008000)       /*!< Asynchronous wait */
 .equiv FSMC_BCR2_CBURSTRW,                  (0x00080000)        /*!< Write burst enable */

/******************  Bit definition for FSMC_BCR3 register  *******************/
 .equiv FSMC_BCR3_MBKEN,                     (0x00000001)        /*!< Memory bank enable bit */
 .equiv FSMC_BCR3_MUXEN,                     (0x00000002)        /*!< Address/data multiplexing enable bit */

 .equiv FSMC_BCR3_MTYP,                      (0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
 .equiv FSMC_BCR3_MTYP_0,                    (0x00000004)        /*!< Bit 0 */
 .equiv FSMC_BCR3_MTYP_1,                    (0x00000008)        /*!< Bit 1 */

 .equiv FSMC_BCR3_MWID,                      (0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
 .equiv FSMC_BCR3_MWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BCR3_MWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_BCR3_FACCEN,                    (0x00000040)        /*!< Flash access enable */
 .equiv FSMC_BCR3_BURSTEN,                   (0x00000100)        /*!< Burst enable bit */
 .equiv FSMC_BCR3_WAITPOL,                   (0x00000200)        /*!< Wait signal polarity bit. */
 .equiv FSMC_BCR3_WRAPMOD,                   (0x00000400)        /*!< Wrapped burst mode support */
 .equiv FSMC_BCR3_WAITCFG,                   (0x00000800)        /*!< Wait timing configuration */
 .equiv FSMC_BCR3_WREN,                      (0x00001000)        /*!< Write enable bit */
 .equiv FSMC_BCR3_WAITEN,                    (0x00002000)        /*!< Wait enable bit */
 .equiv FSMC_BCR3_EXTMOD,                    (0x00004000)        /*!< Extended mode enable */
 .equiv FSMC_BCR3_ASYNCWAIT,                 (0x00008000)       /*!< Asynchronous wait */
 .equiv FSMC_BCR3_CBURSTRW,                  (0x00080000)        /*!< Write burst enable */

/******************  Bit definition for FSMC_BCR4 register  *******************/
 .equiv FSMC_BCR4_MBKEN,                     (0x00000001)        /*!< Memory bank enable bit */
 .equiv FSMC_BCR4_MUXEN,                     (0x00000002)        /*!< Address/data multiplexing enable bit */

 .equiv FSMC_BCR4_MTYP,                      (0x0000000C)        /*!< MTYP[1:0] bits (Memory type) */
 .equiv FSMC_BCR4_MTYP_0,                    (0x00000004)        /*!< Bit 0 */
 .equiv FSMC_BCR4_MTYP_1,                    (0x00000008)        /*!< Bit 1 */

 .equiv FSMC_BCR4_MWID,                      (0x00000030)        /*!< MWID[1:0] bits (Memory data bus width) */
 .equiv FSMC_BCR4_MWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BCR4_MWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_BCR4_FACCEN,                    (0x00000040)        /*!< Flash access enable */
 .equiv FSMC_BCR4_BURSTEN,                   (0x00000100)        /*!< Burst enable bit */
 .equiv FSMC_BCR4_WAITPOL,                   (0x00000200)        /*!< Wait signal polarity bit */
 .equiv FSMC_BCR4_WRAPMOD,                   (0x00000400)        /*!< Wrapped burst mode support */
 .equiv FSMC_BCR4_WAITCFG,                   (0x00000800)        /*!< Wait timing configuration */
 .equiv FSMC_BCR4_WREN,                      (0x00001000)        /*!< Write enable bit */
 .equiv FSMC_BCR4_WAITEN,                    (0x00002000)        /*!< Wait enable bit */
 .equiv FSMC_BCR4_EXTMOD,                    (0x00004000)        /*!< Extended mode enable */
 .equiv FSMC_BCR4_ASYNCWAIT,                 (0x00008000)       /*!< Asynchronous wait */
 .equiv FSMC_BCR4_CBURSTRW,                  (0x00080000)        /*!< Write burst enable */

/******************  Bit definition for FSMC_BTR1 register  ******************/
 .equiv FSMC_BTR1_ADDSET,                    (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BTR1_ADDSET_0,                  (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BTR1_ADDSET_1,                  (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BTR1_ADDSET_2,                  (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BTR1_ADDSET_3,                  (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BTR1_ADDHLD,                    (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BTR1_ADDHLD_0,                  (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BTR1_ADDHLD_1,                  (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BTR1_ADDHLD_2,                  (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BTR1_ADDHLD_3,                  (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BTR1_DATAST,                    (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BTR1_DATAST_0,                  (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BTR1_DATAST_1,                  (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BTR1_DATAST_2,                  (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BTR1_DATAST_3,                  (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BTR1_DATAST_4,                  (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BTR1_DATAST_5,                  (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BTR1_DATAST_6,                  (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BTR1_DATAST_7,                  (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BTR1_BUSTURN,                   (0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
 .equiv FSMC_BTR1_BUSTURN_0,                 (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_BTR1_BUSTURN_1,                 (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_BTR1_BUSTURN_2,                 (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_BTR1_BUSTURN_3,                 (0x00080000)        /*!< Bit 3 */

 .equiv FSMC_BTR1_CLKDIV,                    (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BTR1_CLKDIV_0,                  (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BTR1_CLKDIV_1,                  (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BTR1_CLKDIV_2,                  (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BTR1_CLKDIV_3,                  (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BTR1_DATLAT,                    (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BTR1_DATLAT_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BTR1_DATLAT_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BTR1_DATLAT_2,                  (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BTR1_DATLAT_3,                  (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BTR1_ACCMOD,                    (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BTR1_ACCMOD_0,                  (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BTR1_ACCMOD_1,                  (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BTR2 register  *******************/
 .equiv FSMC_BTR2_ADDSET,                    (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BTR2_ADDSET_0,                  (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BTR2_ADDSET_1,                  (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BTR2_ADDSET_2,                  (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BTR2_ADDSET_3,                  (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BTR2_ADDHLD,                    (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BTR2_ADDHLD_0,                  (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BTR2_ADDHLD_1,                  (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BTR2_ADDHLD_2,                  (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BTR2_ADDHLD_3,                  (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BTR2_DATAST,                    (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BTR2_DATAST_0,                  (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BTR2_DATAST_1,                  (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BTR2_DATAST_2,                  (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BTR2_DATAST_3,                  (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BTR2_DATAST_4,                  (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BTR2_DATAST_5,                  (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BTR2_DATAST_6,                  (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BTR2_DATAST_7,                  (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BTR2_BUSTURN,                   (0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
 .equiv FSMC_BTR2_BUSTURN_0,                 (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_BTR2_BUSTURN_1,                 (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_BTR2_BUSTURN_2,                 (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_BTR2_BUSTURN_3,                 (0x00080000)        /*!< Bit 3 */

 .equiv FSMC_BTR2_CLKDIV,                    (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BTR2_CLKDIV_0,                  (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BTR2_CLKDIV_1,                  (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BTR2_CLKDIV_2,                  (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BTR2_CLKDIV_3,                  (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BTR2_DATLAT,                    (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BTR2_DATLAT_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BTR2_DATLAT_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BTR2_DATLAT_2,                  (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BTR2_DATLAT_3,                  (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BTR2_ACCMOD,                    (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BTR2_ACCMOD_0,                  (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BTR2_ACCMOD_1,                  (0x20000000)        /*!< Bit 1 */

/*******************  Bit definition for FSMC_BTR3 register  *******************/
 .equiv FSMC_BTR3_ADDSET,                    (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BTR3_ADDSET_0,                  (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BTR3_ADDSET_1,                  (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BTR3_ADDSET_2,                  (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BTR3_ADDSET_3,                  (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BTR3_ADDHLD,                    (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BTR3_ADDHLD_0,                  (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BTR3_ADDHLD_1,                  (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BTR3_ADDHLD_2,                  (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BTR3_ADDHLD_3,                  (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BTR3_DATAST,                    (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BTR3_DATAST_0,                  (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BTR3_DATAST_1,                  (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BTR3_DATAST_2,                  (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BTR3_DATAST_3,                  (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BTR3_DATAST_4,                  (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BTR3_DATAST_5,                  (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BTR3_DATAST_6,                  (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BTR3_DATAST_7,                  (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BTR3_BUSTURN,                   (0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
 .equiv FSMC_BTR3_BUSTURN_0,                 (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_BTR3_BUSTURN_1,                 (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_BTR3_BUSTURN_2,                 (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_BTR3_BUSTURN_3,                 (0x00080000)        /*!< Bit 3 */

 .equiv FSMC_BTR3_CLKDIV,                    (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BTR3_CLKDIV_0,                  (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BTR3_CLKDIV_1,                  (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BTR3_CLKDIV_2,                  (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BTR3_CLKDIV_3,                  (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BTR3_DATLAT,                    (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BTR3_DATLAT_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BTR3_DATLAT_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BTR3_DATLAT_2,                  (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BTR3_DATLAT_3,                  (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BTR3_ACCMOD,                    (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BTR3_ACCMOD_0,                  (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BTR3_ACCMOD_1,                  (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BTR4 register  *******************/
 .equiv FSMC_BTR4_ADDSET,                    (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BTR4_ADDSET_0,                  (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BTR4_ADDSET_1,                  (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BTR4_ADDSET_2,                  (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BTR4_ADDSET_3,                  (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BTR4_ADDHLD,                    (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BTR4_ADDHLD_0,                  (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BTR4_ADDHLD_1,                  (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BTR4_ADDHLD_2,                  (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BTR4_ADDHLD_3,                  (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BTR4_DATAST,                    (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BTR4_DATAST_0,                  (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BTR4_DATAST_1,                  (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BTR4_DATAST_2,                  (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BTR4_DATAST_3,                  (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BTR4_DATAST_4,                  (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BTR4_DATAST_5,                  (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BTR4_DATAST_6,                  (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BTR4_DATAST_7,                  (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BTR4_BUSTURN,                   (0x000F0000)        /*!< BUSTURN[3:0] bits (Bus turnaround phase duration) */
 .equiv FSMC_BTR4_BUSTURN_0,                 (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_BTR4_BUSTURN_1,                 (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_BTR4_BUSTURN_2,                 (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_BTR4_BUSTURN_3,                 (0x00080000)        /*!< Bit 3 */

 .equiv FSMC_BTR4_CLKDIV,                    (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BTR4_CLKDIV_0,                  (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BTR4_CLKDIV_1,                  (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BTR4_CLKDIV_2,                  (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BTR4_CLKDIV_3,                  (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BTR4_DATLAT,                    (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BTR4_DATLAT_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BTR4_DATLAT_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BTR4_DATLAT_2,                  (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BTR4_DATLAT_3,                  (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BTR4_ACCMOD,                    (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BTR4_ACCMOD_0,                  (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BTR4_ACCMOD_1,                  (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BWTR1 register  ******************/
 .equiv FSMC_BWTR1_ADDSET,                   (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BWTR1_ADDSET_0,                 (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_ADDSET_1,                 (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BWTR1_ADDSET_2,                 (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BWTR1_ADDSET_3,                 (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BWTR1_ADDHLD,                   (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BWTR1_ADDHLD_0,                 (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_ADDHLD_1,                 (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BWTR1_ADDHLD_2,                 (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BWTR1_ADDHLD_3,                 (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BWTR1_DATAST,                   (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BWTR1_DATAST_0,                 (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_DATAST_1,                 (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BWTR1_DATAST_2,                 (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BWTR1_DATAST_3,                 (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BWTR1_DATAST_4,                 (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BWTR1_DATAST_5,                 (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BWTR1_DATAST_6,                 (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BWTR1_DATAST_7,                 (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BWTR1_CLKDIV,                   (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BWTR1_CLKDIV_0,                 (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_CLKDIV_1,                 (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BWTR1_CLKDIV_2,                 (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BWTR1_CLKDIV_3,                 (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BWTR1_DATLAT,                   (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BWTR1_DATLAT_0,                 (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_DATLAT_1,                 (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BWTR1_DATLAT_2,                 (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BWTR1_DATLAT_3,                 (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BWTR1_ACCMOD,                   (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BWTR1_ACCMOD_0,                 (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR1_ACCMOD_1,                 (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BWTR2 register  ******************/
 .equiv FSMC_BWTR2_ADDSET,                   (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BWTR2_ADDSET_0,                 (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_ADDSET_1,                 (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BWTR2_ADDSET_2,                 (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BWTR2_ADDSET_3,                 (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BWTR2_ADDHLD,                   (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BWTR2_ADDHLD_0,                 (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_ADDHLD_1,                 (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BWTR2_ADDHLD_2,                 (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BWTR2_ADDHLD_3,                 (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BWTR2_DATAST,                   (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BWTR2_DATAST_0,                 (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_DATAST_1,                 (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BWTR2_DATAST_2,                 (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BWTR2_DATAST_3,                 (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BWTR2_DATAST_4,                 (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BWTR2_DATAST_5,                 (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BWTR2_DATAST_6,                 (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BWTR2_DATAST_7,                 (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BWTR2_CLKDIV,                   (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BWTR2_CLKDIV_0,                 (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_CLKDIV_1,                 (0x00200000)        /*!< Bit 1*/
 .equiv FSMC_BWTR2_CLKDIV_2,                 (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BWTR2_CLKDIV_3,                 (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BWTR2_DATLAT,                   (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BWTR2_DATLAT_0,                 (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_DATLAT_1,                 (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BWTR2_DATLAT_2,                 (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BWTR2_DATLAT_3,                 (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BWTR2_ACCMOD,                   (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BWTR2_ACCMOD_0,                 (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR2_ACCMOD_1,                 (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BWTR3 register  ******************/
 .equiv FSMC_BWTR3_ADDSET,                   (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BWTR3_ADDSET_0,                 (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_ADDSET_1,                 (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BWTR3_ADDSET_2,                 (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BWTR3_ADDSET_3,                 (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BWTR3_ADDHLD,                   (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BWTR3_ADDHLD_0,                 (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_ADDHLD_1,                 (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BWTR3_ADDHLD_2,                 (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BWTR3_ADDHLD_3,                 (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BWTR3_DATAST,                   (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BWTR3_DATAST_0,                 (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_DATAST_1,                 (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BWTR3_DATAST_2,                 (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BWTR3_DATAST_3,                 (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BWTR3_DATAST_4,                 (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BWTR3_DATAST_5,                 (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BWTR3_DATAST_6,                 (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BWTR3_DATAST_7,                 (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BWTR3_CLKDIV,                   (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BWTR3_CLKDIV_0,                 (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_CLKDIV_1,                 (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BWTR3_CLKDIV_2,                 (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BWTR3_CLKDIV_3,                 (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BWTR3_DATLAT,                   (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BWTR3_DATLAT_0,                 (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_DATLAT_1,                 (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BWTR3_DATLAT_2,                 (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BWTR3_DATLAT_3,                 (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BWTR3_ACCMOD,                   (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BWTR3_ACCMOD_0,                 (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR3_ACCMOD_1,                 (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_BWTR4 register  ******************/
 .equiv FSMC_BWTR4_ADDSET,                   (0x0000000F)        /*!< ADDSET[3:0] bits (Address setup phase duration) */
 .equiv FSMC_BWTR4_ADDSET_0,                 (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_ADDSET_1,                 (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_BWTR4_ADDSET_2,                 (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_BWTR4_ADDSET_3,                 (0x00000008)        /*!< Bit 3 */

 .equiv FSMC_BWTR4_ADDHLD,                   (0x000000F0)        /*!< ADDHLD[3:0] bits (Address-hold phase duration) */
 .equiv FSMC_BWTR4_ADDHLD_0,                 (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_ADDHLD_1,                 (0x00000020)        /*!< Bit 1 */
 .equiv FSMC_BWTR4_ADDHLD_2,                 (0x00000040)        /*!< Bit 2 */
 .equiv FSMC_BWTR4_ADDHLD_3,                 (0x00000080)        /*!< Bit 3 */

 .equiv FSMC_BWTR4_DATAST,                   (0x0000FF00)        /*!< DATAST [3:0] bits (Data-phase duration) */
 .equiv FSMC_BWTR4_DATAST_0,                 (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_DATAST_1,                 (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_BWTR4_DATAST_2,                 (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_BWTR4_DATAST_3,                 (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_BWTR4_DATAST_4,                 (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_BWTR4_DATAST_5,                 (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_BWTR4_DATAST_6,                 (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_BWTR4_DATAST_7,                 (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_BWTR4_CLKDIV,                   (0x00F00000)        /*!< CLKDIV[3:0] bits (Clock divide ratio) */
 .equiv FSMC_BWTR4_CLKDIV_0,                 (0x00100000)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_CLKDIV_1,                 (0x00200000)        /*!< Bit 1 */
 .equiv FSMC_BWTR4_CLKDIV_2,                 (0x00400000)        /*!< Bit 2 */
 .equiv FSMC_BWTR4_CLKDIV_3,                 (0x00800000)        /*!< Bit 3 */

 .equiv FSMC_BWTR4_DATLAT,                   (0x0F000000)        /*!< DATLA[3:0] bits (Data latency) */
 .equiv FSMC_BWTR4_DATLAT_0,                 (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_DATLAT_1,                 (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_BWTR4_DATLAT_2,                 (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_BWTR4_DATLAT_3,                 (0x08000000)        /*!< Bit 3 */

 .equiv FSMC_BWTR4_ACCMOD,                   (0x30000000)        /*!< ACCMOD[1:0] bits (Access mode) */
 .equiv FSMC_BWTR4_ACCMOD_0,                 (0x10000000)        /*!< Bit 0 */
 .equiv FSMC_BWTR4_ACCMOD_1,                 (0x20000000)        /*!< Bit 1 */

/******************  Bit definition for FSMC_PCR2 register  *******************/
 .equiv FSMC_PCR2_PWAITEN,                   (0x00000002)        /*!< Wait feature enable bit */
 .equiv FSMC_PCR2_PBKEN,                     (0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
 .equiv FSMC_PCR2_PTYP,                      (0x00000008)        /*!< Memory type */

 .equiv FSMC_PCR2_PWID,                      (0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
 .equiv FSMC_PCR2_PWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_PCR2_PWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_PCR2_ECCEN,                     (0x00000040)        /*!< ECC computation logic enable bit */

 .equiv FSMC_PCR2_TCLR,                      (0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
 .equiv FSMC_PCR2_TCLR_0,                    (0x00000200)        /*!< Bit 0 */
 .equiv FSMC_PCR2_TCLR_1,                    (0x00000400)        /*!< Bit 1 */
 .equiv FSMC_PCR2_TCLR_2,                    (0x00000800)        /*!< Bit 2 */
 .equiv FSMC_PCR2_TCLR_3,                    (0x00001000)        /*!< Bit 3 */

 .equiv FSMC_PCR2_TAR,                       (0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
 .equiv FSMC_PCR2_TAR_0,                     (0x00002000)        /*!< Bit 0 */
 .equiv FSMC_PCR2_TAR_1,                     (0x00004000)        /*!< Bit 1 */
 .equiv FSMC_PCR2_TAR_2,                     (0x00008000)        /*!< Bit 2 */
 .equiv FSMC_PCR2_TAR_3,                     (0x00010000)        /*!< Bit 3 */

 .equiv FSMC_PCR2_ECCPS,                     (0x000E0000)        /*!< ECCPS[1:0] bits (ECC page size) */
 .equiv FSMC_PCR2_ECCPS_0,                   (0x00020000)        /*!< Bit 0 */
 .equiv FSMC_PCR2_ECCPS_1,                   (0x00040000)        /*!< Bit 1 */
 .equiv FSMC_PCR2_ECCPS_2,                   (0x00080000)        /*!< Bit 2 */

/******************  Bit definition for FSMC_PCR3 register  *******************/
 .equiv FSMC_PCR3_PWAITEN,                   (0x00000002)        /*!< Wait feature enable bit */
 .equiv FSMC_PCR3_PBKEN,                     (0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
 .equiv FSMC_PCR3_PTYP,                      (0x00000008)        /*!< Memory type */

 .equiv FSMC_PCR3_PWID,                      (0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
 .equiv FSMC_PCR3_PWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_PCR3_PWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_PCR3_ECCEN,                     (0x00000040)        /*!< ECC computation logic enable bit */

 .equiv FSMC_PCR3_TCLR,                      (0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
 .equiv FSMC_PCR3_TCLR_0,                    (0x00000200)        /*!< Bit 0 */
 .equiv FSMC_PCR3_TCLR_1,                    (0x00000400)        /*!< Bit 1 */
 .equiv FSMC_PCR3_TCLR_2,                    (0x00000800)        /*!< Bit 2 */
 .equiv FSMC_PCR3_TCLR_3,                    (0x00001000)        /*!< Bit 3 */

 .equiv FSMC_PCR3_TAR,                       (0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
 .equiv FSMC_PCR3_TAR_0,                     (0x00002000)        /*!< Bit 0 */
 .equiv FSMC_PCR3_TAR_1,                     (0x00004000)        /*!< Bit 1 */
 .equiv FSMC_PCR3_TAR_2,                     (0x00008000)        /*!< Bit 2 */
 .equiv FSMC_PCR3_TAR_3,                     (0x00010000)        /*!< Bit 3 */

 .equiv FSMC_PCR3_ECCPS,                     (0x000E0000)        /*!< ECCPS[2:0] bits (ECC page size) */
 .equiv FSMC_PCR3_ECCPS_0,                   (0x00020000)        /*!< Bit 0 */
 .equiv FSMC_PCR3_ECCPS_1,                   (0x00040000)        /*!< Bit 1 */
 .equiv FSMC_PCR3_ECCPS_2,                   (0x00080000)        /*!< Bit 2 */

/******************  Bit definition for FSMC_PCR4 register  *******************/
 .equiv FSMC_PCR4_PWAITEN,                   (0x00000002)        /*!< Wait feature enable bit */
 .equiv FSMC_PCR4_PBKEN,                     (0x00000004)        /*!< PC Card/NAND Flash memory bank enable bit */
 .equiv FSMC_PCR4_PTYP,                      (0x00000008)        /*!< Memory type */

 .equiv FSMC_PCR4_PWID,                      (0x00000030)        /*!< PWID[1:0] bits (NAND Flash databus width) */
 .equiv FSMC_PCR4_PWID_0,                    (0x00000010)        /*!< Bit 0 */
 .equiv FSMC_PCR4_PWID_1,                    (0x00000020)        /*!< Bit 1 */

 .equiv FSMC_PCR4_ECCEN,                     (0x00000040)        /*!< ECC computation logic enable bit */

 .equiv FSMC_PCR4_TCLR,                      (0x00001E00)        /*!< TCLR[3:0] bits (CLE to RE delay) */
 .equiv FSMC_PCR4_TCLR_0,                    (0x00000200)        /*!< Bit 0 */
 .equiv FSMC_PCR4_TCLR_1,                    (0x00000400)        /*!< Bit 1 */
 .equiv FSMC_PCR4_TCLR_2,                    (0x00000800)        /*!< Bit 2 */
 .equiv FSMC_PCR4_TCLR_3,                    (0x00001000)        /*!< Bit 3 */

 .equiv FSMC_PCR4_TAR,                       (0x0001E000)        /*!< TAR[3:0] bits (ALE to RE delay) */
 .equiv FSMC_PCR4_TAR_0,                     (0x00002000)        /*!< Bit 0 */
 .equiv FSMC_PCR4_TAR_1,                     (0x00004000)        /*!< Bit 1 */
 .equiv FSMC_PCR4_TAR_2,                     (0x00008000)        /*!< Bit 2 */
 .equiv FSMC_PCR4_TAR_3,                     (0x00010000)        /*!< Bit 3 */

 .equiv FSMC_PCR4_ECCPS,                     (0x000E0000)        /*!< ECCPS[2:0] bits (ECC page size) */
 .equiv FSMC_PCR4_ECCPS_0,                   (0x00020000)        /*!< Bit 0 */
 .equiv FSMC_PCR4_ECCPS_1,                   (0x00040000)        /*!< Bit 1 */
 .equiv FSMC_PCR4_ECCPS_2,                   (0x00080000)        /*!< Bit 2 */

/*******************  Bit definition for FSMC_SR2 register  *******************/
 .equiv FSMC_SR2_IRS,                        (0x01)               /*!< Interrupt Rising Edge status */
 .equiv FSMC_SR2_ILS,                        (0x02)               /*!< Interrupt Level status */
 .equiv FSMC_SR2_IFS,                        (0x04)               /*!< Interrupt Falling Edge status */
 .equiv FSMC_SR2_IREN,                       (0x08)               /*!< Interrupt Rising Edge detection Enable bit */
 .equiv FSMC_SR2_ILEN,                       (0x10)               /*!< Interrupt Level detection Enable bit */
 .equiv FSMC_SR2_IFEN,                       (0x20)               /*!< Interrupt Falling Edge detection Enable bit */
 .equiv FSMC_SR2_FEMPT,                      (0x40)               /*!< FIFO empty */

/*******************  Bit definition for FSMC_SR3 register  *******************/
 .equiv FSMC_SR3_IRS,                        (0x01)               /*!< Interrupt Rising Edge status */
 .equiv FSMC_SR3_ILS,                        (0x02)               /*!< Interrupt Level status */
 .equiv FSMC_SR3_IFS,                        (0x04)               /*!< Interrupt Falling Edge status */
 .equiv FSMC_SR3_IREN,                       (0x08)               /*!< Interrupt Rising Edge detection Enable bit */
 .equiv FSMC_SR3_ILEN,                       (0x10)               /*!< Interrupt Level detection Enable bit */
 .equiv FSMC_SR3_IFEN,                       (0x20)               /*!< Interrupt Falling Edge detection Enable bit */
 .equiv FSMC_SR3_FEMPT,                      (0x40)               /*!< FIFO empty */

/*******************  Bit definition for FSMC_SR4 register  *******************/
 .equiv FSMC_SR4_IRS,                        (0x01)               /*!< Interrupt Rising Edge status */
 .equiv FSMC_SR4_ILS,                        (0x02)               /*!< Interrupt Level status */
 .equiv FSMC_SR4_IFS,                        (0x04)               /*!< Interrupt Falling Edge status */
 .equiv FSMC_SR4_IREN,                       (0x08)               /*!< Interrupt Rising Edge detection Enable bit */
 .equiv FSMC_SR4_ILEN,                       (0x10)               /*!< Interrupt Level detection Enable bit */
 .equiv FSMC_SR4_IFEN,                       (0x20)               /*!< Interrupt Falling Edge detection Enable bit */
 .equiv FSMC_SR4_FEMPT,                      (0x40)               /*!< FIFO empty */

/******************  Bit definition for FSMC_PMEM2 register  ******************/
 .equiv FSMC_PMEM2_MEMSET2,                  (0x000000FF)        /*!< MEMSET2[7:0] bits (Common memory 2 setup time) */
 .equiv FSMC_PMEM2_MEMSET2_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PMEM2_MEMSET2_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PMEM2_MEMSET2_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PMEM2_MEMSET2_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PMEM2_MEMSET2_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PMEM2_MEMSET2_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PMEM2_MEMSET2_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PMEM2_MEMSET2_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PMEM2_MEMWAIT2,                 (0x0000FF00)        /*!< MEMWAIT2[7:0] bits (Common memory 2 wait time) */
 .equiv FSMC_PMEM2_MEMWAIT2_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PMEM2_MEMWAIT2_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PMEM2_MEMWAIT2_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PMEM2_MEMWAIT2_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PMEM2_MEMWAIT2_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PMEM2_MEMWAIT2_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PMEM2_MEMWAIT2_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PMEM2_MEMWAIT2_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PMEM2_MEMHOLD2,                 (0x00FF0000)        /*!< MEMHOLD2[7:0] bits (Common memory 2 hold time) */
 .equiv FSMC_PMEM2_MEMHOLD2_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PMEM2_MEMHOLD2_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PMEM2_MEMHOLD2_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PMEM2_MEMHOLD2_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PMEM2_MEMHOLD2_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PMEM2_MEMHOLD2_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PMEM2_MEMHOLD2_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PMEM2_MEMHOLD2_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PMEM2_MEMHIZ2,                  (0xFF000000)        /*!< MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time) */
 .equiv FSMC_PMEM2_MEMHIZ2_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PMEM2_MEMHIZ2_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PMEM2_MEMHIZ2_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PMEM2_MEMHIZ2_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PMEM2_MEMHIZ2_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PMEM2_MEMHIZ2_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PMEM2_MEMHIZ2_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PMEM2_MEMHIZ2_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PMEM3 register  ******************/
 .equiv FSMC_PMEM3_MEMSET3,                  (0x000000FF)        /*!< MEMSET3[7:0] bits (Common memory 3 setup time) */
 .equiv FSMC_PMEM3_MEMSET3_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PMEM3_MEMSET3_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PMEM3_MEMSET3_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PMEM3_MEMSET3_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PMEM3_MEMSET3_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PMEM3_MEMSET3_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PMEM3_MEMSET3_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PMEM3_MEMSET3_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PMEM3_MEMWAIT3,                 (0x0000FF00)        /*!< MEMWAIT3[7:0] bits (Common memory 3 wait time) */
 .equiv FSMC_PMEM3_MEMWAIT3_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PMEM3_MEMWAIT3_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PMEM3_MEMWAIT3_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PMEM3_MEMWAIT3_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PMEM3_MEMWAIT3_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PMEM3_MEMWAIT3_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PMEM3_MEMWAIT3_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PMEM3_MEMWAIT3_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PMEM3_MEMHOLD3,                 (0x00FF0000)        /*!< MEMHOLD3[7:0] bits (Common memory 3 hold time) */
 .equiv FSMC_PMEM3_MEMHOLD3_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PMEM3_MEMHOLD3_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PMEM3_MEMHOLD3_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PMEM3_MEMHOLD3_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PMEM3_MEMHOLD3_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PMEM3_MEMHOLD3_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PMEM3_MEMHOLD3_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PMEM3_MEMHOLD3_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PMEM3_MEMHIZ3,                  (0xFF000000)        /*!< MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time) */
 .equiv FSMC_PMEM3_MEMHIZ3_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PMEM3_MEMHIZ3_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PMEM3_MEMHIZ3_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PMEM3_MEMHIZ3_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PMEM3_MEMHIZ3_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PMEM3_MEMHIZ3_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PMEM3_MEMHIZ3_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PMEM3_MEMHIZ3_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PMEM4 register  ******************/
 .equiv FSMC_PMEM4_MEMSET4,                  (0x000000FF)        /*!< MEMSET4[7:0] bits (Common memory 4 setup time) */
 .equiv FSMC_PMEM4_MEMSET4_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PMEM4_MEMSET4_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PMEM4_MEMSET4_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PMEM4_MEMSET4_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PMEM4_MEMSET4_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PMEM4_MEMSET4_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PMEM4_MEMSET4_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PMEM4_MEMSET4_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PMEM4_MEMWAIT4,                 (0x0000FF00)        /*!< MEMWAIT4[7:0] bits (Common memory 4 wait time) */
 .equiv FSMC_PMEM4_MEMWAIT4_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PMEM4_MEMWAIT4_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PMEM4_MEMWAIT4_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PMEM4_MEMWAIT4_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PMEM4_MEMWAIT4_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PMEM4_MEMWAIT4_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PMEM4_MEMWAIT4_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PMEM4_MEMWAIT4_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PMEM4_MEMHOLD4,                 (0x00FF0000)        /*!< MEMHOLD4[7:0] bits (Common memory 4 hold time) */
 .equiv FSMC_PMEM4_MEMHOLD4_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PMEM4_MEMHOLD4_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PMEM4_MEMHOLD4_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PMEM4_MEMHOLD4_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PMEM4_MEMHOLD4_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PMEM4_MEMHOLD4_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PMEM4_MEMHOLD4_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PMEM4_MEMHOLD4_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PMEM4_MEMHIZ4,                  (0xFF000000)        /*!< MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time) */
 .equiv FSMC_PMEM4_MEMHIZ4_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PMEM4_MEMHIZ4_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PMEM4_MEMHIZ4_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PMEM4_MEMHIZ4_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PMEM4_MEMHIZ4_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PMEM4_MEMHIZ4_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PMEM4_MEMHIZ4_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PMEM4_MEMHIZ4_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PATT2 register  ******************/
 .equiv FSMC_PATT2_ATTSET2,                  (0x000000FF)        /*!< ATTSET2[7:0] bits (Attribute memory 2 setup time) */
 .equiv FSMC_PATT2_ATTSET2_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PATT2_ATTSET2_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PATT2_ATTSET2_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PATT2_ATTSET2_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PATT2_ATTSET2_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PATT2_ATTSET2_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PATT2_ATTSET2_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PATT2_ATTSET2_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PATT2_ATTWAIT2,                 (0x0000FF00)        /*!< ATTWAIT2[7:0] bits (Attribute memory 2 wait time) */
 .equiv FSMC_PATT2_ATTWAIT2_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PATT2_ATTWAIT2_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PATT2_ATTWAIT2_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PATT2_ATTWAIT2_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PATT2_ATTWAIT2_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PATT2_ATTWAIT2_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PATT2_ATTWAIT2_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PATT2_ATTWAIT2_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PATT2_ATTHOLD2,                 (0x00FF0000)        /*!< ATTHOLD2[7:0] bits (Attribute memory 2 hold time) */
 .equiv FSMC_PATT2_ATTHOLD2_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PATT2_ATTHOLD2_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PATT2_ATTHOLD2_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PATT2_ATTHOLD2_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PATT2_ATTHOLD2_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PATT2_ATTHOLD2_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PATT2_ATTHOLD2_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PATT2_ATTHOLD2_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PATT2_ATTHIZ2,                  (0xFF000000)        /*!< ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time) */
 .equiv FSMC_PATT2_ATTHIZ2_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PATT2_ATTHIZ2_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PATT2_ATTHIZ2_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PATT2_ATTHIZ2_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PATT2_ATTHIZ2_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PATT2_ATTHIZ2_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PATT2_ATTHIZ2_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PATT2_ATTHIZ2_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PATT3 register  ******************/
 .equiv FSMC_PATT3_ATTSET3,                  (0x000000FF)        /*!< ATTSET3[7:0] bits (Attribute memory 3 setup time) */
 .equiv FSMC_PATT3_ATTSET3_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PATT3_ATTSET3_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PATT3_ATTSET3_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PATT3_ATTSET3_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PATT3_ATTSET3_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PATT3_ATTSET3_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PATT3_ATTSET3_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PATT3_ATTSET3_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PATT3_ATTWAIT3,                 (0x0000FF00)        /*!< ATTWAIT3[7:0] bits (Attribute memory 3 wait time) */
 .equiv FSMC_PATT3_ATTWAIT3_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PATT3_ATTWAIT3_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PATT3_ATTWAIT3_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PATT3_ATTWAIT3_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PATT3_ATTWAIT3_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PATT3_ATTWAIT3_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PATT3_ATTWAIT3_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PATT3_ATTWAIT3_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PATT3_ATTHOLD3,                 (0x00FF0000)        /*!< ATTHOLD3[7:0] bits (Attribute memory 3 hold time) */
 .equiv FSMC_PATT3_ATTHOLD3_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PATT3_ATTHOLD3_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PATT3_ATTHOLD3_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PATT3_ATTHOLD3_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PATT3_ATTHOLD3_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PATT3_ATTHOLD3_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PATT3_ATTHOLD3_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PATT3_ATTHOLD3_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PATT3_ATTHIZ3,                  (0xFF000000)        /*!< ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time) */
 .equiv FSMC_PATT3_ATTHIZ3_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PATT3_ATTHIZ3_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PATT3_ATTHIZ3_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PATT3_ATTHIZ3_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PATT3_ATTHIZ3_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PATT3_ATTHIZ3_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PATT3_ATTHIZ3_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PATT3_ATTHIZ3_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PATT4 register  ******************/
 .equiv FSMC_PATT4_ATTSET4,                  (0x000000FF)        /*!< ATTSET4[7:0] bits (Attribute memory 4 setup time) */
 .equiv FSMC_PATT4_ATTSET4_0,                (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PATT4_ATTSET4_1,                (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PATT4_ATTSET4_2,                (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PATT4_ATTSET4_3,                (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PATT4_ATTSET4_4,                (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PATT4_ATTSET4_5,                (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PATT4_ATTSET4_6,                (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PATT4_ATTSET4_7,                (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PATT4_ATTWAIT4,                 (0x0000FF00)        /*!< ATTWAIT4[7:0] bits (Attribute memory 4 wait time) */
 .equiv FSMC_PATT4_ATTWAIT4_0,               (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PATT4_ATTWAIT4_1,               (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PATT4_ATTWAIT4_2,               (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PATT4_ATTWAIT4_3,               (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PATT4_ATTWAIT4_4,               (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PATT4_ATTWAIT4_5,               (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PATT4_ATTWAIT4_6,               (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PATT4_ATTWAIT4_7,               (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PATT4_ATTHOLD4,                 (0x00FF0000)        /*!< ATTHOLD4[7:0] bits (Attribute memory 4 hold time) */
 .equiv FSMC_PATT4_ATTHOLD4_0,               (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PATT4_ATTHOLD4_1,               (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PATT4_ATTHOLD4_2,               (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PATT4_ATTHOLD4_3,               (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PATT4_ATTHOLD4_4,               (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PATT4_ATTHOLD4_5,               (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PATT4_ATTHOLD4_6,               (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PATT4_ATTHOLD4_7,               (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PATT4_ATTHIZ4,                  (0xFF000000)        /*!< ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time) */
 .equiv FSMC_PATT4_ATTHIZ4_0,                (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PATT4_ATTHIZ4_1,                (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PATT4_ATTHIZ4_2,                (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PATT4_ATTHIZ4_3,                (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PATT4_ATTHIZ4_4,                (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PATT4_ATTHIZ4_5,                (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PATT4_ATTHIZ4_6,                (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PATT4_ATTHIZ4_7,                (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_PIO4 register  *******************/
 .equiv FSMC_PIO4_IOSET4,                    (0x000000FF)        /*!< IOSET4[7:0] bits (I/O 4 setup time) */
 .equiv FSMC_PIO4_IOSET4_0,                  (0x00000001)        /*!< Bit 0 */
 .equiv FSMC_PIO4_IOSET4_1,                  (0x00000002)        /*!< Bit 1 */
 .equiv FSMC_PIO4_IOSET4_2,                  (0x00000004)        /*!< Bit 2 */
 .equiv FSMC_PIO4_IOSET4_3,                  (0x00000008)        /*!< Bit 3 */
 .equiv FSMC_PIO4_IOSET4_4,                  (0x00000010)        /*!< Bit 4 */
 .equiv FSMC_PIO4_IOSET4_5,                  (0x00000020)        /*!< Bit 5 */
 .equiv FSMC_PIO4_IOSET4_6,                  (0x00000040)        /*!< Bit 6 */
 .equiv FSMC_PIO4_IOSET4_7,                  (0x00000080)        /*!< Bit 7 */

 .equiv FSMC_PIO4_IOWAIT4,                   (0x0000FF00)        /*!< IOWAIT4[7:0] bits (I/O 4 wait time) */
 .equiv FSMC_PIO4_IOWAIT4_0,                 (0x00000100)        /*!< Bit 0 */
 .equiv FSMC_PIO4_IOWAIT4_1,                 (0x00000200)        /*!< Bit 1 */
 .equiv FSMC_PIO4_IOWAIT4_2,                 (0x00000400)        /*!< Bit 2 */
 .equiv FSMC_PIO4_IOWAIT4_3,                 (0x00000800)        /*!< Bit 3 */
 .equiv FSMC_PIO4_IOWAIT4_4,                 (0x00001000)        /*!< Bit 4 */
 .equiv FSMC_PIO4_IOWAIT4_5,                 (0x00002000)        /*!< Bit 5 */
 .equiv FSMC_PIO4_IOWAIT4_6,                 (0x00004000)        /*!< Bit 6 */
 .equiv FSMC_PIO4_IOWAIT4_7,                 (0x00008000)        /*!< Bit 7 */

 .equiv FSMC_PIO4_IOHOLD4,                   (0x00FF0000)        /*!< IOHOLD4[7:0] bits (I/O 4 hold time) */
 .equiv FSMC_PIO4_IOHOLD4_0,                 (0x00010000)        /*!< Bit 0 */
 .equiv FSMC_PIO4_IOHOLD4_1,                 (0x00020000)        /*!< Bit 1 */
 .equiv FSMC_PIO4_IOHOLD4_2,                 (0x00040000)        /*!< Bit 2 */
 .equiv FSMC_PIO4_IOHOLD4_3,                 (0x00080000)        /*!< Bit 3 */
 .equiv FSMC_PIO4_IOHOLD4_4,                 (0x00100000)        /*!< Bit 4 */
 .equiv FSMC_PIO4_IOHOLD4_5,                 (0x00200000)        /*!< Bit 5 */
 .equiv FSMC_PIO4_IOHOLD4_6,                 (0x00400000)        /*!< Bit 6 */
 .equiv FSMC_PIO4_IOHOLD4_7,                 (0x00800000)        /*!< Bit 7 */

 .equiv FSMC_PIO4_IOHIZ4,                    (0xFF000000)        /*!< IOHIZ4[7:0] bits (I/O 4 databus HiZ time) */
 .equiv FSMC_PIO4_IOHIZ4_0,                  (0x01000000)        /*!< Bit 0 */
 .equiv FSMC_PIO4_IOHIZ4_1,                  (0x02000000)        /*!< Bit 1 */
 .equiv FSMC_PIO4_IOHIZ4_2,                  (0x04000000)        /*!< Bit 2 */
 .equiv FSMC_PIO4_IOHIZ4_3,                  (0x08000000)        /*!< Bit 3 */
 .equiv FSMC_PIO4_IOHIZ4_4,                  (0x10000000)        /*!< Bit 4 */
 .equiv FSMC_PIO4_IOHIZ4_5,                  (0x20000000)        /*!< Bit 5 */
 .equiv FSMC_PIO4_IOHIZ4_6,                  (0x40000000)        /*!< Bit 6 */
 .equiv FSMC_PIO4_IOHIZ4_7,                  (0x80000000)        /*!< Bit 7 */

/******************  Bit definition for FSMC_ECCR2 register  ******************/
 .equiv FSMC_ECCR2_ECC2,                     (0xFFFFFFFF)        /*!< ECC result */

/******************  Bit definition for FSMC_ECCR3 register  ******************/
 .equiv FSMC_ECCR3_ECC3,                     (0xFFFFFFFF)        /*!< ECC result */

/******************************************************************************/
/*                                                                            */
/*                          SD host Interface                                 */
/*                                                                            */
/******************************************************************************/

/******************  Bit definition for SDIO_POWER register  ******************/
 .equiv SDIO_POWER_PWRCTRL,                  (0x03)               /*!< PWRCTRL[1:0] bits (Power supply control bits) */
 .equiv SDIO_POWER_PWRCTRL_0,                (0x01)               /*!< Bit 0 */
 .equiv SDIO_POWER_PWRCTRL_1,                (0x02)               /*!< Bit 1 */

/******************  Bit definition for SDIO_CLKCR register  ******************/
 .equiv SDIO_CLKCR_CLKDIV,                   (0x00FF)            /*!< Clock divide factor */
 .equiv SDIO_CLKCR_CLKEN,                    (0x0100)            /*!< Clock enable bit */
 .equiv SDIO_CLKCR_PWRSAV,                   (0x0200)            /*!< Power saving configuration bit */
 .equiv SDIO_CLKCR_BYPASS,                   (0x0400)            /*!< Clock divider bypass enable bit */

 .equiv SDIO_CLKCR_WIDBUS,                   (0x1800)            /*!< WIDBUS[1:0] bits (Wide bus mode enable bit) */
 .equiv SDIO_CLKCR_WIDBUS_0,                 (0x0800)            /*!< Bit 0 */
 .equiv SDIO_CLKCR_WIDBUS_1,                 (0x1000)            /*!< Bit 1 */

 .equiv SDIO_CLKCR_NEGEDGE,                  (0x2000)            /*!< SDIO_CK dephasing selection bit */
 .equiv SDIO_CLKCR_HWFC_EN,                  (0x4000)            /*!< HW Flow Control enable */

/*******************  Bit definition for SDIO_ARG register  *******************/
 .equiv SDIO_ARG_CMDARG,                     (0xFFFFFFFF)            /*!< Command argument */

/*******************  Bit definition for SDIO_CMD register  *******************/
 .equiv SDIO_CMD_CMDINDEX,                   (0x003F)            /*!< Command Index */

 .equiv SDIO_CMD_WAITRESP,                   (0x00C0)            /*!< WAITRESP[1:0] bits (Wait for response bits) */
 .equiv SDIO_CMD_WAITRESP_0,                 (0x0040)            /*!<  Bit 0 */
 .equiv SDIO_CMD_WAITRESP_1,                 (0x0080)            /*!<  Bit 1 */

 .equiv SDIO_CMD_WAITINT,                    (0x0100)            /*!< CPSM Waits for Interrupt Request */
 .equiv SDIO_CMD_WAITPEND,                   (0x0200)            /*!< CPSM Waits for ends of data transfer (CmdPend internal signal) */
 .equiv SDIO_CMD_CPSMEN,                     (0x0400)            /*!< Command path state machine (CPSM) Enable bit */
 .equiv SDIO_CMD_SDIOSUSPEND,                (0x0800)            /*!< SD I/O suspend command */
 .equiv SDIO_CMD_ENCMDCOMPL,                 (0x1000)            /*!< Enable CMD completion */
 .equiv SDIO_CMD_NIEN,                       (0x2000)            /*!< Not Interrupt Enable */
 .equiv SDIO_CMD_CEATACMD,                   (0x4000)            /*!< CE-ATA command */

/*****************  Bit definition for SDIO_RESPCMD register  *****************/
 .equiv SDIO_RESPCMD_RESPCMD,                (0x3F)               /*!< Response command index */

/******************  Bit definition for SDIO_RESP0 register  ******************/
 .equiv SDIO_RESP0_CARDSTATUS0,              (0xFFFFFFFF)        /*!< Card Status */

/******************  Bit definition for SDIO_RESP1 register  ******************/
 .equiv SDIO_RESP1_CARDSTATUS1,              (0xFFFFFFFF)        /*!< Card Status */

/******************  Bit definition for SDIO_RESP2 register  ******************/
 .equiv SDIO_RESP2_CARDSTATUS2,              (0xFFFFFFFF)        /*!< Card Status */

/******************  Bit definition for SDIO_RESP3 register  ******************/
 .equiv SDIO_RESP3_CARDSTATUS3,              (0xFFFFFFFF)        /*!< Card Status */

/******************  Bit definition for SDIO_RESP4 register  ******************/
 .equiv SDIO_RESP4_CARDSTATUS4,              (0xFFFFFFFF)        /*!< Card Status */

/******************  Bit definition for SDIO_DTIMER register  *****************/
 .equiv SDIO_DTIMER_DATATIME,                (0xFFFFFFFF)        /*!< Data timeout period. */

/******************  Bit definition for SDIO_DLEN register  *******************/
 .equiv SDIO_DLEN_DATALENGTH,                (0x01FFFFFF)        /*!< Data length value */

/******************  Bit definition for SDIO_DCTRL register  ******************/
 .equiv SDIO_DCTRL_DTEN,                     (0x0001)            /*!< Data transfer enabled bit */
 .equiv SDIO_DCTRL_DTDIR,                    (0x0002)            /*!< Data transfer direction selection */
 .equiv SDIO_DCTRL_DTMODE,                   (0x0004)            /*!< Data transfer mode selection */
 .equiv SDIO_DCTRL_DMAEN,                    (0x0008)            /*!< DMA enabled bit */

 .equiv SDIO_DCTRL_DBLOCKSIZE,               (0x00F0)            /*!< DBLOCKSIZE[3:0] bits (Data block size) */
 .equiv SDIO_DCTRL_DBLOCKSIZE_0,             (0x0010)            /*!< Bit 0 */
 .equiv SDIO_DCTRL_DBLOCKSIZE_1,             (0x0020)            /*!< Bit 1 */
 .equiv SDIO_DCTRL_DBLOCKSIZE_2,             (0x0040)            /*!< Bit 2 */
 .equiv SDIO_DCTRL_DBLOCKSIZE_3,             (0x0080)            /*!< Bit 3 */

 .equiv SDIO_DCTRL_RWSTART,                  (0x0100)            /*!< Read wait start */
 .equiv SDIO_DCTRL_RWSTOP,                   (0x0200)            /*!< Read wait stop */
 .equiv SDIO_DCTRL_RWMOD,                    (0x0400)            /*!< Read wait mode */
 .equiv SDIO_DCTRL_SDIOEN,                   (0x0800)            /*!< SD I/O enable functions */

/******************  Bit definition for SDIO_DCOUNT register  *****************/
 .equiv SDIO_DCOUNT_DATACOUNT,               (0x01FFFFFF)        /*!< Data count value */

/******************  Bit definition for SDIO_STA register  ********************/
 .equiv SDIO_STA_CCRCFAIL,                   (0x00000001)        /*!< Command response received (CRC check failed) */
 .equiv SDIO_STA_DCRCFAIL,                   (0x00000002)        /*!< Data block sent/received (CRC check failed) */
 .equiv SDIO_STA_CTIMEOUT,                   (0x00000004)        /*!< Command response timeout */
 .equiv SDIO_STA_DTIMEOUT,                   (0x00000008)        /*!< Data timeout */
 .equiv SDIO_STA_TXUNDERR,                   (0x00000010)        /*!< Transmit FIFO underrun error */
 .equiv SDIO_STA_RXOVERR,                    (0x00000020)        /*!< Received FIFO overrun error */
 .equiv SDIO_STA_CMDREND,                    (0x00000040)        /*!< Command response received (CRC check passed) */
 .equiv SDIO_STA_CMDSENT,                    (0x00000080)        /*!< Command sent (no response required) */
 .equiv SDIO_STA_DATAEND,                    (0x00000100)        /*!< Data end (data counter, SDIDCOUNT, is zero) */
 .equiv SDIO_STA_STBITERR,                   (0x00000200)        /*!< Start bit not detected on all data signals in wide bus mode */
 .equiv SDIO_STA_DBCKEND,                    (0x00000400)        /*!< Data block sent/received (CRC check passed) */
 .equiv SDIO_STA_CMDACT,                     (0x00000800)        /*!< Command transfer in progress */
 .equiv SDIO_STA_TXACT,                      (0x00001000)        /*!< Data transmit in progress */
 .equiv SDIO_STA_RXACT,                      (0x00002000)        /*!< Data receive in progress */
 .equiv SDIO_STA_TXFIFOHE,                   (0x00004000)        /*!< Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
 .equiv SDIO_STA_RXFIFOHF,                   (0x00008000)        /*!< Receive FIFO Half Full: there are at least 8 words in the FIFO */
 .equiv SDIO_STA_TXFIFOF,                    (0x00010000)        /*!< Transmit FIFO full */
 .equiv SDIO_STA_RXFIFOF,                    (0x00020000)        /*!< Receive FIFO full */
 .equiv SDIO_STA_TXFIFOE,                    (0x00040000)        /*!< Transmit FIFO empty */
 .equiv SDIO_STA_RXFIFOE,                    (0x00080000)        /*!< Receive FIFO empty */
 .equiv SDIO_STA_TXDAVL,                     (0x00100000)        /*!< Data available in transmit FIFO */
 .equiv SDIO_STA_RXDAVL,                     (0x00200000)        /*!< Data available in receive FIFO */
 .equiv SDIO_STA_SDIOIT,                     (0x00400000)        /*!< SDIO interrupt received */
 .equiv SDIO_STA_CEATAEND,                   (0x00800000)        /*!< CE-ATA command completion signal received for CMD61 */

/*******************  Bit definition for SDIO_ICR register  *******************/
 .equiv SDIO_ICR_CCRCFAILC,                  (0x00000001)        /*!< CCRCFAIL flag clear bit */
 .equiv SDIO_ICR_DCRCFAILC,                  (0x00000002)        /*!< DCRCFAIL flag clear bit */
 .equiv SDIO_ICR_CTIMEOUTC,                  (0x00000004)        /*!< CTIMEOUT flag clear bit */
 .equiv SDIO_ICR_DTIMEOUTC,                  (0x00000008)        /*!< DTIMEOUT flag clear bit */
 .equiv SDIO_ICR_TXUNDERRC,                  (0x00000010)        /*!< TXUNDERR flag clear bit */
 .equiv SDIO_ICR_RXOVERRC,                   (0x00000020)        /*!< RXOVERR flag clear bit */
 .equiv SDIO_ICR_CMDRENDC,                   (0x00000040)        /*!< CMDREND flag clear bit */
 .equiv SDIO_ICR_CMDSENTC,                   (0x00000080)        /*!< CMDSENT flag clear bit */
 .equiv SDIO_ICR_DATAENDC,                   (0x00000100)        /*!< DATAEND flag clear bit */
 .equiv SDIO_ICR_STBITERRC,                  (0x00000200)        /*!< STBITERR flag clear bit */
 .equiv SDIO_ICR_DBCKENDC,                   (0x00000400)        /*!< DBCKEND flag clear bit */
 .equiv SDIO_ICR_SDIOITC,                    (0x00400000)        /*!< SDIOIT flag clear bit */
 .equiv SDIO_ICR_CEATAENDC,                  (0x00800000)        /*!< CEATAEND flag clear bit */

/******************  Bit definition for SDIO_MASK register  *******************/
 .equiv SDIO_MASK_CCRCFAILIE,                (0x00000001)        /*!< Command CRC Fail Interrupt Enable */
 .equiv SDIO_MASK_DCRCFAILIE,                (0x00000002)        /*!< Data CRC Fail Interrupt Enable */
 .equiv SDIO_MASK_CTIMEOUTIE,                (0x00000004)        /*!< Command TimeOut Interrupt Enable */
 .equiv SDIO_MASK_DTIMEOUTIE,                (0x00000008)        /*!< Data TimeOut Interrupt Enable */
 .equiv SDIO_MASK_TXUNDERRIE,                (0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */
 .equiv SDIO_MASK_RXOVERRIE,                 (0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */
 .equiv SDIO_MASK_CMDRENDIE,                 (0x00000040)        /*!< Command Response Received Interrupt Enable */
 .equiv SDIO_MASK_CMDSENTIE,                 (0x00000080)        /*!< Command Sent Interrupt Enable */
 .equiv SDIO_MASK_DATAENDIE,                 (0x00000100)        /*!< Data End Interrupt Enable */
 .equiv SDIO_MASK_STBITERRIE,                (0x00000200)        /*!< Start Bit Error Interrupt Enable */
 .equiv SDIO_MASK_DBCKENDIE,                 (0x00000400)        /*!< Data Block End Interrupt Enable */
 .equiv SDIO_MASK_CMDACTIE,                  (0x00000800)        /*!< Command Acting Interrupt Enable */
 .equiv SDIO_MASK_TXACTIE,                   (0x00001000)        /*!< Data Transmit Acting Interrupt Enable */
 .equiv SDIO_MASK_RXACTIE,                   (0x00002000)        /*!< Data receive acting interrupt enabled */
 .equiv SDIO_MASK_TXFIFOHEIE,                (0x00004000)        /*!< Tx FIFO Half Empty interrupt Enable */
 .equiv SDIO_MASK_RXFIFOHFIE,                (0x00008000)        /*!< Rx FIFO Half Full interrupt Enable */
 .equiv SDIO_MASK_TXFIFOFIE,                 (0x00010000)        /*!< Tx FIFO Full interrupt Enable */
 .equiv SDIO_MASK_RXFIFOFIE,                 (0x00020000)        /*!< Rx FIFO Full interrupt Enable */
 .equiv SDIO_MASK_TXFIFOEIE,                 (0x00040000)        /*!< Tx FIFO Empty interrupt Enable */
 .equiv SDIO_MASK_RXFIFOEIE,                 (0x00080000)        /*!< Rx FIFO Empty interrupt Enable */
 .equiv SDIO_MASK_TXDAVLIE,                  (0x00100000)        /*!< Data available in Tx FIFO interrupt Enable */
 .equiv SDIO_MASK_RXDAVLIE,                  (0x00200000)        /*!< Data available in Rx FIFO interrupt Enable */
 .equiv SDIO_MASK_SDIOITIE,                  (0x00400000)        /*!< SDIO Mode Interrupt Received interrupt Enable */
 .equiv SDIO_MASK_CEATAENDIE,                (0x00800000)        /*!< CE-ATA command completion signal received Interrupt Enable */

/*****************  Bit definition for SDIO_FIFOCNT register  *****************/
 .equiv SDIO_FIFOCNT_FIFOCOUNT,              (0x00FFFFFF)        /*!< Remaining number of words to be written to or read from the FIFO */

/******************  Bit definition for SDIO_FIFO register  *******************/
 .equiv SDIO_FIFO_FIFODATA,                  (0xFFFFFFFF)        /*!< Receive and transmit FIFO data */

/******************************************************************************/
/*                                                                            */
/*                                   USB Device FS                            */
/*                                                                            */
/******************************************************************************/

/*!< Endpoint-specific registers */
/*******************  Bit definition for USB_EP0R register  *******************/
 .equiv USB_EP0R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP0R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP0R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP0R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP0R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP0R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP0R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP0R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP0R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP0R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP0R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP0R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP0R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP0R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP0R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP0R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP1R register  *******************/
 .equiv USB_EP1R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP1R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP1R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP1R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP1R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP1R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP1R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP1R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP1R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP1R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP1R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP1R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP1R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP1R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP1R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP1R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP2R register  *******************/
 .equiv USB_EP2R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP2R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP2R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP2R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP2R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP2R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP2R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP2R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP2R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP2R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP2R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP2R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP2R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP2R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP2R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP2R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP3R register  *******************/
 .equiv USB_EP3R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP3R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP3R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP3R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP3R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP3R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP3R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP3R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP3R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP3R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP3R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP3R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP3R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP3R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP3R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP3R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP4R register  *******************/
 .equiv USB_EP4R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP4R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP4R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP4R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP4R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP4R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP4R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP4R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP4R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP4R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP4R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP4R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP4R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP4R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP4R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP4R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP5R register  *******************/
 .equiv USB_EP5R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP5R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP5R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP5R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP5R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP5R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP5R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP5R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP5R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP5R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP5R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP5R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP5R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP5R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP5R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP5R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP6R register  *******************/
 .equiv USB_EP6R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP6R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP6R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP6R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP6R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP6R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP6R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP6R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP6R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP6R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP6R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP6R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP6R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP6R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP6R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP6R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*******************  Bit definition for USB_EP7R register  *******************/
 .equiv USB_EP7R_EA,                         (0x000F)            /*!< Endpoint Address */

 .equiv USB_EP7R_STAT_TX,                    (0x0030)            /*!< STAT_TX[1:0] bits (Status bits, for transmission transfers) */
 .equiv USB_EP7R_STAT_TX_0,                  (0x0010)            /*!< Bit 0 */
 .equiv USB_EP7R_STAT_TX_1,                  (0x0020)            /*!< Bit 1 */

 .equiv USB_EP7R_DTOG_TX,                    (0x0040)            /*!< Data Toggle, for transmission transfers */
 .equiv USB_EP7R_CTR_TX,                     (0x0080)            /*!< Correct Transfer for transmission */
 .equiv USB_EP7R_EP_KIND,                    (0x0100)            /*!< Endpoint Kind */

 .equiv USB_EP7R_EP_TYPE,                    (0x0600)            /*!< EP_TYPE[1:0] bits (Endpoint type) */
 .equiv USB_EP7R_EP_TYPE_0,                  (0x0200)            /*!< Bit 0 */
 .equiv USB_EP7R_EP_TYPE_1,                  (0x0400)            /*!< Bit 1 */

 .equiv USB_EP7R_SETUP,                      (0x0800)            /*!< Setup transaction completed */

 .equiv USB_EP7R_STAT_RX,                    (0x3000)            /*!< STAT_RX[1:0] bits (Status bits, for reception transfers) */
 .equiv USB_EP7R_STAT_RX_0,                  (0x1000)            /*!< Bit 0 */
 .equiv USB_EP7R_STAT_RX_1,                  (0x2000)            /*!< Bit 1 */

 .equiv USB_EP7R_DTOG_RX,                    (0x4000)            /*!< Data Toggle, for reception transfers */
 .equiv USB_EP7R_CTR_RX,                     (0x8000)            /*!< Correct Transfer for reception */

/*!< Common registers */
/*******************  Bit definition for USB_CNTR register  *******************/
 .equiv USB_CNTR_FRES,                       (0x0001)            /*!< Force USB Reset */
 .equiv USB_CNTR_PDWN,                       (0x0002)            /*!< Power down */
 .equiv USB_CNTR_LP_MODE,                    (0x0004)            /*!< Low-power mode */
 .equiv USB_CNTR_FSUSP,                      (0x0008)            /*!< Force suspend */
 .equiv USB_CNTR_RESUME,                     (0x0010)            /*!< Resume request */
 .equiv USB_CNTR_ESOFM,                      (0x0100)            /*!< Expected Start Of Frame Interrupt Mask */
 .equiv USB_CNTR_SOFM,                       (0x0200)            /*!< Start Of Frame Interrupt Mask */
 .equiv USB_CNTR_RESETM,                     (0x0400)            /*!< RESET Interrupt Mask */
 .equiv USB_CNTR_SUSPM,                      (0x0800)            /*!< Suspend mode Interrupt Mask */
 .equiv USB_CNTR_WKUPM,                      (0x1000)            /*!< Wakeup Interrupt Mask */
 .equiv USB_CNTR_ERRM,                       (0x2000)            /*!< Error Interrupt Mask */
 .equiv USB_CNTR_PMAOVRM,                    (0x4000)            /*!< Packet Memory Area Over / Underrun Interrupt Mask */
 .equiv USB_CNTR_CTRM,                       (0x8000)            /*!< Correct Transfer Interrupt Mask */

/*******************  Bit definition for USB_ISTR register  *******************/
 .equiv USB_ISTR_EP_ID,                      (0x000F)            /*!< Endpoint Identifier */
 .equiv USB_ISTR_DIR,                        (0x0010)            /*!< Direction of transaction */
 .equiv USB_ISTR_ESOF,                       (0x0100)            /*!< Expected Start Of Frame */
 .equiv USB_ISTR_SOF,                        (0x0200)            /*!< Start Of Frame */
 .equiv USB_ISTR_RESET,                      (0x0400)            /*!< USB RESET request */
 .equiv USB_ISTR_SUSP,                       (0x0800)            /*!< Suspend mode request */
 .equiv USB_ISTR_WKUP,                       (0x1000)            /*!< Wake up */
 .equiv USB_ISTR_ERR,                        (0x2000)            /*!< Error */
 .equiv USB_ISTR_PMAOVR,                     (0x4000)            /*!< Packet Memory Area Over / Underrun */
 .equiv USB_ISTR_CTR,                        (0x8000)            /*!< Correct Transfer */

/*******************  Bit definition for USB_FNR register  ********************/
 .equiv USB_FNR_FN,                          (0x07FF)            /*!< Frame Number */
 .equiv USB_FNR_LSOF,                        (0x1800)            /*!< Lost SOF */
 .equiv USB_FNR_LCK,                         (0x2000)            /*!< Locked */
 .equiv USB_FNR_RXDM,                        (0x4000)            /*!< Receive Data - Line Status */
 .equiv USB_FNR_RXDP,                        (0x8000)            /*!< Receive Data + Line Status */

/******************  Bit definition for USB_DADDR register  *******************/
 .equiv USB_DADDR_ADD,                       (0x7F)               /*!< ADD[6:0] bits (Device Address) */
 .equiv USB_DADDR_ADD0,                      (0x01)               /*!< Bit 0 */
 .equiv USB_DADDR_ADD1,                      (0x02)               /*!< Bit 1 */
 .equiv USB_DADDR_ADD2,                      (0x04)               /*!< Bit 2 */
 .equiv USB_DADDR_ADD3,                      (0x08)               /*!< Bit 3 */
 .equiv USB_DADDR_ADD4,                      (0x10)               /*!< Bit 4 */
 .equiv USB_DADDR_ADD5,                      (0x20)               /*!< Bit 5 */
 .equiv USB_DADDR_ADD6,                      (0x40)               /*!< Bit 6 */

 .equiv USB_DADDR_EF,                        (0x80)               /*!< Enable Function */

/******************  Bit definition for USB_BTABLE register  ******************/    
 .equiv USB_BTABLE_BTABLE,                   (0xFFF8)            /*!< Buffer Table */

/*!< Buffer descriptor table */
/*****************  Bit definition for USB_ADDR0_TX register  *****************/
 .equiv USB_ADDR0_TX_ADDR0_TX,               (0xFFFE)            /*!< Transmission Buffer Address 0 */

/*****************  Bit definition for USB_ADDR1_TX register  *****************/
 .equiv USB_ADDR1_TX_ADDR1_TX,               (0xFFFE)            /*!< Transmission Buffer Address 1 */

/*****************  Bit definition for USB_ADDR2_TX register  *****************/
 .equiv USB_ADDR2_TX_ADDR2_TX,               (0xFFFE)            /*!< Transmission Buffer Address 2 */

/*****************  Bit definition for USB_ADDR3_TX register  *****************/
 .equiv USB_ADDR3_TX_ADDR3_TX,               (0xFFFE)            /*!< Transmission Buffer Address 3 */

/*****************  Bit definition for USB_ADDR4_TX register  *****************/
 .equiv USB_ADDR4_TX_ADDR4_TX,               (0xFFFE)            /*!< Transmission Buffer Address 4 */

/*****************  Bit definition for USB_ADDR5_TX register  *****************/
 .equiv USB_ADDR5_TX_ADDR5_TX,               (0xFFFE)            /*!< Transmission Buffer Address 5 */

/*****************  Bit definition for USB_ADDR6_TX register  *****************/
 .equiv USB_ADDR6_TX_ADDR6_TX,               (0xFFFE)            /*!< Transmission Buffer Address 6 */

/*****************  Bit definition for USB_ADDR7_TX register  *****************/
 .equiv USB_ADDR7_TX_ADDR7_TX,               (0xFFFE)            /*!< Transmission Buffer Address 7 */

/*----------------------------------------------------------------------------*/

/*****************  Bit definition for USB_COUNT0_TX register  ****************/
 .equiv USB_COUNT0_TX_COUNT0_TX,             (0x03FF)            /*!< Transmission Byte Count 0 */

/*****************  Bit definition for USB_COUNT1_TX register  ****************/
 .equiv USB_COUNT1_TX_COUNT1_TX,             (0x03FF)            /*!< Transmission Byte Count 1 */

/*****************  Bit definition for USB_COUNT2_TX register  ****************/
 .equiv USB_COUNT2_TX_COUNT2_TX,             (0x03FF)            /*!< Transmission Byte Count 2 */

/*****************  Bit definition for USB_COUNT3_TX register  ****************/
 .equiv USB_COUNT3_TX_COUNT3_TX,             (0x03FF)            /*!< Transmission Byte Count 3 */

/*****************  Bit definition for USB_COUNT4_TX register  ****************/
 .equiv USB_COUNT4_TX_COUNT4_TX,             (0x03FF)            /*!< Transmission Byte Count 4 */

/*****************  Bit definition for USB_COUNT5_TX register  ****************/
 .equiv USB_COUNT5_TX_COUNT5_TX,             (0x03FF)            /*!< Transmission Byte Count 5 */

/*****************  Bit definition for USB_COUNT6_TX register  ****************/
 .equiv USB_COUNT6_TX_COUNT6_TX,             (0x03FF)            /*!< Transmission Byte Count 6 */

/*****************  Bit definition for USB_COUNT7_TX register  ****************/
 .equiv USB_COUNT7_TX_COUNT7_TX,             (0x03FF)            /*!< Transmission Byte Count 7 */

/*----------------------------------------------------------------------------*/

/****************  Bit definition for USB_COUNT0_TX_0 register  ***************/
 .equiv USB_COUNT0_TX_0_COUNT0_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 0 (low) */

/****************  Bit definition for USB_COUNT0_TX_1 register  ***************/
 .equiv USB_COUNT0_TX_1_COUNT0_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 0 (high) */

/****************  Bit definition for USB_COUNT1_TX_0 register  ***************/
 .equiv USB_COUNT1_TX_0_COUNT1_TX_0,          (0x000003FF)        /*!< Transmission Byte Count 1 (low) */

/****************  Bit definition for USB_COUNT1_TX_1 register  ***************/
 .equiv USB_COUNT1_TX_1_COUNT1_TX_1,          (0x03FF0000)        /*!< Transmission Byte Count 1 (high) */

/****************  Bit definition for USB_COUNT2_TX_0 register  ***************/
 .equiv USB_COUNT2_TX_0_COUNT2_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 2 (low) */

/****************  Bit definition for USB_COUNT2_TX_1 register  ***************/
 .equiv USB_COUNT2_TX_1_COUNT2_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 2 (high) */

/****************  Bit definition for USB_COUNT3_TX_0 register  ***************/
 .equiv USB_COUNT3_TX_0_COUNT3_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 3 (low) */

/****************  Bit definition for USB_COUNT3_TX_1 register  ***************/
 .equiv USB_COUNT3_TX_1_COUNT3_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 3 (high) */

/****************  Bit definition for USB_COUNT4_TX_0 register  ***************/
 .equiv USB_COUNT4_TX_0_COUNT4_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 4 (low) */

/****************  Bit definition for USB_COUNT4_TX_1 register  ***************/
 .equiv USB_COUNT4_TX_1_COUNT4_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 4 (high) */

/****************  Bit definition for USB_COUNT5_TX_0 register  ***************/
 .equiv USB_COUNT5_TX_0_COUNT5_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 5 (low) */

/****************  Bit definition for USB_COUNT5_TX_1 register  ***************/
 .equiv USB_COUNT5_TX_1_COUNT5_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 5 (high) */

/****************  Bit definition for USB_COUNT6_TX_0 register  ***************/
 .equiv USB_COUNT6_TX_0_COUNT6_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 6 (low) */

/****************  Bit definition for USB_COUNT6_TX_1 register  ***************/
 .equiv USB_COUNT6_TX_1_COUNT6_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 6 (high) */

/****************  Bit definition for USB_COUNT7_TX_0 register  ***************/
 .equiv USB_COUNT7_TX_0_COUNT7_TX_0,         (0x000003FF)        /*!< Transmission Byte Count 7 (low) */

/****************  Bit definition for USB_COUNT7_TX_1 register  ***************/
 .equiv USB_COUNT7_TX_1_COUNT7_TX_1,         (0x03FF0000)        /*!< Transmission Byte Count 7 (high) */

/*----------------------------------------------------------------------------*/

/*****************  Bit definition for USB_ADDR0_RX register  *****************/
 .equiv USB_ADDR0_RX_ADDR0_RX,               (0xFFFE)            /*!< Reception Buffer Address 0 */

/*****************  Bit definition for USB_ADDR1_RX register  *****************/
 .equiv USB_ADDR1_RX_ADDR1_RX,               (0xFFFE)            /*!< Reception Buffer Address 1 */

/*****************  Bit definition for USB_ADDR2_RX register  *****************/
 .equiv USB_ADDR2_RX_ADDR2_RX,               (0xFFFE)            /*!< Reception Buffer Address 2 */

/*****************  Bit definition for USB_ADDR3_RX register  *****************/
 .equiv USB_ADDR3_RX_ADDR3_RX,               (0xFFFE)            /*!< Reception Buffer Address 3 */

/*****************  Bit definition for USB_ADDR4_RX register  *****************/
 .equiv USB_ADDR4_RX_ADDR4_RX,               (0xFFFE)            /*!< Reception Buffer Address 4 */

/*****************  Bit definition for USB_ADDR5_RX register  *****************/
 .equiv USB_ADDR5_RX_ADDR5_RX,               (0xFFFE)            /*!< Reception Buffer Address 5 */

/*****************  Bit definition for USB_ADDR6_RX register  *****************/
 .equiv USB_ADDR6_RX_ADDR6_RX,               (0xFFFE)            /*!< Reception Buffer Address 6 */

/*****************  Bit definition for USB_ADDR7_RX register  *****************/
 .equiv USB_ADDR7_RX_ADDR7_RX,               (0xFFFE)            /*!< Reception Buffer Address 7 */

/*----------------------------------------------------------------------------*/

/*****************  Bit definition for USB_COUNT0_RX register  ****************/
 .equiv USB_COUNT0_RX_COUNT0_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT0_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT0_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT0_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT0_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT0_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT0_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT0_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT1_RX register  ****************/
 .equiv USB_COUNT1_RX_COUNT1_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT1_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT1_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT1_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT1_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT1_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT1_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT1_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT2_RX register  ****************/
 .equiv USB_COUNT2_RX_COUNT2_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT2_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT2_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT2_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT2_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT2_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT2_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT2_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT3_RX register  ****************/
 .equiv USB_COUNT3_RX_COUNT3_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT3_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT3_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT3_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT3_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT3_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT3_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT3_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT4_RX register  ****************/
 .equiv USB_COUNT4_RX_COUNT4_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT4_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT4_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT4_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT4_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT4_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT4_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT4_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT5_RX register  ****************/
 .equiv USB_COUNT5_RX_COUNT5_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT5_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT5_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT5_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT5_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT5_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT5_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT5_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT6_RX register  ****************/
 .equiv USB_COUNT6_RX_COUNT6_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT6_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT6_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT6_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT6_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT6_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT6_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT6_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*****************  Bit definition for USB_COUNT7_RX register  ****************/
 .equiv USB_COUNT7_RX_COUNT7_RX,             (0x03FF)            /*!< Reception Byte Count */

 .equiv USB_COUNT7_RX_NUM_BLOCK,             (0x7C00)            /*!< NUM_BLOCK[4:0] bits (Number of blocks) */
 .equiv USB_COUNT7_RX_NUM_BLOCK_0,           (0x0400)            /*!< Bit 0 */
 .equiv USB_COUNT7_RX_NUM_BLOCK_1,           (0x0800)            /*!< Bit 1 */
 .equiv USB_COUNT7_RX_NUM_BLOCK_2,           (0x1000)            /*!< Bit 2 */
 .equiv USB_COUNT7_RX_NUM_BLOCK_3,           (0x2000)            /*!< Bit 3 */
 .equiv USB_COUNT7_RX_NUM_BLOCK_4,           (0x4000)            /*!< Bit 4 */

 .equiv USB_COUNT7_RX_BLSIZE,                (0x8000)            /*!< BLock SIZE */

/*----------------------------------------------------------------------------*/

/****************  Bit definition for USB_COUNT0_RX_0 register  ***************/
 .equiv USB_COUNT0_RX_0_COUNT0_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT0_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT0_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT0_RX_1 register  ***************/
 .equiv USB_COUNT0_RX_1_COUNT0_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 1 */
 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT0_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT0_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/****************  Bit definition for USB_COUNT1_RX_0 register  ***************/
 .equiv USB_COUNT1_RX_0_COUNT1_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT1_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT1_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT1_RX_1 register  ***************/
 .equiv USB_COUNT1_RX_1_COUNT1_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT1_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT1_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/****************  Bit definition for USB_COUNT2_RX_0 register  ***************/
 .equiv USB_COUNT2_RX_0_COUNT2_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT2_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT2_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT2_RX_1 register  ***************/
 .equiv USB_COUNT2_RX_1_COUNT2_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT2_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT2_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/****************  Bit definition for USB_COUNT3_RX_0 register  ***************/
 .equiv USB_COUNT3_RX_0_COUNT3_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT3_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT3_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT3_RX_1 register  ***************/
 .equiv USB_COUNT3_RX_1_COUNT3_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT3_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT3_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/****************  Bit definition for USB_COUNT4_RX_0 register  ***************/
 .equiv USB_COUNT4_RX_0_COUNT4_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0_0,      (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0_1,      (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0_2,      (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0_3,      (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT4_RX_0_NUM_BLOCK_0_4,      (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT4_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT4_RX_1 register  ***************/
 .equiv USB_COUNT4_RX_1_COUNT4_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT4_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT4_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/****************  Bit definition for USB_COUNT5_RX_0 register  ***************/
 .equiv USB_COUNT5_RX_0_COUNT5_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT5_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT5_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT5_RX_1 register  ***************/
 .equiv USB_COUNT5_RX_1_COUNT5_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT5_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT5_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/***************  Bit definition for USB_COUNT6_RX_0  register  ***************/
 .equiv USB_COUNT6_RX_0_COUNT6_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT6_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT6_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/****************  Bit definition for USB_COUNT6_RX_1 register  ***************/
 .equiv USB_COUNT6_RX_1_COUNT6_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT6_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT6_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/***************  Bit definition for USB_COUNT7_RX_0 register  ****************/
 .equiv USB_COUNT7_RX_0_COUNT7_RX_0,         (0x000003FF)        /*!< Reception Byte Count (low) */

 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0,         (0x00007C00)        /*!< NUM_BLOCK_0[4:0] bits (Number of blocks) (low) */
 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0_0,       (0x00000400)        /*!< Bit 0 */
 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0_1,       (0x00000800)        /*!< Bit 1 */
 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0_2,       (0x00001000)        /*!< Bit 2 */
 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0_3,       (0x00002000)        /*!< Bit 3 */
 .equiv USB_COUNT7_RX_0_NUM_BLOCK_0_4,       (0x00004000)        /*!< Bit 4 */

 .equiv USB_COUNT7_RX_0_BLSIZE_0,            (0x00008000)        /*!< BLock SIZE (low) */

/***************  Bit definition for USB_COUNT7_RX_1 register  ****************/
 .equiv USB_COUNT7_RX_1_COUNT7_RX_1,         (0x03FF0000)        /*!< Reception Byte Count (high) */

 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1,         (0x7C000000)        /*!< NUM_BLOCK_1[4:0] bits (Number of blocks) (high) */
 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1_0,       (0x04000000)        /*!< Bit 0 */
 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1_1,       (0x08000000)        /*!< Bit 1 */
 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1_2,       (0x10000000)        /*!< Bit 2 */
 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1_3,       (0x20000000)        /*!< Bit 3 */
 .equiv USB_COUNT7_RX_1_NUM_BLOCK_1_4,       (0x40000000)        /*!< Bit 4 */

 .equiv USB_COUNT7_RX_1_BLSIZE_1,            (0x80000000)        /*!< BLock SIZE (high) */

/******************************************************************************/
/*                                                                            */
/*                         Controller Area Network                            */
/*                                                                            */
/******************************************************************************/

/*!< CAN control and status registers */
/*******************  Bit definition for CAN_MCR register  ********************/
 .equiv CAN_MCR_INRQ,                        (0x0001)            /*!< Initialization Request */
 .equiv CAN_MCR_SLEEP,                       (0x0002)            /*!< Sleep Mode Request */
 .equiv CAN_MCR_TXFP,                        (0x0004)            /*!< Transmit FIFO Priority */
 .equiv CAN_MCR_RFLM,                        (0x0008)            /*!< Receive FIFO Locked Mode */
 .equiv CAN_MCR_NART,                        (0x0010)            /*!< No Automatic Retransmission */
 .equiv CAN_MCR_AWUM,                        (0x0020)            /*!< Automatic Wakeup Mode */
 .equiv CAN_MCR_ABOM,                        (0x0040)            /*!< Automatic Bus-Off Management */
 .equiv CAN_MCR_TTCM,                        (0x0080)            /*!< Time Triggered Communication Mode */
 .equiv CAN_MCR_RESET,                       (0x8000)            /*!< CAN software master reset */

/*******************  Bit definition for CAN_MSR register  ********************/
 .equiv CAN_MSR_INAK,                        (0x0001)            /*!< Initialization Acknowledge */
 .equiv CAN_MSR_SLAK,                        (0x0002)            /*!< Sleep Acknowledge */
 .equiv CAN_MSR_ERRI,                        (0x0004)            /*!< Error Interrupt */
 .equiv CAN_MSR_WKUI,                        (0x0008)            /*!< Wakeup Interrupt */
 .equiv CAN_MSR_SLAKI,                       (0x0010)            /*!< Sleep Acknowledge Interrupt */
 .equiv CAN_MSR_TXM,                         (0x0100)            /*!< Transmit Mode */
 .equiv CAN_MSR_RXM,                         (0x0200)            /*!< Receive Mode */
 .equiv CAN_MSR_SAMP,                        (0x0400)            /*!< Last Sample Point */
 .equiv CAN_MSR_RX,                          (0x0800)            /*!< CAN Rx Signal */

/*******************  Bit definition for CAN_TSR register  ********************/
 .equiv CAN_TSR_RQCP0,                       (0x00000001)        /*!< Request Completed Mailbox0 */
 .equiv CAN_TSR_TXOK0,                       (0x00000002)        /*!< Transmission OK of Mailbox0 */
 .equiv CAN_TSR_ALST0,                       (0x00000004)        /*!< Arbitration Lost for Mailbox0 */
 .equiv CAN_TSR_TERR0,                       (0x00000008)        /*!< Transmission Error of Mailbox0 */
 .equiv CAN_TSR_ABRQ0,                       (0x00000080)        /*!< Abort Request for Mailbox0 */
 .equiv CAN_TSR_RQCP1,                       (0x00000100)        /*!< Request Completed Mailbox1 */
 .equiv CAN_TSR_TXOK1,                       (0x00000200)        /*!< Transmission OK of Mailbox1 */
 .equiv CAN_TSR_ALST1,                       (0x00000400)        /*!< Arbitration Lost for Mailbox1 */
 .equiv CAN_TSR_TERR1,                       (0x00000800)        /*!< Transmission Error of Mailbox1 */
 .equiv CAN_TSR_ABRQ1,                       (0x00008000)        /*!< Abort Request for Mailbox 1 */
 .equiv CAN_TSR_RQCP2,                       (0x00010000)        /*!< Request Completed Mailbox2 */
 .equiv CAN_TSR_TXOK2,                       (0x00020000)        /*!< Transmission OK of Mailbox 2 */
 .equiv CAN_TSR_ALST2,                       (0x00040000)        /*!< Arbitration Lost for mailbox 2 */
 .equiv CAN_TSR_TERR2,                       (0x00080000)        /*!< Transmission Error of Mailbox 2 */
 .equiv CAN_TSR_ABRQ2,                       (0x00800000)        /*!< Abort Request for Mailbox 2 */
 .equiv CAN_TSR_CODE,                        (0x03000000)        /*!< Mailbox Code */

 .equiv CAN_TSR_TME,                         (0x1C000000)        /*!< TME[2:0] bits */
 .equiv CAN_TSR_TME0,                        (0x04000000)        /*!< Transmit Mailbox 0 Empty */
 .equiv CAN_TSR_TME1,                        (0x08000000)        /*!< Transmit Mailbox 1 Empty */
 .equiv CAN_TSR_TME2,                        (0x10000000)        /*!< Transmit Mailbox 2 Empty */

 .equiv CAN_TSR_LOW,                         (0xE0000000)        /*!< LOW[2:0] bits */
 .equiv CAN_TSR_LOW0,                        (0x20000000)        /*!< Lowest Priority Flag for Mailbox 0 */
 .equiv CAN_TSR_LOW1,                        (0x40000000)        /*!< Lowest Priority Flag for Mailbox 1 */
 .equiv CAN_TSR_LOW2,                        (0x80000000)        /*!< Lowest Priority Flag for Mailbox 2 */

/*******************  Bit definition for CAN_RF0R register  *******************/
 .equiv CAN_RF0R_FMP0,                       (0x03)               /*!< FIFO 0 Message Pending */
 .equiv CAN_RF0R_FULL0,                      (0x08)               /*!< FIFO 0 Full */
 .equiv CAN_RF0R_FOVR0,                      (0x10)               /*!< FIFO 0 Overrun */
 .equiv CAN_RF0R_RFOM0,                      (0x20)               /*!< Release FIFO 0 Output Mailbox */

/*******************  Bit definition for CAN_RF1R register  *******************/
 .equiv CAN_RF1R_FMP1,                       (0x03)               /*!< FIFO 1 Message Pending */
 .equiv CAN_RF1R_FULL1,                      (0x08)               /*!< FIFO 1 Full */
 .equiv CAN_RF1R_FOVR1,                      (0x10)               /*!< FIFO 1 Overrun */
 .equiv CAN_RF1R_RFOM1,                      (0x20)               /*!< Release FIFO 1 Output Mailbox */

/********************  Bit definition for CAN_IER register  *******************/
 .equiv CAN_IER_TMEIE,                       (0x00000001)        /*!< Transmit Mailbox Empty Interrupt Enable */
 .equiv CAN_IER_FMPIE0,                      (0x00000002)        /*!< FIFO Message Pending Interrupt Enable */
 .equiv CAN_IER_FFIE0,                       (0x00000004)        /*!< FIFO Full Interrupt Enable */
 .equiv CAN_IER_FOVIE0,                      (0x00000008)        /*!< FIFO Overrun Interrupt Enable */
 .equiv CAN_IER_FMPIE1,                      (0x00000010)        /*!< FIFO Message Pending Interrupt Enable */
 .equiv CAN_IER_FFIE1,                       (0x00000020)        /*!< FIFO Full Interrupt Enable */
 .equiv CAN_IER_FOVIE1,                      (0x00000040)        /*!< FIFO Overrun Interrupt Enable */
 .equiv CAN_IER_EWGIE,                       (0x00000100)        /*!< Error Warning Interrupt Enable */
 .equiv CAN_IER_EPVIE,                       (0x00000200)        /*!< Error Passive Interrupt Enable */
 .equiv CAN_IER_BOFIE,                       (0x00000400)        /*!< Bus-Off Interrupt Enable */
 .equiv CAN_IER_LECIE,                       (0x00000800)        /*!< Last Error Code Interrupt Enable */
 .equiv CAN_IER_ERRIE,                       (0x00008000)        /*!< Error Interrupt Enable */
 .equiv CAN_IER_WKUIE,                       (0x00010000)        /*!< Wakeup Interrupt Enable */
 .equiv CAN_IER_SLKIE,                       (0x00020000)        /*!< Sleep Interrupt Enable */

/********************  Bit definition for CAN_ESR register  *******************/
 .equiv CAN_ESR_EWGF,                        (0x00000001)        /*!< Error Warning Flag */
 .equiv CAN_ESR_EPVF,                        (0x00000002)        /*!< Error Passive Flag */
 .equiv CAN_ESR_BOFF,                        (0x00000004)        /*!< Bus-Off Flag */

 .equiv CAN_ESR_LEC,                         (0x00000070)        /*!< LEC[2:0] bits (Last Error Code) */
 .equiv CAN_ESR_LEC_0,                       (0x00000010)        /*!< Bit 0 */
 .equiv CAN_ESR_LEC_1,                       (0x00000020)        /*!< Bit 1 */
 .equiv CAN_ESR_LEC_2,                       (0x00000040)        /*!< Bit 2 */

 .equiv CAN_ESR_TEC,                         (0x00FF0000)        /*!< Least significant byte of the 9-bit Transmit Error Counter */
 .equiv CAN_ESR_REC,                         (0xFF000000)        /*!< Receive Error Counter */

/*******************  Bit definition for CAN_BTR register  ********************/
 .equiv CAN_BTR_BRP,                         (0x000003FF)        /*!< Baud Rate Prescaler */
 .equiv CAN_BTR_TS1,                         (0x000F0000)        /*!< Time Segment 1 */
 .equiv CAN_BTR_TS2,                         (0x00700000)        /*!< Time Segment 2 */
 .equiv CAN_BTR_SJW,                         (0x03000000)        /*!< Resynchronization Jump Width */
 .equiv CAN_BTR_LBKM,                        (0x40000000)        /*!< Loop Back Mode (Debug) */
 .equiv CAN_BTR_SILM,                        (0x80000000)        /*!< Silent Mode */

/*!< Mailbox registers */
/******************  Bit definition for CAN_TI0R register  ********************/
 .equiv CAN_TI0R_TXRQ,                       (0x00000001)        /*!< Transmit Mailbox Request */
 .equiv CAN_TI0R_RTR,                        (0x00000002)        /*!< Remote Transmission Request */
 .equiv CAN_TI0R_IDE,                        (0x00000004)        /*!< Identifier Extension */
 .equiv CAN_TI0R_EXID,                       (0x001FFFF8)        /*!< Extended Identifier */
 .equiv CAN_TI0R_STID,                       (0xFFE00000)        /*!< Standard Identifier or Extended Identifier */

/******************  Bit definition for CAN_TDT0R register  *******************/
 .equiv CAN_TDT0R_DLC,                       (0x0000000F)        /*!< Data Length Code */
 .equiv CAN_TDT0R_TGT,                       (0x00000100)        /*!< Transmit Global Time */
 .equiv CAN_TDT0R_TIME,                      (0xFFFF0000)        /*!< Message Time Stamp */

/******************  Bit definition for CAN_TDL0R register  *******************/
 .equiv CAN_TDL0R_DATA0,                     (0x000000FF)        /*!< Data byte 0 */
 .equiv CAN_TDL0R_DATA1,                     (0x0000FF00)        /*!< Data byte 1 */
 .equiv CAN_TDL0R_DATA2,                     (0x00FF0000)        /*!< Data byte 2 */
 .equiv CAN_TDL0R_DATA3,                     (0xFF000000)        /*!< Data byte 3 */

/******************  Bit definition for CAN_TDH0R register  *******************/
 .equiv CAN_TDH0R_DATA4,                     (0x000000FF)        /*!< Data byte 4 */
 .equiv CAN_TDH0R_DATA5,                     (0x0000FF00)        /*!< Data byte 5 */
 .equiv CAN_TDH0R_DATA6,                     (0x00FF0000)        /*!< Data byte 6 */
 .equiv CAN_TDH0R_DATA7,                     (0xFF000000)        /*!< Data byte 7 */

/*******************  Bit definition for CAN_TI1R register  *******************/
 .equiv CAN_TI1R_TXRQ,                       (0x00000001)        /*!< Transmit Mailbox Request */
 .equiv CAN_TI1R_RTR,                        (0x00000002)        /*!< Remote Transmission Request */
 .equiv CAN_TI1R_IDE,                        (0x00000004)        /*!< Identifier Extension */
 .equiv CAN_TI1R_EXID,                       (0x001FFFF8)        /*!< Extended Identifier */
 .equiv CAN_TI1R_STID,                       (0xFFE00000)        /*!< Standard Identifier or Extended Identifier */

/*******************  Bit definition for CAN_TDT1R register  ******************/
 .equiv CAN_TDT1R_DLC,                       (0x0000000F)        /*!< Data Length Code */
 .equiv CAN_TDT1R_TGT,                       (0x00000100)        /*!< Transmit Global Time */
 .equiv CAN_TDT1R_TIME,                      (0xFFFF0000)        /*!< Message Time Stamp */

/*******************  Bit definition for CAN_TDL1R register  ******************/
 .equiv CAN_TDL1R_DATA0,                     (0x000000FF)        /*!< Data byte 0 */
 .equiv CAN_TDL1R_DATA1,                     (0x0000FF00)        /*!< Data byte 1 */
 .equiv CAN_TDL1R_DATA2,                     (0x00FF0000)        /*!< Data byte 2 */
 .equiv CAN_TDL1R_DATA3,                     (0xFF000000)        /*!< Data byte 3 */

/*******************  Bit definition for CAN_TDH1R register  ******************/
 .equiv CAN_TDH1R_DATA4,                     (0x000000FF)        /*!< Data byte 4 */
 .equiv CAN_TDH1R_DATA5,                     (0x0000FF00)        /*!< Data byte 5 */
 .equiv CAN_TDH1R_DATA6,                     (0x00FF0000)        /*!< Data byte 6 */
 .equiv CAN_TDH1R_DATA7,                     (0xFF000000)        /*!< Data byte 7 */

/*******************  Bit definition for CAN_TI2R register  *******************/
 .equiv CAN_TI2R_TXRQ,                       (0x00000001)        /*!< Transmit Mailbox Request */
 .equiv CAN_TI2R_RTR,                        (0x00000002)        /*!< Remote Transmission Request */
 .equiv CAN_TI2R_IDE,                        (0x00000004)        /*!< Identifier Extension */
 .equiv CAN_TI2R_EXID,                       (0x001FFFF8)        /*!< Extended identifier */
 .equiv CAN_TI2R_STID,                       (0xFFE00000)        /*!< Standard Identifier or Extended Identifier */

/*******************  Bit definition for CAN_TDT2R register  ******************/  
 .equiv CAN_TDT2R_DLC,                       (0x0000000F)        /*!< Data Length Code */
 .equiv CAN_TDT2R_TGT,                       (0x00000100)        /*!< Transmit Global Time */
 .equiv CAN_TDT2R_TIME,                      (0xFFFF0000)        /*!< Message Time Stamp */

/*******************  Bit definition for CAN_TDL2R register  ******************/
 .equiv CAN_TDL2R_DATA0,                     (0x000000FF)        /*!< Data byte 0 */
 .equiv CAN_TDL2R_DATA1,                     (0x0000FF00)        /*!< Data byte 1 */
 .equiv CAN_TDL2R_DATA2,                     (0x00FF0000)        /*!< Data byte 2 */
 .equiv CAN_TDL2R_DATA3,                     (0xFF000000)        /*!< Data byte 3 */

/*******************  Bit definition for CAN_TDH2R register  ******************/
 .equiv CAN_TDH2R_DATA4,                     (0x000000FF)        /*!< Data byte 4 */
 .equiv CAN_TDH2R_DATA5,                     (0x0000FF00)        /*!< Data byte 5 */
 .equiv CAN_TDH2R_DATA6,                     (0x00FF0000)        /*!< Data byte 6 */
 .equiv CAN_TDH2R_DATA7,                     (0xFF000000)        /*!< Data byte 7 */

/*******************  Bit definition for CAN_RI0R register  *******************/
 .equiv CAN_RI0R_RTR,                        (0x00000002)        /*!< Remote Transmission Request */
 .equiv CAN_RI0R_IDE,                        (0x00000004)        /*!< Identifier Extension */
 .equiv CAN_RI0R_EXID,                       (0x001FFFF8)        /*!< Extended Identifier */
 .equiv CAN_RI0R_STID,                       (0xFFE00000)        /*!< Standard Identifier or Extended Identifier */

/*******************  Bit definition for CAN_RDT0R register  ******************/
 .equiv CAN_RDT0R_DLC,                       (0x0000000F)        /*!< Data Length Code */
 .equiv CAN_RDT0R_FMI,                       (0x0000FF00)        /*!< Filter Match Index */
 .equiv CAN_RDT0R_TIME,                      (0xFFFF0000)        /*!< Message Time Stamp */

/*******************  Bit definition for CAN_RDL0R register  ******************/
 .equiv CAN_RDL0R_DATA0,                     (0x000000FF)        /*!< Data byte 0 */
 .equiv CAN_RDL0R_DATA1,                     (0x0000FF00)        /*!< Data byte 1 */
 .equiv CAN_RDL0R_DATA2,                     (0x00FF0000)        /*!< Data byte 2 */
 .equiv CAN_RDL0R_DATA3,                     (0xFF000000)        /*!< Data byte 3 */

/*******************  Bit definition for CAN_RDH0R register  ******************/
 .equiv CAN_RDH0R_DATA4,                     (0x000000FF)        /*!< Data byte 4 */
 .equiv CAN_RDH0R_DATA5,                     (0x0000FF00)        /*!< Data byte 5 */
 .equiv CAN_RDH0R_DATA6,                     (0x00FF0000)        /*!< Data byte 6 */
 .equiv CAN_RDH0R_DATA7,                     (0xFF000000)        /*!< Data byte 7 */

/*******************  Bit definition for CAN_RI1R register  *******************/
 .equiv CAN_RI1R_RTR,                        (0x00000002)        /*!< Remote Transmission Request */
 .equiv CAN_RI1R_IDE,                        (0x00000004)        /*!< Identifier Extension */
 .equiv CAN_RI1R_EXID,                       (0x001FFFF8)        /*!< Extended identifier */
 .equiv CAN_RI1R_STID,                       (0xFFE00000)        /*!< Standard Identifier or Extended Identifier */

/*******************  Bit definition for CAN_RDT1R register  ******************/
 .equiv CAN_RDT1R_DLC,                       (0x0000000F)        /*!< Data Length Code */
 .equiv CAN_RDT1R_FMI,                       (0x0000FF00)        /*!< Filter Match Index */
 .equiv CAN_RDT1R_TIME,                      (0xFFFF0000)        /*!< Message Time Stamp */

/*******************  Bit definition for CAN_RDL1R register  ******************/
 .equiv CAN_RDL1R_DATA0,                     (0x000000FF)        /*!< Data byte 0 */
 .equiv CAN_RDL1R_DATA1,                     (0x0000FF00)        /*!< Data byte 1 */
 .equiv CAN_RDL1R_DATA2,                     (0x00FF0000)        /*!< Data byte 2 */
 .equiv CAN_RDL1R_DATA3,                     (0xFF000000)        /*!< Data byte 3 */

/*******************  Bit definition for CAN_RDH1R register  ******************/
 .equiv CAN_RDH1R_DATA4,                     (0x000000FF)        /*!< Data byte 4 */
 .equiv CAN_RDH1R_DATA5,                     (0x0000FF00)        /*!< Data byte 5 */
 .equiv CAN_RDH1R_DATA6,                     (0x00FF0000)        /*!< Data byte 6 */
 .equiv CAN_RDH1R_DATA7,                     (0xFF000000)        /*!< Data byte 7 */

/*!< CAN filter registers */
/*******************  Bit definition for CAN_FMR register  ********************/
 .equiv CAN_FMR_FINIT,                       (0x01)               /*!< Filter Init Mode */

/*******************  Bit definition for CAN_FM1R register  *******************/
 .equiv CAN_FM1R_FBM,                        (0x3FFF)            /*!< Filter Mode */

/*******************  Bit definition for CAN_FS1R register  *******************/
 .equiv CAN_FS1R_FSC,                        (0x3FFF)            /*!< Filter Scale Configuration */

/******************  Bit definition for CAN_FFA1R register  *******************/
 .equiv CAN_FFA1R_FFA,                       (0x3FFF)            /*!< Filter FIFO Assignment */

/*******************  Bit definition for CAN_FA1R register  *******************/
 .equiv CAN_FA1R_FACT,                       (0x3FFF)            /*!< Filter Active */

/******************************************************************************/
/*                                                                            */
/*                        Serial Peripheral Interface                         */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for SPI_CR1 register  ********************/
 .equiv SPI_CR1_CPHA,                        (0x0001)            /*!< Clock Phase */
 .equiv SPI_CR1_CPOL,                        (0x0002)            /*!< Clock Polarity */
 .equiv SPI_CR1_MSTR,                        (0x0004)            /*!< Master Selection */

 .equiv SPI_CR1_BR,                          (0x0038)            /*!< BR[2:0] bits (Baud Rate Control) */
 .equiv SPI_CR1_BR_0,                        (0x0008)            /*!< Bit 0 */
 .equiv SPI_CR1_BR_1,                        (0x0010)            /*!< Bit 1 */
 .equiv SPI_CR1_BR_2,                        (0x0020)            /*!< Bit 2 */

 .equiv SPI_CR1_SPE,                         (0x0040)            /*!< SPI Enable */
 .equiv SPI_CR1_LSBFIRST,                    (0x0080)            /*!< Frame Format */
 .equiv SPI_CR1_SSI,                         (0x0100)            /*!< Internal slave select */
 .equiv SPI_CR1_SSM,                         (0x0200)            /*!< Software slave management */
 .equiv SPI_CR1_RXONLY,                      (0x0400)            /*!< Receive only */
 .equiv SPI_CR1_DFF,                         (0x0800)            /*!< Data Frame Format */
 .equiv SPI_CR1_CRCNEXT,                     (0x1000)            /*!< Transmit CRC next */
 .equiv SPI_CR1_CRCEN,                       (0x2000)            /*!< Hardware CRC calculation enable */
 .equiv SPI_CR1_BIDIOE,                      (0x4000)            /*!< Output enable in bidirectional mode */
 .equiv SPI_CR1_BIDIMODE,                    (0x8000)            /*!< Bidirectional data mode enable */

/*******************  Bit definition for SPI_CR2 register  ********************/
 .equiv SPI_CR2_RXDMAEN,                     (0x01)               /*!< Rx Buffer DMA Enable */
 .equiv SPI_CR2_TXDMAEN,                     (0x02)               /*!< Tx Buffer DMA Enable */
 .equiv SPI_CR2_SSOE,                        (0x04)               /*!< SS Output Enable */
 .equiv SPI_CR2_ERRIE,                       (0x20)               /*!< Error Interrupt Enable */
 .equiv SPI_CR2_RXNEIE,                      (0x40)               /*!< RX buffer Not Empty Interrupt Enable */
 .equiv SPI_CR2_TXEIE,                       (0x80)               /*!< Tx buffer Empty Interrupt Enable */

/********************  Bit definition for SPI_SR register  ********************/
 .equiv SPI_SR_RXNE,                         (0x01)               /*!< Receive buffer Not Empty */
 .equiv SPI_SR_TXE,                          (0x02)               /*!< Transmit buffer Empty */
 .equiv SPI_SR_CHSIDE,                       (0x04)               /*!< Channel side */
 .equiv SPI_SR_UDR,                          (0x08)               /*!< Underrun flag */
 .equiv SPI_SR_CRCERR,                       (0x10)               /*!< CRC Error flag */
 .equiv SPI_SR_MODF,                         (0x20)               /*!< Mode fault */
 .equiv SPI_SR_OVR,                          (0x40)               /*!< Overrun flag */
 .equiv SPI_SR_BSY,                          (0x80)               /*!< Busy flag */

/********************  Bit definition for SPI_DR register  ********************/
 .equiv SPI_DR_DR,                           (0xFFFF)            /*!< Data Register */

/*******************  Bit definition for SPI_CRCPR register  ******************/
 .equiv SPI_CRCPR_CRCPOLY,                   (0xFFFF)            /*!< CRC polynomial register */

/******************  Bit definition for SPI_RXCRCR register  ******************/
 .equiv SPI_RXCRCR_RXCRC,                    (0xFFFF)            /*!< Rx CRC Register */

/******************  Bit definition for SPI_TXCRCR register  ******************/
 .equiv SPI_TXCRCR_TXCRC,                    (0xFFFF)            /*!< Tx CRC Register */

/******************  Bit definition for SPI_I2SCFGR register  *****************/
 .equiv SPI_I2SCFGR_CHLEN,                   (0x0001)            /*!< Channel length (number of bits per audio channel) */

 .equiv SPI_I2SCFGR_DATLEN,                  (0x0006)            /*!< DATLEN[1:0] bits (Data length to be transferred) */
 .equiv SPI_I2SCFGR_DATLEN_0,                (0x0002)            /*!< Bit 0 */
 .equiv SPI_I2SCFGR_DATLEN_1,                (0x0004)            /*!< Bit 1 */

 .equiv SPI_I2SCFGR_CKPOL,                   (0x0008)            /*!< steady state clock polarity */

 .equiv SPI_I2SCFGR_I2SSTD,                  (0x0030)            /*!< I2SSTD[1:0] bits (I2S standard selection) */
 .equiv SPI_I2SCFGR_I2SSTD_0,                (0x0010)            /*!< Bit 0 */
 .equiv SPI_I2SCFGR_I2SSTD_1,                (0x0020)            /*!< Bit 1 */

 .equiv SPI_I2SCFGR_PCMSYNC,                 (0x0080)            /*!< PCM frame synchronization */

 .equiv SPI_I2SCFGR_I2SCFG,                  (0x0300)            /*!< I2SCFG[1:0] bits (I2S configuration mode) */
 .equiv SPI_I2SCFGR_I2SCFG_0,                (0x0100)            /*!< Bit 0 */
 .equiv SPI_I2SCFGR_I2SCFG_1,                (0x0200)            /*!< Bit 1 */

 .equiv SPI_I2SCFGR_I2SE,                    (0x0400)            /*!< I2S Enable */
 .equiv SPI_I2SCFGR_I2SMOD,                  (0x0800)            /*!< I2S mode selection */

/******************  Bit definition for SPI_I2SPR register  *******************/
 .equiv SPI_I2SPR_I2SDIV,                    (0x00FF)            /*!< I2S Linear prescaler */
 .equiv SPI_I2SPR_ODD,                       (0x0100)            /*!< Odd factor for the prescaler */
 .equiv SPI_I2SPR_MCKOE,                     (0x0200)            /*!< Master Clock Output Enable */

/******************************************************************************/
/*                                                                            */
/*                      Inter-integrated Circuit Interface                    */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for I2C_CR1 register  ********************/
 .equiv I2C_CR1_PE,                          (0x0001)            /*!< Peripheral Enable */
 .equiv I2C_CR1_SMBUS,                       (0x0002)            /*!< SMBus Mode */
 .equiv I2C_CR1_SMBTYPE,                     (0x0008)            /*!< SMBus Type */
 .equiv I2C_CR1_ENARP,                       (0x0010)            /*!< ARP Enable */
 .equiv I2C_CR1_ENPEC,                       (0x0020)            /*!< PEC Enable */
 .equiv I2C_CR1_ENGC,                        (0x0040)            /*!< General Call Enable */
 .equiv I2C_CR1_NOSTRETCH,                   (0x0080)            /*!< Clock Stretching Disable (Slave mode) */
 .equiv I2C_CR1_START,                       (0x0100)            /*!< Start Generation */
 .equiv I2C_CR1_STOP,                        (0x0200)            /*!< Stop Generation */
 .equiv I2C_CR1_ACK,                         (0x0400)            /*!< Acknowledge Enable */
 .equiv I2C_CR1_POS,                         (0x0800)            /*!< Acknowledge/PEC Position (for data reception) */
 .equiv I2C_CR1_PEC,                         (0x1000)            /*!< Packet Error Checking */
 .equiv I2C_CR1_ALERT,                       (0x2000)            /*!< SMBus Alert */
 .equiv I2C_CR1_SWRST,                       (0x8000)            /*!< Software Reset */

/*******************  Bit definition for I2C_CR2 register  ********************/
 .equiv I2C_CR2_FREQ,                        (0x003F)            /*!< FREQ[5:0] bits (Peripheral Clock Frequency) */
 .equiv I2C_CR2_FREQ_0,                      (0x0001)            /*!< Bit 0 */
 .equiv I2C_CR2_FREQ_1,                      (0x0002)            /*!< Bit 1 */
 .equiv I2C_CR2_FREQ_2,                      (0x0004)            /*!< Bit 2 */
 .equiv I2C_CR2_FREQ_3,                      (0x0008)            /*!< Bit 3 */
 .equiv I2C_CR2_FREQ_4,                      (0x0010)            /*!< Bit 4 */
 .equiv I2C_CR2_FREQ_5,                      (0x0020)            /*!< Bit 5 */

 .equiv I2C_CR2_ITERREN,                     (0x0100)            /*!< Error Interrupt Enable */
 .equiv I2C_CR2_ITEVTEN,                     (0x0200)            /*!< Event Interrupt Enable */
 .equiv I2C_CR2_ITBUFEN,                     (0x0400)            /*!< Buffer Interrupt Enable */
 .equiv I2C_CR2_DMAEN,                       (0x0800)            /*!< DMA Requests Enable */
 .equiv I2C_CR2_LAST,                        (0x1000)            /*!< DMA Last Transfer */

/*******************  Bit definition for I2C_OAR1 register  *******************/
 .equiv I2C_OAR1_ADD1_7,                     (0x00FE)            /*!< Interface Address */
 .equiv I2C_OAR1_ADD8_9,                     (0x0300)            /*!< Interface Address */

 .equiv I2C_OAR1_ADD0,                       (0x0001)            /*!< Bit 0 */
 .equiv I2C_OAR1_ADD1,                       (0x0002)            /*!< Bit 1 */
 .equiv I2C_OAR1_ADD2,                       (0x0004)            /*!< Bit 2 */
 .equiv I2C_OAR1_ADD3,                       (0x0008)            /*!< Bit 3 */
 .equiv I2C_OAR1_ADD4,                       (0x0010)            /*!< Bit 4 */
 .equiv I2C_OAR1_ADD5,                       (0x0020)            /*!< Bit 5 */
 .equiv I2C_OAR1_ADD6,                       (0x0040)            /*!< Bit 6 */
 .equiv I2C_OAR1_ADD7,                       (0x0080)            /*!< Bit 7 */
 .equiv I2C_OAR1_ADD8,                       (0x0100)            /*!< Bit 8 */
 .equiv I2C_OAR1_ADD9,                       (0x0200)            /*!< Bit 9 */

 .equiv I2C_OAR1_ADDMODE,                    (0x8000)            /*!< Addressing Mode (Slave mode) */

/*******************  Bit definition for I2C_OAR2 register  *******************/
 .equiv I2C_OAR2_ENDUAL,                     (0x01)               /*!< Dual addressing mode enable */
 .equiv I2C_OAR2_ADD2,                       (0xFE)               /*!< Interface address */

/********************  Bit definition for I2C_DR register  ********************/
 .equiv I2C_DR_DR,                           (0xFF)               /*!< 8-bit Data Register */

/*******************  Bit definition for I2C_SR1 register  ********************/
 .equiv I2C_SR1_SB,                          (0x0001)            /*!< Start Bit (Master mode) */
 .equiv I2C_SR1_ADDR,                        (0x0002)            /*!< Address sent (master mode)/matched (slave mode) */
 .equiv I2C_SR1_BTF,                         (0x0004)            /*!< Byte Transfer Finished */
 .equiv I2C_SR1_ADD10,                       (0x0008)            /*!< 10-bit header sent (Master mode) */
 .equiv I2C_SR1_STOPF,                       (0x0010)            /*!< Stop detection (Slave mode) */
 .equiv I2C_SR1_RXNE,                        (0x0040)            /*!< Data Register not Empty (receivers) */
 .equiv I2C_SR1_TXE,                         (0x0080)            /*!< Data Register Empty (transmitters) */
 .equiv I2C_SR1_BERR,                        (0x0100)            /*!< Bus Error */
 .equiv I2C_SR1_ARLO,                        (0x0200)            /*!< Arbitration Lost (master mode) */
 .equiv I2C_SR1_AF,                          (0x0400)            /*!< Acknowledge Failure */
 .equiv I2C_SR1_OVR,                         (0x0800)            /*!< Overrun/Underrun */
 .equiv I2C_SR1_PECERR,                      (0x1000)            /*!< PEC Error in reception */
 .equiv I2C_SR1_TIMEOUT,                     (0x4000)            /*!< Timeout or Tlow Error */
 .equiv I2C_SR1_SMBALERT,                    (0x8000)            /*!< SMBus Alert */

/*******************  Bit definition for I2C_SR2 register  ********************/
 .equiv I2C_SR2_MSL,                         (0x0001)            /*!< Master/Slave */
 .equiv I2C_SR2_BUSY,                        (0x0002)            /*!< Bus Busy */
 .equiv I2C_SR2_TRA,                         (0x0004)            /*!< Transmitter/Receiver */
 .equiv I2C_SR2_GENCALL,                     (0x0010)            /*!< General Call Address (Slave mode) */
 .equiv I2C_SR2_SMBDEFAULT,                  (0x0020)            /*!< SMBus Device Default Address (Slave mode) */
 .equiv I2C_SR2_SMBHOST,                     (0x0040)            /*!< SMBus Host Header (Slave mode) */
 .equiv I2C_SR2_DUALF,                       (0x0080)            /*!< Dual Flag (Slave mode) */
 .equiv I2C_SR2_PEC,                         (0xFF00)            /*!< Packet Error Checking Register */

/*******************  Bit definition for I2C_CCR register  ********************/
 .equiv I2C_CCR_CCR,                         (0x0FFF)            /*!< Clock Control Register in Fast/Standard mode (Master mode) */
 .equiv I2C_CCR_DUTY,                        (0x4000)            /*!< Fast Mode Duty Cycle */
 .equiv I2C_CCR_FS,                          (0x8000)            /*!< I2C Master Mode Selection */

/******************  Bit definition for I2C_TRISE register  *******************/
 .equiv I2C_TRISE_TRISE,                     (0x3F)               /*!< Maximum Rise Time in Fast/Standard mode (Master mode) */

/******************************************************************************/
/*                                                                            */
/*         Universal Synchronous Asynchronous Receiver Transmitter            */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for USART_SR register  *******************/
 .equiv USART_SR_PE,                         (0x0001)            /*!< Parity Error */
 .equiv USART_SR_FE,                         (0x0002)            /*!< Framing Error */
 .equiv USART_SR_NE,                         (0x0004)            /*!< Noise Error Flag */
 .equiv USART_SR_ORE,                        (0x0008)            /*!< OverRun Error */
 .equiv USART_SR_IDLE,                       (0x0010)            /*!< IDLE line detected */
 .equiv USART_SR_RXNE,                       (0x0020)            /*!< Read Data Register Not Empty */
 .equiv USART_SR_TC,                         (0x0040)            /*!< Transmission Complete */
 .equiv USART_SR_TXE,                        (0x0080)            /*!< Transmit Data Register Empty */
 .equiv USART_SR_LBD,                        (0x0100)            /*!< LIN Break Detection Flag */
 .equiv USART_SR_CTS,                        (0x0200)            /*!< CTS Flag */

/*******************  Bit definition for USART_DR register  *******************/
 .equiv USART_DR_DR,                         (0x01FF)            /*!< Data value */

/******************  Bit definition for USART_BRR register  *******************/
 .equiv USART_BRR_DIV_Fraction,              (0x000F)            /*!< Fraction of USARTDIV */
 .equiv USART_BRR_DIV_Mantissa,              (0xFFF0)            /*!< Mantissa of USARTDIV */

/******************  Bit definition for USART_CR1 register  *******************/
 .equiv USART_CR1_SBK,                       (0x0001)            /*!< Send Break */
 .equiv USART_CR1_RWU,                       (0x0002)            /*!< Receiver wakeup */
 .equiv USART_CR1_RE,                        (0x0004)            /*!< Receiver Enable */
 .equiv USART_CR1_TE,                        (0x0008)            /*!< Transmitter Enable */
 .equiv USART_CR1_IDLEIE,                    (0x0010)            /*!< IDLE Interrupt Enable */
 .equiv USART_CR1_RXNEIE,                    (0x0020)            /*!< RXNE Interrupt Enable */
 .equiv USART_CR1_TCIE,                      (0x0040)            /*!< Transmission Complete Interrupt Enable */
 .equiv USART_CR1_TXEIE,                     (0x0080)            /*!< PE Interrupt Enable */
 .equiv USART_CR1_PEIE,                      (0x0100)            /*!< PE Interrupt Enable */
 .equiv USART_CR1_PS,                        (0x0200)            /*!< Parity Selection */
 .equiv USART_CR1_PCE,                       (0x0400)            /*!< Parity Control Enable */
 .equiv USART_CR1_WAKE,                      (0x0800)            /*!< Wakeup method */
 .equiv USART_CR1_M,                         (0x1000)            /*!< Word length */
 .equiv USART_CR1_UE,                        (0x2000)            /*!< USART Enable */
 .equiv USART_CR1_OVER8,                     (0x8000)            /*!< USART Oversmapling 8-bits */

/******************  Bit definition for USART_CR2 register  *******************/
 .equiv USART_CR2_ADD,                       (0x000F)            /*!< Address of the USART node */
 .equiv USART_CR2_LBDL,                      (0x0020)            /*!< LIN Break Detection Length */
 .equiv USART_CR2_LBDIE,                     (0x0040)            /*!< LIN Break Detection Interrupt Enable */
 .equiv USART_CR2_LBCL,                      (0x0100)            /*!< Last Bit Clock pulse */
 .equiv USART_CR2_CPHA,                      (0x0200)            /*!< Clock Phase */
 .equiv USART_CR2_CPOL,                      (0x0400)            /*!< Clock Polarity */
 .equiv USART_CR2_CLKEN,                     (0x0800)            /*!< Clock Enable */

 .equiv USART_CR2_STOP,                      (0x3000)            /*!< STOP[1:0] bits (STOP bits) */
 .equiv USART_CR2_STOP_0,                    (0x1000)            /*!< Bit 0 */
 .equiv USART_CR2_STOP_1,                    (0x2000)            /*!< Bit 1 */

 .equiv USART_CR2_LINEN,                     (0x4000)            /*!< LIN mode enable */

/******************  Bit definition for USART_CR3 register  *******************/
 .equiv USART_CR3_EIE,                       (0x0001)            /*!< Error Interrupt Enable */
 .equiv USART_CR3_IREN,                      (0x0002)            /*!< IrDA mode Enable */
 .equiv USART_CR3_IRLP,                      (0x0004)            /*!< IrDA Low-Power */
 .equiv USART_CR3_HDSEL,                     (0x0008)            /*!< Half-Duplex Selection */
 .equiv USART_CR3_NACK,                      (0x0010)            /*!< Smartcard NACK enable */
 .equiv USART_CR3_SCEN,                      (0x0020)            /*!< Smartcard mode enable */
 .equiv USART_CR3_DMAR,                      (0x0040)            /*!< DMA Enable Receiver */
 .equiv USART_CR3_DMAT,                      (0x0080)            /*!< DMA Enable Transmitter */
 .equiv USART_CR3_RTSE,                      (0x0100)            /*!< RTS Enable */
 .equiv USART_CR3_CTSE,                      (0x0200)            /*!< CTS Enable */
 .equiv USART_CR3_CTSIE,                     (0x0400)            /*!< CTS Interrupt Enable */
 .equiv USART_CR3_ONEBIT,                    (0x0800)            /*!< One Bit method */

/******************  Bit definition for USART_GTPR register  ******************/
 .equiv USART_GTPR_PSC,                      (0x00FF)            /*!< PSC[7:0] bits (Prescaler value) */
 .equiv USART_GTPR_PSC_0,                    (0x0001)            /*!< Bit 0 */
 .equiv USART_GTPR_PSC_1,                    (0x0002)            /*!< Bit 1 */
 .equiv USART_GTPR_PSC_2,                    (0x0004)            /*!< Bit 2 */
 .equiv USART_GTPR_PSC_3,                    (0x0008)            /*!< Bit 3 */
 .equiv USART_GTPR_PSC_4,                    (0x0010)            /*!< Bit 4 */
 .equiv USART_GTPR_PSC_5,                    (0x0020)            /*!< Bit 5 */
 .equiv USART_GTPR_PSC_6,                    (0x0040)            /*!< Bit 6 */
 .equiv USART_GTPR_PSC_7,                    (0x0080)            /*!< Bit 7 */

 .equiv USART_GTPR_GT,                       (0xFF00)            /*!< Guard time value */

/******************************************************************************/
/*                                                                            */
/*                                 Debug MCU                                  */
/*                                                                            */
/******************************************************************************/

/****************  Bit definition for DBGMCU_IDCODE register  *****************/
 .equiv DBGMCU_IDCODE_DEV_ID,                (0x00000FFF)        /*!< Device Identifier */

 .equiv DBGMCU_IDCODE_REV_ID,                (0xFFFF0000)        /*!< REV_ID[15:0] bits (Revision Identifier) */

/******************  Bit definition for DBGMCU_CR register  *******************/
 .equiv DBGMCU_CR_DBG_SLEEP,                 (0x00000001)        /*!< Debug Sleep Mode */
 .equiv DBGMCU_CR_DBG_STOP,                  (0x00000002)        /*!< Debug Stop Mode */
 .equiv DBGMCU_CR_DBG_STANDBY,               (0x00000004)        /*!< Debug Standby mode */
 .equiv DBGMCU_CR_TRACE_IOEN,                (0x00000020)        /*!< Trace Pin Assignment Control */

 .equiv DBGMCU_CR_TRACE_MODE,                (0x000000C0)        /*!< TRACE_MODE[1:0] bits (Trace Pin Assignment Control) */
 .equiv DBGMCU_CR_TRACE_MODE_0,              (0x00000040)        /*!< Bit 0 */
 .equiv DBGMCU_CR_TRACE_MODE_1,              (0x00000080)        /*!< Bit 1 */

 .equiv DBGMCU_CR_DBG_IWDG_STOP,             (0x00000100)        /*!< Debug Independent Watchdog stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_WWDG_STOP,             (0x00000200)        /*!< Debug Window Watchdog stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM1_STOP,             (0x00000400)        /*!< TIM1 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM2_STOP,             (0x00000800)        /*!< TIM2 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM3_STOP,             (0x00001000)        /*!< TIM3 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM4_STOP,             (0x00002000)        /*!< TIM4 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_CAN1_STOP,             (0x00004000)        /*!< Debug CAN1 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT,    (0x00008000)        /*!< SMBUS timeout mode stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT,    (0x00010000)        /*!< SMBUS timeout mode stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM8_STOP,             (0x00020000)        /*!< TIM8 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM5_STOP,             (0x00040000)        /*!< TIM5 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM6_STOP,             (0x00080000)        /*!< TIM6 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_TIM7_STOP,             (0x00100000)        /*!< TIM7 counter stopped when core is halted */
 .equiv DBGMCU_CR_DBG_CAN2_STOP,             (0x00200000)        /*!< Debug CAN2 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM15_STOP,            (0x00400000)        /*!< Debug TIM15 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM16_STOP,            (0x00800000)        /*!< Debug TIM16 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM17_STOP,            (0x01000000)        /*!< Debug TIM17 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM12_STOP,            (0x02000000)        /*!< Debug TIM12 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM13_STOP,            (0x04000000)        /*!< Debug TIM13 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM14_STOP,            (0x08000000)        /*!< Debug TIM14 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM9_STOP,             (0x10000000)        /*!< Debug TIM9 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM10_STOP,            (0x20000000)        /*!< Debug TIM10 stopped when Core is halted */
 .equiv DBGMCU_CR_DBG_TIM11_STOP,            (0x40000000)        /*!< Debug TIM11 stopped when Core is halted */

/******************************************************************************/
/*                                                                            */
/*                      FLASH and Option Bytes Registers                      */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for FLASH_ACR register  ******************/
 .equiv FLASH_ACR_LATENCY,                   (0x07)               /*!< LATENCY[2:0] bits (Latency) */
 .equiv FLASH_ACR_LATENCY_0,                 (0x00)               /*!< Bit 0 */
 .equiv FLASH_ACR_LATENCY_1,                 (0x01)               /*!< Bit 0 */
 .equiv FLASH_ACR_LATENCY_2,                 (0x02)               /*!< Bit 1 */

 .equiv FLASH_ACR_HLFCYA,                    (0x08)               /*!< Flash Half Cycle Access Enable */
 .equiv FLASH_ACR_PRFTBE,                    (0x10)               /*!< Prefetch Buffer Enable */
 .equiv FLASH_ACR_PRFTBS,                    (0x20)               /*!< Prefetch Buffer Status */

/******************  Bit definition for FLASH_KEYR register  ******************/
 .equiv FLASH_KEYR_FKEYR,                    (0xFFFFFFFF)        /*!< FPEC Key */

/******************  FLASH Keys  **********************************************/
 .equiv RDP_Key,                  (0x00A5)
 .equiv FLASH_KEY1,               (0x45670123)
 .equiv FLASH_KEY2,               (0xCDEF89AB)

/*****************  Bit definition for FLASH_OPTKEYR register  ****************/
 .equiv FLASH_OPTKEYR_OPTKEYR,               (0xFFFFFFFF)        /*!< Option Byte Key */

/******************  Bit definition for FLASH_SR register  *******************/
 .equiv FLASH_SR_BSY,                        (0x01)               /*!< Busy */
 .equiv FLASH_SR_PGERR,                      (0x04)               /*!< Programming Error */
 .equiv FLASH_SR_WRPRTERR,                   (0x10)               /*!< Write Protection Error */
 .equiv FLASH_SR_EOP,                        (0x20)               /*!< End of operation */

/*******************  Bit definition for FLASH_CR register  *******************/
 .equiv FLASH_CR_PG,                         (0x0001)            /*!< Programming */
 .equiv FLASH_CR_PER,                        (0x0002)            /*!< Page Erase */
 .equiv FLASH_CR_MER,                        (0x0004)            /*!< Mass Erase */
 .equiv FLASH_CR_OPTPG,                      (0x0010)            /*!< Option Byte Programming */
 .equiv FLASH_CR_OPTER,                      (0x0020)            /*!< Option Byte Erase */
 .equiv FLASH_CR_STRT,                       (0x0040)            /*!< Start */
 .equiv FLASH_CR_LOCK,                       (0x0080)            /*!< Lock */
 .equiv FLASH_CR_OPTWRE,                     (0x0200)            /*!< Option Bytes Write Enable */
 .equiv FLASH_CR_ERRIE,                      (0x0400)            /*!< Error Interrupt Enable */
 .equiv FLASH_CR_EOPIE,                      (0x1000)            /*!< End of operation interrupt enable */

/*******************  Bit definition for FLASH_AR register  *******************/
 .equiv FLASH_AR_FAR,                        (0xFFFFFFFF)        /*!< Flash Address */

/******************  Bit definition for FLASH_OBR register  *******************/
 .equiv FLASH_OBR_OPTERR,                    (0x0001)            /*!< Option Byte Error */
 .equiv FLASH_OBR_RDPRT,                     (0x0002)            /*!< Read protection */

 .equiv FLASH_OBR_USER,                      (0x03FC)            /*!< User Option Bytes */
 .equiv FLASH_OBR_WDG_SW,                    (0x0004)            /*!< WDG_SW */
 .equiv FLASH_OBR_nRST_STOP,                 (0x0008)            /*!< nRST_STOP */
 .equiv FLASH_OBR_nRST_STDBY,                (0x0010)            /*!< nRST_STDBY */
 .equiv FLASH_OBR_BFB2,                      (0x0020)            /*!< BFB2 */

/******************  Bit definition for FLASH_WRPR register  ******************/
 .equiv FLASH_WRPR_WRP,                        (0xFFFFFFFF)        /*!< Write Protect */

/*----------------------------------------------------------------------------*/

/******************  Bit definition for FLASH_RDP register  *******************/
 .equiv FLASH_RDP_RDP,                       (0x000000FF)        /*!< Read protection option byte */
 .equiv FLASH_RDP_nRDP,                      (0x0000FF00)        /*!< Read protection complemented option byte */

/******************  Bit definition for FLASH_USER register  ******************/
 .equiv FLASH_USER_USER,                     (0x00FF0000)        /*!< User option byte */
 .equiv FLASH_USER_nUSER,                    (0xFF000000)        /*!< User complemented option byte */

/******************  Bit definition for FLASH_Data0 register  *****************/
 .equiv FLASH_Data0_Data0,                   (0x000000FF)        /*!< User data storage option byte */
 .equiv FLASH_Data0_nData0,                  (0x0000FF00)        /*!< User data storage complemented option byte */

/******************  Bit definition for FLASH_Data1 register  *****************/
 .equiv FLASH_Data1_Data1,                   (0x00FF0000)        /*!< User data storage option byte */
 .equiv FLASH_Data1_nData1,                  (0xFF000000)        /*!< User data storage complemented option byte */

/******************  Bit definition for FLASH_WRP0 register  ******************/
 .equiv FLASH_WRP0_WRP0,                     (0x000000FF)        /*!< Flash memory write protection option bytes */
 .equiv FLASH_WRP0_nWRP0,                    (0x0000FF00)        /*!< Flash memory write protection complemented option bytes */

/******************  Bit definition for FLASH_WRP1 register  ******************/
 .equiv FLASH_WRP1_WRP1,                     (0x00FF0000)        /*!< Flash memory write protection option bytes */
 .equiv FLASH_WRP1_nWRP1,                    (0xFF000000)        /*!< Flash memory write protection complemented option bytes */

/******************  Bit definition for FLASH_WRP2 register  ******************/
 .equiv FLASH_WRP2_WRP2,                     (0x000000FF)        /*!< Flash memory write protection option bytes */
 .equiv FLASH_WRP2_nWRP2,                    (0x0000FF00)        /*!< Flash memory write protection complemented option bytes */

/******************  Bit definition for FLASH_WRP3 register  ******************/
 .equiv FLASH_WRP3_WRP3,                     (0x00FF0000)        /*!< Flash memory write protection option bytes */
 .equiv FLASH_WRP3_nWRP3,                    (0xFF000000)        /*!< Flash memory write protection complemented option bytes */

/*
 * cortex M3 common definitions from core_cm3.h (provided by ARM)
 * NVIC, SysTick, and other things part of the CM3 core.
 */

/* Memory mapping of Cortex-M3 Hardware */
 .equiv SCS_BASE,            (0xE000E000)                            /*!< System Control Space Base Address  */
 .equiv ITM_BASE,            (0xE0000000)                            /*!< ITM Base Address                   */
 .equiv DWT_BASE,            (0xE0001000)                            /*!< DWT Base Address                   */
 .equiv TPI_BASE,            (0xE0040000)                            /*!< TPI Base Address                   */
 .equiv CoreDebug_BASE,      (0xE000EDF0)                            /*!< Core Debug Base Address            */
 .equiv SysTick_BASE,        (SCS_BASE +  0x0010)                    /*!< SysTick Base Address               */
 .equiv NVIC_BASE,           (SCS_BASE +  0x0100)                    /*!< NVIC Base Address                  */
 .equiv SCB_BASE,            (SCS_BASE +  0x0D00)                    /*!< System Control Block Base Address  */

/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 */
STRUCTDEF  NVIC
       uint32_ta ISER, 8
       uint32_ta RESERVED0, 24
       uint32_ta ICER, 8
       uint32_ta RSERVED1, 24
       uint32_ta ISPR, 8
       uint32_ta RESERVED2, 24
       uint32_ta ICPR, 8
       uint32_ta RESERVED3, 24
       uint32_ta IABR, 8
       uint32_ta RESERVED4, 56
       uint8_ta  IP, 240
       uint32_ta RESERVED5, 644
       uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register     */
ENDSTRUCT

/* Software Triggered Interrupt Register Definitions */
 .equiv NVIC_STIR_INTID_Pos,                 0                                          /*!< STIR: INTLINESNUM Position */
 .equiv NVIC_STIR_INTID_Msk,                (0x1FF << NVIC_STIR_INTID_Pos)            /*!< STIR: INTLINESNUM Mask */

/*@} end of group CMSIS_NVIC */


/** \ingroup  CMSIS_core_register
    \defgroup CMSIS_SCB     System Control Block (SCB)
    \brief      Type definitions for the System Control Block Registers
  @{
 */

/** \brief  Structure type to access the System Control Block (SCB).
 */
STRUCTDEF SCB
       uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register                                   */
       uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register                  */
       uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register                          */
       uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register      */
       uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
       uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
       uint8_ta  SHP, 12
       uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
       uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register                    */
       uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register                             */
       uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
       uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register                      */
       uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register                             */
       uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register                       */
       uint32_ta PFR, 2
       uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register                                */
       uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register                            */
       uint32_ta MMFR, 4
       uint32_ta ISAR, 5
       uint32_ta RESERVED0, 5
       uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register                   */
ENDSTRUCT
	
/* SCB CPUID Register Definitions */
 .equiv SCB_CPUID_IMPLEMENTER_Pos,          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
 .equiv SCB_CPUID_IMPLEMENTER_Msk,          (0xFF << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */

 .equiv SCB_CPUID_VARIANT_Pos,              20                                             /*!< SCB CPUID: VARIANT Position */
 .equiv SCB_CPUID_VARIANT_Msk,              (0xF << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */

 .equiv SCB_CPUID_ARCHITECTURE_Pos,         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
 .equiv SCB_CPUID_ARCHITECTURE_Msk,         (0xF << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */

 .equiv SCB_CPUID_PARTNO_Pos,                4                                             /*!< SCB CPUID: PARTNO Position */
 .equiv SCB_CPUID_PARTNO_Msk,               (0xFFF << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */

 .equiv SCB_CPUID_REVISION_Pos,              0                                             /*!< SCB CPUID: REVISION Position */
 .equiv SCB_CPUID_REVISION_Msk,             (0xF << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */

/* SCB Interrupt Control State Register Definitions */
 .equiv SCB_ICSR_NMIPENDSET_Pos,            31                                             /*!< SCB ICSR: NMIPENDSET Position */
 .equiv SCB_ICSR_NMIPENDSET_Msk,            (1 << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */

 .equiv SCB_ICSR_PENDSVSET_Pos,             28                                             /*!< SCB ICSR: PENDSVSET Position */
 .equiv SCB_ICSR_PENDSVSET_Msk,             (1 << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */

 .equiv SCB_ICSR_PENDSVCLR_Pos,             27                                             /*!< SCB ICSR: PENDSVCLR Position */
 .equiv SCB_ICSR_PENDSVCLR_Msk,             (1 << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */

 .equiv SCB_ICSR_PENDSTSET_Pos,             26                                             /*!< SCB ICSR: PENDSTSET Position */
 .equiv SCB_ICSR_PENDSTSET_Msk,             (1 << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */

 .equiv SCB_ICSR_PENDSTCLR_Pos,             25                                             /*!< SCB ICSR: PENDSTCLR Position */
 .equiv SCB_ICSR_PENDSTCLR_Msk,             (1 << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */

 .equiv SCB_ICSR_ISRPREEMPT_Pos,            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
 .equiv SCB_ICSR_ISRPREEMPT_Msk,            (1 << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */

 .equiv SCB_ICSR_ISRPENDING_Pos,            22                                             /*!< SCB ICSR: ISRPENDING Position */
 .equiv SCB_ICSR_ISRPENDING_Msk,            (1 << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */

 .equiv SCB_ICSR_VECTPENDING_Pos,           12                                             /*!< SCB ICSR: VECTPENDING Position */
 .equiv SCB_ICSR_VECTPENDING_Msk,           (0x1FF << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */

 .equiv SCB_ICSR_RETTOBASE_Pos,             11                                             /*!< SCB ICSR: RETTOBASE Position */
 .equiv SCB_ICSR_RETTOBASE_Msk,             (1 << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */

 .equiv SCB_ICSR_VECTACTIVE_Pos,             0                                             /*!< SCB ICSR: VECTACTIVE Position */
 .equiv SCB_ICSR_VECTACTIVE_Msk,            (0x1FF << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */

/* SCB Vector Table Offset Register Definitions */
 .equiv SCB_VTOR_TBLBASE_Pos,               29                                             /*!< SCB VTOR: TBLBASE Position */
 .equiv SCB_VTOR_TBLBASE_Msk,               (1 << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB VTOR: TBLBASE Mask */

 .equiv SCB_VTOR_TBLOFF_Pos,                 7                                             /*!< SCB VTOR: TBLOFF Position */
 .equiv SCB_VTOR_TBLOFF_Msk,                (0x3FFFFF << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */

/* SCB Application Interrupt and Reset Control Register Definitions */
 .equiv SCB_AIRCR_VECTKEY_Pos,              16                                             /*!< SCB AIRCR: VECTKEY Position */
 .equiv SCB_AIRCR_VECTKEY_Msk,              (0xFFFF << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */

 .equiv SCB_AIRCR_VECTKEYSTAT_Pos,          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
 .equiv SCB_AIRCR_VECTKEYSTAT_Msk,          (0xFFFF << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */

 .equiv SCB_AIRCR_ENDIANESS_Pos,            15                                             /*!< SCB AIRCR: ENDIANESS Position */
 .equiv SCB_AIRCR_ENDIANESS_Msk,            (1 << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */

 .equiv SCB_AIRCR_PRIGROUP_Pos,              8                                             /*!< SCB AIRCR: PRIGROUP Position */
 .equiv SCB_AIRCR_PRIGROUP_Msk,             (7 << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */

 .equiv SCB_AIRCR_SYSRESETREQ_Pos,           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
 .equiv SCB_AIRCR_SYSRESETREQ_Msk,          (1 << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */

 .equiv SCB_AIRCR_VECTCLRACTIVE_Pos,         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
 .equiv SCB_AIRCR_VECTCLRACTIVE_Msk,        (1 << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */

 .equiv SCB_AIRCR_VECTRESET_Pos,             0                                             /*!< SCB AIRCR: VECTRESET Position */
 .equiv SCB_AIRCR_VECTRESET_Msk,            (1 << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB AIRCR: VECTRESET Mask */

/* SCB System Control Register Definitions */
 .equiv SCB_SCR_SEVONPEND_Pos,               4                                             /*!< SCB SCR: SEVONPEND Position */
 .equiv SCB_SCR_SEVONPEND_Msk,              (1 << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */

 .equiv SCB_SCR_SLEEPDEEP_Pos,               2                                             /*!< SCB SCR: SLEEPDEEP Position */
 .equiv SCB_SCR_SLEEPDEEP_Msk,              (1 << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */

 .equiv SCB_SCR_SLEEPONEXIT_Pos,             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
 .equiv SCB_SCR_SLEEPONEXIT_Msk,            (1 << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */

/* SCB Configuration Control Register Definitions */
 .equiv SCB_CCR_STKALIGN_Pos,                9                                             /*!< SCB CCR: STKALIGN Position */
 .equiv SCB_CCR_STKALIGN_Msk,               (1 << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */

 .equiv SCB_CCR_BFHFNMIGN_Pos,               8                                             /*!< SCB CCR: BFHFNMIGN Position */
 .equiv SCB_CCR_BFHFNMIGN_Msk,              (1 << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */

 .equiv SCB_CCR_DIV_0_TRP_Pos,               4                                             /*!< SCB CCR: DIV_0_TRP Position */
 .equiv SCB_CCR_DIV_0_TRP_Msk,              (1 << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */

 .equiv SCB_CCR_UNALIGN_TRP_Pos,             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
 .equiv SCB_CCR_UNALIGN_TRP_Msk,            (1 << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */

 .equiv SCB_CCR_USERSETMPEND_Pos,            1                                             /*!< SCB CCR: USERSETMPEND Position */
 .equiv SCB_CCR_USERSETMPEND_Msk,           (1 << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */

 .equiv SCB_CCR_NONBASETHRDENA_Pos,          0                                             /*!< SCB CCR: NONBASETHRDENA Position */
 .equiv SCB_CCR_NONBASETHRDENA_Msk,         (1 << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB CCR: NONBASETHRDENA Mask */

/* SCB System Handler Control and State Register Definitions */
 .equiv SCB_SHCSR_USGFAULTENA_Pos,          18                                             /*!< SCB SHCSR: USGFAULTENA Position */
 .equiv SCB_SHCSR_USGFAULTENA_Msk,          (1 << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */

 .equiv SCB_SHCSR_BUSFAULTENA_Pos,          17                                             /*!< SCB SHCSR: BUSFAULTENA Position */
 .equiv SCB_SHCSR_BUSFAULTENA_Msk,          (1 << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */

 .equiv SCB_SHCSR_MEMFAULTENA_Pos,          16                                             /*!< SCB SHCSR: MEMFAULTENA Position */
 .equiv SCB_SHCSR_MEMFAULTENA_Msk,          (1 << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */

 .equiv SCB_SHCSR_SVCALLPENDED_Pos,         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
 .equiv SCB_SHCSR_SVCALLPENDED_Msk,         (1 << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */

 .equiv SCB_SHCSR_BUSFAULTPENDED_Pos,       14                                             /*!< SCB SHCSR: BUSFAULTPENDED Position */
 .equiv SCB_SHCSR_BUSFAULTPENDED_Msk,       (1 << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */

 .equiv SCB_SHCSR_MEMFAULTPENDED_Pos,       13                                             /*!< SCB SHCSR: MEMFAULTPENDED Position */
 .equiv SCB_SHCSR_MEMFAULTPENDED_Msk,       (1 << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */

 .equiv SCB_SHCSR_USGFAULTPENDED_Pos,       12                                             /*!< SCB SHCSR: USGFAULTPENDED Position */
 .equiv SCB_SHCSR_USGFAULTPENDED_Msk,       (1 << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */

 .equiv SCB_SHCSR_SYSTICKACT_Pos,           11                                             /*!< SCB SHCSR: SYSTICKACT Position */
 .equiv SCB_SHCSR_SYSTICKACT_Msk,           (1 << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */

 .equiv SCB_SHCSR_PENDSVACT_Pos,            10                                             /*!< SCB SHCSR: PENDSVACT Position */
 .equiv SCB_SHCSR_PENDSVACT_Msk,            (1 << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */

 .equiv SCB_SHCSR_MONITORACT_Pos,            8                                             /*!< SCB SHCSR: MONITORACT Position */
 .equiv SCB_SHCSR_MONITORACT_Msk,           (1 << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */

 .equiv SCB_SHCSR_SVCALLACT_Pos,             7                                             /*!< SCB SHCSR: SVCALLACT Position */
 .equiv SCB_SHCSR_SVCALLACT_Msk,            (1 << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */

 .equiv SCB_SHCSR_USGFAULTACT_Pos,           3                                             /*!< SCB SHCSR: USGFAULTACT Position */
 .equiv SCB_SHCSR_USGFAULTACT_Msk,          (1 << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */

 .equiv SCB_SHCSR_BUSFAULTACT_Pos,           1                                             /*!< SCB SHCSR: BUSFAULTACT Position */
 .equiv SCB_SHCSR_BUSFAULTACT_Msk,          (1 << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */

 .equiv SCB_SHCSR_MEMFAULTACT_Pos,           0                                             /*!< SCB SHCSR: MEMFAULTACT Position */
 .equiv SCB_SHCSR_MEMFAULTACT_Msk,          (1 << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB SHCSR: MEMFAULTACT Mask */

/* SCB Configurable Fault Status Registers Definitions */
 .equiv SCB_CFSR_USGFAULTSR_Pos,            16                                             /*!< SCB CFSR: Usage Fault Status Register Position */
 .equiv SCB_CFSR_USGFAULTSR_Msk,            (0xFFFF << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */

 .equiv SCB_CFSR_BUSFAULTSR_Pos,             8                                             /*!< SCB CFSR: Bus Fault Status Register Position */
 .equiv SCB_CFSR_BUSFAULTSR_Msk,            (0xFF << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */

 .equiv SCB_CFSR_MEMFAULTSR_Pos,             0                                             /*!< SCB CFSR: Memory Manage Fault Status Register Position */
 .equiv SCB_CFSR_MEMFAULTSR_Msk,            (0xFF << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB CFSR: Memory Manage Fault Status Register Mask */

/* SCB Hard Fault Status Registers Definitions */
 .equiv SCB_HFSR_DEBUGEVT_Pos,              31                                             /*!< SCB HFSR: DEBUGEVT Position */
 .equiv SCB_HFSR_DEBUGEVT_Msk,              (1 << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */

 .equiv SCB_HFSR_FORCED_Pos,                30                                             /*!< SCB HFSR: FORCED Position */
 .equiv SCB_HFSR_FORCED_Msk,                (1 << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */

 .equiv SCB_HFSR_VECTTBL_Pos,                1                                             /*!< SCB HFSR: VECTTBL Position */
 .equiv SCB_HFSR_VECTTBL_Msk,               (1 << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */

/* SCB Debug Fault Status Register Definitions */
 .equiv SCB_DFSR_EXTERNAL_Pos,               4                                             /*!< SCB DFSR: EXTERNAL Position */
 .equiv SCB_DFSR_EXTERNAL_Msk,              (1 << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */

 .equiv SCB_DFSR_VCATCH_Pos,                 3                                             /*!< SCB DFSR: VCATCH Position */
 .equiv SCB_DFSR_VCATCH_Msk,                (1 << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */

 .equiv SCB_DFSR_DWTTRAP_Pos,                2                                             /*!< SCB DFSR: DWTTRAP Position */
 .equiv SCB_DFSR_DWTTRAP_Msk,               (1 << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */

 .equiv SCB_DFSR_BKPT_Pos,                   1                                             /*!< SCB DFSR: BKPT Position */
 .equiv SCB_DFSR_BKPT_Msk,                  (1 << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */

 .equiv SCB_DFSR_HALTED_Pos,                 0                                             /*!< SCB DFSR: HALTED Position */
 .equiv SCB_DFSR_HALTED_Msk,                (1 << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */

/*@} end of group CMSIS_SCB */


/** \ingroup  CMSIS_core_register
    \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
    \brief      Type definitions for the System Control and ID Register not in the SCB
  @{
 */

/** \brief  Structure type to access the System Control and ID Register not in the SCB.
 */
STRUCTDEF SCnSCB
       uint32_ta RESERVED0, 1
       uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register      */
       uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      */
ENDSTRUCT

/* Interrupt Controller Type Register Definitions */
 .equiv SCnSCB_ICTR_INTLINESNUM_Pos,         0                                          /*!< ICTR: INTLINESNUM Position */
 .equiv SCnSCB_ICTR_INTLINESNUM_Msk,        (0xF << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: INTLINESNUM Mask */

/* Auxiliary Control Register Definitions */

 .equiv SCnSCB_ACTLR_DISFOLD_Pos,            2                                          /*!< ACTLR: DISFOLD Position */
 .equiv SCnSCB_ACTLR_DISFOLD_Msk,           (1 << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */

 .equiv SCnSCB_ACTLR_DISDEFWBUF_Pos,         1                                          /*!< ACTLR: DISDEFWBUF Position */
 .equiv SCnSCB_ACTLR_DISDEFWBUF_Msk,        (1 << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */

 .equiv SCnSCB_ACTLR_DISMCYCINT_Pos,         0                                          /*!< ACTLR: DISMCYCINT Position */
 .equiv SCnSCB_ACTLR_DISMCYCINT_Msk,        (1 << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: DISMCYCINT Mask */

/*@} end of group CMSIS_SCnotSCB */


/** \ingroup  CMSIS_core_register
    \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
    \brief      Type definitions for the System Timer Registers.
  @{
 */

/** \brief  Structure type to access the System Timer (SysTick).
 */
STRUCTDEF SysTick
       uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
       uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
       uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
       uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
ENDSTRUCT
	
/* SysTick Control / Status Register Definitions */
 .equiv SysTick_CTRL_COUNTFLAG_Pos,         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
 .equiv SysTick_CTRL_COUNTFLAG_Msk,         (1 << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */

 .equiv SysTick_CTRL_CLKSOURCE_Pos,          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
 .equiv SysTick_CTRL_CLKSOURCE_Msk,         (1 << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */

 .equiv SysTick_CTRL_TICKINT_Pos,            1                                             /*!< SysTick CTRL: TICKINT Position */
 .equiv SysTick_CTRL_TICKINT_Msk,           (1 << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */

 .equiv SysTick_CTRL_ENABLE_Pos,             0                                             /*!< SysTick CTRL: ENABLE Position */
 .equiv SysTick_CTRL_ENABLE_Msk,            (1 << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */

/* SysTick Reload Register Definitions */
 .equiv SysTick_LOAD_RELOAD_Pos,             0                                             /*!< SysTick LOAD: RELOAD Position */
 .equiv SysTick_LOAD_RELOAD_Msk,            (0xFFFFFF << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */

/* SysTick Current Register Definitions */
 .equiv SysTick_VAL_CURRENT_Pos,             0                                             /*!< SysTick VAL: CURRENT Position */
 .equiv SysTick_VAL_CURRENT_Msk,            (0xFFFFFF << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */

/* SysTick Calibration Register Definitions */
 .equiv SysTick_CALIB_NOREF_Pos,            31                                             /*!< SysTick CALIB: NOREF Position */
 .equiv SysTick_CALIB_NOREF_Msk,            (1 << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */

 .equiv SysTick_CALIB_SKEW_Pos,             30                                             /*!< SysTick CALIB: SKEW Position */
 .equiv SysTick_CALIB_SKEW_Msk,             (1 << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */

 .equiv SysTick_CALIB_TENMS_Pos,             0                                             /*!< SysTick CALIB: TENMS Position */
 .equiv SysTick_CALIB_TENMS_Msk,            (0xFFFFFF << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */

/*@} end of group CMSIS_SysTick */



 .endif  /* recursive include prevention */

/*
 * Useful keyboard macros.
 * 1) change  #defines, to .equivs

;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: C-s C-q LFD #define ESC DEL DEL SPC .equiv ESC \ SPC C-s SPC C-b , C-a C-p

Command: last-kbd-macro
Key: none

Macro:

C-s			;; isearch-forward
C-q			;; quoted-insert
LFD			;; newline-and-indent
#define			;; self-insert-command * 7
ESC DEL			;; backward-kill-word
DEL			;; delete-backward-char
SPC			;; self-insert-command
.equiv			;; self-insert-command * 6
ESC \			;; delete-horizontal-space
SPC			;; self-insert-command
C-s			;; isearch-forward
SPC			;; self-insert-command
C-b			;; backward-char
,			;; self-insert-command
C-a			;; move-beginning-of-line
C-p			;; previous-line

*/

/*
 * 2 - convert C structure definition to use STRUCTDEF/ENDSTRUCT macros
 */
/*

C-s			;; isearch-forward
typedef			;; self-insert-command * 7
C-a			;; move-beginning-of-line
NUL			;; set-mark-command
C-s			;; isearch-forward
}			;; self-insert-command
C-n			;; next-line
C-x n n			;; narrow-to-region
ESC			;; ESC-prefix
2*DEL			;; delete-backward-char
ESC			;; ESC-prefix
b			;; self-insert-command
C-a			;; move-beginning-of-line
2*C-d			;; delete-char
C-k			;; kill-line
ENDSTRUCT		;; self-insert-command * 9
ESC			;; ESC-prefix
<STRUCTDEF		;; self-insert-command * 10
SPC			;; self-insert-command
C-y			;; yank
C-k			;; kill-line
C-n			;; next-line
C-a			;; move-beginning-of-line
2*C-k			;; kill-line
ESC			;; ESC-prefix
>			;; self-insert-command
RET			;; newline
C-x n w			;; widen

*/

/*
 * 3 - convert arrays in structures to xxx_ta name, size macros.
 *

C-s			;; isearch-forward
[			;; self-insert-command
C-b			;; backward-char
C-d			;; delete-char
,			;; self-insert-command
SPC			;; self-insert-command
ESC			;; ESC-prefix
f			;; self-insert-command
C-k			;; kill-line
C-a			;; move-beginning-of-line
ESC			;; ESC-prefix
f			;; self-insert-command
ESC			;; ESC-prefix
fa			;; self-insert-command * 2


*/
.list
/* End of stm32f103c8t6.asmh */

